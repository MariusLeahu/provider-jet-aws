/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type IPv4CIDRBlockAssociationObservation struct {
}

type IPv4CIDRBlockAssociationParameters struct {

	// +kubebuilder:validation:Required
	CidrBlock *string `json:"cidrBlock" tf:"cidr_block,omitempty"`

	// Region is the region you'd like your resource to be created in.
	// +terrajet:crd:field:TFTag=-
	// +kubebuilder:validation:Required
	Region *string `json:"region" tf:"-,omitempty"`

	// +crossplane:generate:reference:type=VPC
	// +kubebuilder:validation:Optional
	VpcID *string `json:"vpcId,omitempty" tf:"vpc_id,omitempty"`

	// +kubebuilder:validation:Optional
	VpcIDRef *v1.Reference `json:"vpcIDRef,omitempty" tf:"-"`

	// +kubebuilder:validation:Optional
	VpcIDSelector *v1.Selector `json:"vpcIDSelector,omitempty" tf:"-"`
}

// IPv4CIDRBlockAssociationSpec defines the desired state of IPv4CIDRBlockAssociation
type IPv4CIDRBlockAssociationSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     IPv4CIDRBlockAssociationParameters `json:"forProvider"`
}

// IPv4CIDRBlockAssociationStatus defines the observed state of IPv4CIDRBlockAssociation.
type IPv4CIDRBlockAssociationStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        IPv4CIDRBlockAssociationObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// IPv4CIDRBlockAssociation is the Schema for the IPv4CIDRBlockAssociations API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,tfaws}
type IPv4CIDRBlockAssociation struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              IPv4CIDRBlockAssociationSpec   `json:"spec"`
	Status            IPv4CIDRBlockAssociationStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// IPv4CIDRBlockAssociationList contains a list of IPv4CIDRBlockAssociations
type IPv4CIDRBlockAssociationList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []IPv4CIDRBlockAssociation `json:"items"`
}

// Repository type metadata.
var (
	IPv4CIDRBlockAssociationKind             = "IPv4CIDRBlockAssociation"
	IPv4CIDRBlockAssociationGroupKind        = schema.GroupKind{Group: Group, Kind: IPv4CIDRBlockAssociationKind}.String()
	IPv4CIDRBlockAssociationKindAPIVersion   = IPv4CIDRBlockAssociationKind + "." + GroupVersion.String()
	IPv4CIDRBlockAssociationGroupVersionKind = GroupVersion.WithKind(IPv4CIDRBlockAssociationKind)
)

func init() {
	SchemeBuilder.Register(&IPv4CIDRBlockAssociation{}, &IPv4CIDRBlockAssociationList{})
}
