/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	xpv1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"
)

type CloudwatchLoggingOptionsObservation struct {
}

type CloudwatchLoggingOptionsParameters struct {

	// +kubebuilder:validation:Optional
	Enabled *bool `json:"enabled,omitempty" tf:"enabled"`

	// +kubebuilder:validation:Optional
	LogGroupName *string `json:"logGroupName,omitempty" tf:"log_group_name"`

	// +kubebuilder:validation:Optional
	LogStreamName *string `json:"logStreamName,omitempty" tf:"log_stream_name"`
}

type CommonAttributesObservation struct {
}

type CommonAttributesParameters struct {

	// +kubebuilder:validation:Required
	Name string `json:"name" tf:"name"`

	// +kubebuilder:validation:Required
	Value string `json:"value" tf:"value"`
}

type DataFormatConversionConfigurationObservation struct {
}

type DataFormatConversionConfigurationParameters struct {

	// +kubebuilder:validation:Optional
	Enabled *bool `json:"enabled,omitempty" tf:"enabled"`

	// +kubebuilder:validation:Required
	InputFormatConfiguration []InputFormatConfigurationParameters `json:"inputFormatConfiguration" tf:"input_format_configuration"`

	// +kubebuilder:validation:Required
	OutputFormatConfiguration []OutputFormatConfigurationParameters `json:"outputFormatConfiguration" tf:"output_format_configuration"`

	// +kubebuilder:validation:Required
	SchemaConfiguration []SchemaConfigurationParameters `json:"schemaConfiguration" tf:"schema_configuration"`
}

type DeserializerObservation struct {
}

type DeserializerParameters struct {

	// +kubebuilder:validation:Optional
	HiveJSONSerDe []HiveJSONSerDeParameters `json:"hiveJsonSerDe,omitempty" tf:"hive_json_ser_de"`

	// +kubebuilder:validation:Optional
	OpenXJSONSerDe []OpenXJSONSerDeParameters `json:"openXJsonSerDe,omitempty" tf:"open_x_json_ser_de"`
}

type ElasticsearchConfigurationObservation struct {
}

type ElasticsearchConfigurationParameters struct {

	// +kubebuilder:validation:Optional
	BufferingInterval *int64 `json:"bufferingInterval,omitempty" tf:"buffering_interval"`

	// +kubebuilder:validation:Optional
	BufferingSize *int64 `json:"bufferingSize,omitempty" tf:"buffering_size"`

	// +kubebuilder:validation:Optional
	CloudwatchLoggingOptions []CloudwatchLoggingOptionsParameters `json:"cloudwatchLoggingOptions,omitempty" tf:"cloudwatch_logging_options"`

	// +kubebuilder:validation:Optional
	ClusterEndpoint *string `json:"clusterEndpoint,omitempty" tf:"cluster_endpoint"`

	// +kubebuilder:validation:Optional
	DomainArn *string `json:"domainArn,omitempty" tf:"domain_arn"`

	// +kubebuilder:validation:Required
	IndexName string `json:"indexName" tf:"index_name"`

	// +kubebuilder:validation:Optional
	IndexRotationPeriod *string `json:"indexRotationPeriod,omitempty" tf:"index_rotation_period"`

	// +kubebuilder:validation:Optional
	ProcessingConfiguration []ProcessingConfigurationParameters `json:"processingConfiguration,omitempty" tf:"processing_configuration"`

	// +kubebuilder:validation:Optional
	RetryDuration *int64 `json:"retryDuration,omitempty" tf:"retry_duration"`

	// +kubebuilder:validation:Required
	RoleArn string `json:"roleArn" tf:"role_arn"`

	// +kubebuilder:validation:Optional
	S3BackupMode *string `json:"s3BackupMode,omitempty" tf:"s3_backup_mode"`

	// +kubebuilder:validation:Optional
	TypeName *string `json:"typeName,omitempty" tf:"type_name"`

	// +kubebuilder:validation:Optional
	VpcConfig []VpcConfigParameters `json:"vpcConfig,omitempty" tf:"vpc_config"`
}

type ExtendedS3ConfigurationCloudwatchLoggingOptionsObservation struct {
}

type ExtendedS3ConfigurationCloudwatchLoggingOptionsParameters struct {

	// +kubebuilder:validation:Optional
	Enabled *bool `json:"enabled,omitempty" tf:"enabled"`

	// +kubebuilder:validation:Optional
	LogGroupName *string `json:"logGroupName,omitempty" tf:"log_group_name"`

	// +kubebuilder:validation:Optional
	LogStreamName *string `json:"logStreamName,omitempty" tf:"log_stream_name"`
}

type ExtendedS3ConfigurationObservation struct {
}

type ExtendedS3ConfigurationParameters struct {

	// +kubebuilder:validation:Required
	BucketArn string `json:"bucketArn" tf:"bucket_arn"`

	// +kubebuilder:validation:Optional
	BufferInterval *int64 `json:"bufferInterval,omitempty" tf:"buffer_interval"`

	// +kubebuilder:validation:Optional
	BufferSize *int64 `json:"bufferSize,omitempty" tf:"buffer_size"`

	// +kubebuilder:validation:Optional
	CloudwatchLoggingOptions []ExtendedS3ConfigurationCloudwatchLoggingOptionsParameters `json:"cloudwatchLoggingOptions,omitempty" tf:"cloudwatch_logging_options"`

	// +kubebuilder:validation:Optional
	CompressionFormat *string `json:"compressionFormat,omitempty" tf:"compression_format"`

	// +kubebuilder:validation:Optional
	DataFormatConversionConfiguration []DataFormatConversionConfigurationParameters `json:"dataFormatConversionConfiguration,omitempty" tf:"data_format_conversion_configuration"`

	// +kubebuilder:validation:Optional
	ErrorOutputPrefix *string `json:"errorOutputPrefix,omitempty" tf:"error_output_prefix"`

	// +kubebuilder:validation:Optional
	KmsKeyArn *string `json:"kmsKeyArn,omitempty" tf:"kms_key_arn"`

	// +kubebuilder:validation:Optional
	Prefix *string `json:"prefix,omitempty" tf:"prefix"`

	// +kubebuilder:validation:Optional
	ProcessingConfiguration []ExtendedS3ConfigurationProcessingConfigurationParameters `json:"processingConfiguration,omitempty" tf:"processing_configuration"`

	// +kubebuilder:validation:Required
	RoleArn string `json:"roleArn" tf:"role_arn"`

	// +kubebuilder:validation:Optional
	S3BackupConfiguration []S3BackupConfigurationParameters `json:"s3BackupConfiguration,omitempty" tf:"s3_backup_configuration"`

	// +kubebuilder:validation:Optional
	S3BackupMode *string `json:"s3BackupMode,omitempty" tf:"s3_backup_mode"`
}

type ExtendedS3ConfigurationProcessingConfigurationObservation struct {
}

type ExtendedS3ConfigurationProcessingConfigurationParameters struct {

	// +kubebuilder:validation:Optional
	Enabled *bool `json:"enabled,omitempty" tf:"enabled"`

	// +kubebuilder:validation:Optional
	Processors []ProcessingConfigurationProcessorsParameters `json:"processors,omitempty" tf:"processors"`
}

type HTTPEndpointConfigurationCloudwatchLoggingOptionsObservation struct {
}

type HTTPEndpointConfigurationCloudwatchLoggingOptionsParameters struct {

	// +kubebuilder:validation:Optional
	Enabled *bool `json:"enabled,omitempty" tf:"enabled"`

	// +kubebuilder:validation:Optional
	LogGroupName *string `json:"logGroupName,omitempty" tf:"log_group_name"`

	// +kubebuilder:validation:Optional
	LogStreamName *string `json:"logStreamName,omitempty" tf:"log_stream_name"`
}

type HTTPEndpointConfigurationObservation struct {
}

type HTTPEndpointConfigurationParameters struct {

	// +kubebuilder:validation:Optional
	AccessKey *string `json:"accessKey,omitempty" tf:"access_key"`

	// +kubebuilder:validation:Optional
	BufferingInterval *int64 `json:"bufferingInterval,omitempty" tf:"buffering_interval"`

	// +kubebuilder:validation:Optional
	BufferingSize *int64 `json:"bufferingSize,omitempty" tf:"buffering_size"`

	// +kubebuilder:validation:Optional
	CloudwatchLoggingOptions []HTTPEndpointConfigurationCloudwatchLoggingOptionsParameters `json:"cloudwatchLoggingOptions,omitempty" tf:"cloudwatch_logging_options"`

	// +kubebuilder:validation:Optional
	Name *string `json:"name,omitempty" tf:"name"`

	// +kubebuilder:validation:Optional
	ProcessingConfiguration []HTTPEndpointConfigurationProcessingConfigurationParameters `json:"processingConfiguration,omitempty" tf:"processing_configuration"`

	// +kubebuilder:validation:Optional
	RequestConfiguration []RequestConfigurationParameters `json:"requestConfiguration,omitempty" tf:"request_configuration"`

	// +kubebuilder:validation:Optional
	RetryDuration *int64 `json:"retryDuration,omitempty" tf:"retry_duration"`

	// +kubebuilder:validation:Optional
	RoleArn *string `json:"roleArn,omitempty" tf:"role_arn"`

	// +kubebuilder:validation:Optional
	S3BackupMode *string `json:"s3BackupMode,omitempty" tf:"s3_backup_mode"`

	// +kubebuilder:validation:Required
	URL string `json:"url" tf:"url"`
}

type HTTPEndpointConfigurationProcessingConfigurationObservation struct {
}

type HTTPEndpointConfigurationProcessingConfigurationParameters struct {

	// +kubebuilder:validation:Optional
	Enabled *bool `json:"enabled,omitempty" tf:"enabled"`

	// +kubebuilder:validation:Optional
	Processors []HTTPEndpointConfigurationProcessingConfigurationProcessorsParameters `json:"processors,omitempty" tf:"processors"`
}

type HTTPEndpointConfigurationProcessingConfigurationProcessorsObservation struct {
}

type HTTPEndpointConfigurationProcessingConfigurationProcessorsParameters struct {

	// +kubebuilder:validation:Optional
	Parameters []ProcessingConfigurationProcessorsParametersParameters `json:"parameters,omitempty" tf:"parameters"`

	// +kubebuilder:validation:Required
	Type string `json:"type" tf:"type"`
}

type HiveJSONSerDeObservation struct {
}

type HiveJSONSerDeParameters struct {

	// +kubebuilder:validation:Optional
	TimestampFormats []string `json:"timestampFormats,omitempty" tf:"timestamp_formats"`
}

type InputFormatConfigurationObservation struct {
}

type InputFormatConfigurationParameters struct {

	// +kubebuilder:validation:Required
	Deserializer []DeserializerParameters `json:"deserializer" tf:"deserializer"`
}

type KinesisFirehoseDeliveryStreamObservation struct {
}

type KinesisFirehoseDeliveryStreamParameters struct {

	// +kubebuilder:validation:Optional
	Arn *string `json:"arn,omitempty" tf:"arn"`

	// +kubebuilder:validation:Required
	Destination string `json:"destination" tf:"destination"`

	// +kubebuilder:validation:Optional
	DestinationID *string `json:"destinationId,omitempty" tf:"destination_id"`

	// +kubebuilder:validation:Optional
	ElasticsearchConfiguration []ElasticsearchConfigurationParameters `json:"elasticsearchConfiguration,omitempty" tf:"elasticsearch_configuration"`

	// +kubebuilder:validation:Optional
	ExtendedS3Configuration []ExtendedS3ConfigurationParameters `json:"extendedS3Configuration,omitempty" tf:"extended_s3_configuration"`

	// +kubebuilder:validation:Optional
	HTTPEndpointConfiguration []HTTPEndpointConfigurationParameters `json:"httpEndpointConfiguration,omitempty" tf:"http_endpoint_configuration"`

	// +kubebuilder:validation:Optional
	KinesisSourceConfiguration []KinesisSourceConfigurationParameters `json:"kinesisSourceConfiguration,omitempty" tf:"kinesis_source_configuration"`

	// +kubebuilder:validation:Required
	Name string `json:"name" tf:"name"`

	// +kubebuilder:validation:Optional
	RedshiftConfiguration []RedshiftConfigurationParameters `json:"redshiftConfiguration,omitempty" tf:"redshift_configuration"`

	// Region is the region you'd like your resource to be created in.
	// +terrajet:crd:field:TFTag=-
	// +kubebuilder:validation:Required
	Region string `json:"region" tf:"-"`

	// +kubebuilder:validation:Optional
	S3Configuration []S3ConfigurationParameters `json:"s3Configuration,omitempty" tf:"s3_configuration"`

	// +kubebuilder:validation:Optional
	ServerSideEncryption []ServerSideEncryptionParameters `json:"serverSideEncryption,omitempty" tf:"server_side_encryption"`

	// +kubebuilder:validation:Optional
	SplunkConfiguration []SplunkConfigurationParameters `json:"splunkConfiguration,omitempty" tf:"splunk_configuration"`

	// +kubebuilder:validation:Optional
	Tags map[string]string `json:"tags,omitempty" tf:"tags"`

	// +kubebuilder:validation:Optional
	TagsAll map[string]string `json:"tagsAll,omitempty" tf:"tags_all"`

	// +kubebuilder:validation:Optional
	VersionID *string `json:"versionId,omitempty" tf:"version_id"`
}

type KinesisSourceConfigurationObservation struct {
}

type KinesisSourceConfigurationParameters struct {

	// +kubebuilder:validation:Required
	KinesisStreamArn string `json:"kinesisStreamArn" tf:"kinesis_stream_arn"`

	// +kubebuilder:validation:Required
	RoleArn string `json:"roleArn" tf:"role_arn"`
}

type OpenXJSONSerDeObservation struct {
}

type OpenXJSONSerDeParameters struct {

	// +kubebuilder:validation:Optional
	CaseInsensitive *bool `json:"caseInsensitive,omitempty" tf:"case_insensitive"`

	// +kubebuilder:validation:Optional
	ColumnToJSONKeyMappings map[string]string `json:"columnToJsonKeyMappings,omitempty" tf:"column_to_json_key_mappings"`

	// +kubebuilder:validation:Optional
	ConvertDotsInJSONKeysToUnderscores *bool `json:"convertDotsInJsonKeysToUnderscores,omitempty" tf:"convert_dots_in_json_keys_to_underscores"`
}

type OrcSerDeObservation struct {
}

type OrcSerDeParameters struct {

	// +kubebuilder:validation:Optional
	BlockSizeBytes *int64 `json:"blockSizeBytes,omitempty" tf:"block_size_bytes"`

	// +kubebuilder:validation:Optional
	BloomFilterColumns []string `json:"bloomFilterColumns,omitempty" tf:"bloom_filter_columns"`

	// +kubebuilder:validation:Optional
	BloomFilterFalsePositiveProbability *float64 `json:"bloomFilterFalsePositiveProbability,omitempty" tf:"bloom_filter_false_positive_probability"`

	// +kubebuilder:validation:Optional
	Compression *string `json:"compression,omitempty" tf:"compression"`

	// +kubebuilder:validation:Optional
	DictionaryKeyThreshold *float64 `json:"dictionaryKeyThreshold,omitempty" tf:"dictionary_key_threshold"`

	// +kubebuilder:validation:Optional
	EnablePadding *bool `json:"enablePadding,omitempty" tf:"enable_padding"`

	// +kubebuilder:validation:Optional
	FormatVersion *string `json:"formatVersion,omitempty" tf:"format_version"`

	// +kubebuilder:validation:Optional
	PaddingTolerance *float64 `json:"paddingTolerance,omitempty" tf:"padding_tolerance"`

	// +kubebuilder:validation:Optional
	RowIndexStride *int64 `json:"rowIndexStride,omitempty" tf:"row_index_stride"`

	// +kubebuilder:validation:Optional
	StripeSizeBytes *int64 `json:"stripeSizeBytes,omitempty" tf:"stripe_size_bytes"`
}

type OutputFormatConfigurationObservation struct {
}

type OutputFormatConfigurationParameters struct {

	// +kubebuilder:validation:Required
	Serializer []SerializerParameters `json:"serializer" tf:"serializer"`
}

type ParametersObservation struct {
}

type ParametersParameters struct {

	// +kubebuilder:validation:Required
	ParameterName string `json:"parameterName" tf:"parameter_name"`

	// +kubebuilder:validation:Required
	ParameterValue string `json:"parameterValue" tf:"parameter_value"`
}

type ParquetSerDeObservation struct {
}

type ParquetSerDeParameters struct {

	// +kubebuilder:validation:Optional
	BlockSizeBytes *int64 `json:"blockSizeBytes,omitempty" tf:"block_size_bytes"`

	// +kubebuilder:validation:Optional
	Compression *string `json:"compression,omitempty" tf:"compression"`

	// +kubebuilder:validation:Optional
	EnableDictionaryCompression *bool `json:"enableDictionaryCompression,omitempty" tf:"enable_dictionary_compression"`

	// +kubebuilder:validation:Optional
	MaxPaddingBytes *int64 `json:"maxPaddingBytes,omitempty" tf:"max_padding_bytes"`

	// +kubebuilder:validation:Optional
	PageSizeBytes *int64 `json:"pageSizeBytes,omitempty" tf:"page_size_bytes"`

	// +kubebuilder:validation:Optional
	WriterVersion *string `json:"writerVersion,omitempty" tf:"writer_version"`
}

type ProcessingConfigurationObservation struct {
}

type ProcessingConfigurationParameters struct {

	// +kubebuilder:validation:Optional
	Enabled *bool `json:"enabled,omitempty" tf:"enabled"`

	// +kubebuilder:validation:Optional
	Processors []ProcessorsParameters `json:"processors,omitempty" tf:"processors"`
}

type ProcessingConfigurationProcessorsObservation struct {
}

type ProcessingConfigurationProcessorsParameters struct {

	// +kubebuilder:validation:Optional
	Parameters []ProcessorsParametersParameters `json:"parameters,omitempty" tf:"parameters"`

	// +kubebuilder:validation:Required
	Type string `json:"type" tf:"type"`
}

type ProcessingConfigurationProcessorsParametersObservation struct {
}

type ProcessingConfigurationProcessorsParametersParameters struct {

	// +kubebuilder:validation:Required
	ParameterName string `json:"parameterName" tf:"parameter_name"`

	// +kubebuilder:validation:Required
	ParameterValue string `json:"parameterValue" tf:"parameter_value"`
}

type ProcessorsObservation struct {
}

type ProcessorsParameters struct {

	// +kubebuilder:validation:Optional
	Parameters []ParametersParameters `json:"parameters,omitempty" tf:"parameters"`

	// +kubebuilder:validation:Required
	Type string `json:"type" tf:"type"`
}

type ProcessorsParametersObservation struct {
}

type ProcessorsParametersParameters struct {

	// +kubebuilder:validation:Required
	ParameterName string `json:"parameterName" tf:"parameter_name"`

	// +kubebuilder:validation:Required
	ParameterValue string `json:"parameterValue" tf:"parameter_value"`
}

type RedshiftConfigurationCloudwatchLoggingOptionsObservation struct {
}

type RedshiftConfigurationCloudwatchLoggingOptionsParameters struct {

	// +kubebuilder:validation:Optional
	Enabled *bool `json:"enabled,omitempty" tf:"enabled"`

	// +kubebuilder:validation:Optional
	LogGroupName *string `json:"logGroupName,omitempty" tf:"log_group_name"`

	// +kubebuilder:validation:Optional
	LogStreamName *string `json:"logStreamName,omitempty" tf:"log_stream_name"`
}

type RedshiftConfigurationObservation struct {
}

type RedshiftConfigurationParameters struct {

	// +kubebuilder:validation:Optional
	CloudwatchLoggingOptions []RedshiftConfigurationCloudwatchLoggingOptionsParameters `json:"cloudwatchLoggingOptions,omitempty" tf:"cloudwatch_logging_options"`

	// +kubebuilder:validation:Required
	ClusterJdbcurl string `json:"clusterJdbcurl" tf:"cluster_jdbcurl"`

	// +kubebuilder:validation:Optional
	CopyOptions *string `json:"copyOptions,omitempty" tf:"copy_options"`

	// +kubebuilder:validation:Optional
	DataTableColumns *string `json:"dataTableColumns,omitempty" tf:"data_table_columns"`

	// +kubebuilder:validation:Required
	DataTableName string `json:"dataTableName" tf:"data_table_name"`

	// +kubebuilder:validation:Required
	Password string `json:"password" tf:"password"`

	// +kubebuilder:validation:Optional
	ProcessingConfiguration []RedshiftConfigurationProcessingConfigurationParameters `json:"processingConfiguration,omitempty" tf:"processing_configuration"`

	// +kubebuilder:validation:Optional
	RetryDuration *int64 `json:"retryDuration,omitempty" tf:"retry_duration"`

	// +kubebuilder:validation:Required
	RoleArn string `json:"roleArn" tf:"role_arn"`

	// +kubebuilder:validation:Optional
	S3BackupConfiguration []RedshiftConfigurationS3BackupConfigurationParameters `json:"s3BackupConfiguration,omitempty" tf:"s3_backup_configuration"`

	// +kubebuilder:validation:Optional
	S3BackupMode *string `json:"s3BackupMode,omitempty" tf:"s3_backup_mode"`

	// +kubebuilder:validation:Required
	Username string `json:"username" tf:"username"`
}

type RedshiftConfigurationProcessingConfigurationObservation struct {
}

type RedshiftConfigurationProcessingConfigurationParameters struct {

	// +kubebuilder:validation:Optional
	Enabled *bool `json:"enabled,omitempty" tf:"enabled"`

	// +kubebuilder:validation:Optional
	Processors []RedshiftConfigurationProcessingConfigurationProcessorsParameters `json:"processors,omitempty" tf:"processors"`
}

type RedshiftConfigurationProcessingConfigurationProcessorsObservation struct {
}

type RedshiftConfigurationProcessingConfigurationProcessorsParameters struct {

	// +kubebuilder:validation:Optional
	Parameters []RedshiftConfigurationProcessingConfigurationProcessorsParametersParameters `json:"parameters,omitempty" tf:"parameters"`

	// +kubebuilder:validation:Required
	Type string `json:"type" tf:"type"`
}

type RedshiftConfigurationProcessingConfigurationProcessorsParametersObservation struct {
}

type RedshiftConfigurationProcessingConfigurationProcessorsParametersParameters struct {

	// +kubebuilder:validation:Required
	ParameterName string `json:"parameterName" tf:"parameter_name"`

	// +kubebuilder:validation:Required
	ParameterValue string `json:"parameterValue" tf:"parameter_value"`
}

type RedshiftConfigurationS3BackupConfigurationCloudwatchLoggingOptionsObservation struct {
}

type RedshiftConfigurationS3BackupConfigurationCloudwatchLoggingOptionsParameters struct {

	// +kubebuilder:validation:Optional
	Enabled *bool `json:"enabled,omitempty" tf:"enabled"`

	// +kubebuilder:validation:Optional
	LogGroupName *string `json:"logGroupName,omitempty" tf:"log_group_name"`

	// +kubebuilder:validation:Optional
	LogStreamName *string `json:"logStreamName,omitempty" tf:"log_stream_name"`
}

type RedshiftConfigurationS3BackupConfigurationObservation struct {
}

type RedshiftConfigurationS3BackupConfigurationParameters struct {

	// +kubebuilder:validation:Required
	BucketArn string `json:"bucketArn" tf:"bucket_arn"`

	// +kubebuilder:validation:Optional
	BufferInterval *int64 `json:"bufferInterval,omitempty" tf:"buffer_interval"`

	// +kubebuilder:validation:Optional
	BufferSize *int64 `json:"bufferSize,omitempty" tf:"buffer_size"`

	// +kubebuilder:validation:Optional
	CloudwatchLoggingOptions []RedshiftConfigurationS3BackupConfigurationCloudwatchLoggingOptionsParameters `json:"cloudwatchLoggingOptions,omitempty" tf:"cloudwatch_logging_options"`

	// +kubebuilder:validation:Optional
	CompressionFormat *string `json:"compressionFormat,omitempty" tf:"compression_format"`

	// +kubebuilder:validation:Optional
	KmsKeyArn *string `json:"kmsKeyArn,omitempty" tf:"kms_key_arn"`

	// +kubebuilder:validation:Optional
	Prefix *string `json:"prefix,omitempty" tf:"prefix"`

	// +kubebuilder:validation:Required
	RoleArn string `json:"roleArn" tf:"role_arn"`
}

type RequestConfigurationObservation struct {
}

type RequestConfigurationParameters struct {

	// +kubebuilder:validation:Optional
	CommonAttributes []CommonAttributesParameters `json:"commonAttributes,omitempty" tf:"common_attributes"`

	// +kubebuilder:validation:Optional
	ContentEncoding *string `json:"contentEncoding,omitempty" tf:"content_encoding"`
}

type S3BackupConfigurationCloudwatchLoggingOptionsObservation struct {
}

type S3BackupConfigurationCloudwatchLoggingOptionsParameters struct {

	// +kubebuilder:validation:Optional
	Enabled *bool `json:"enabled,omitempty" tf:"enabled"`

	// +kubebuilder:validation:Optional
	LogGroupName *string `json:"logGroupName,omitempty" tf:"log_group_name"`

	// +kubebuilder:validation:Optional
	LogStreamName *string `json:"logStreamName,omitempty" tf:"log_stream_name"`
}

type S3BackupConfigurationObservation struct {
}

type S3BackupConfigurationParameters struct {

	// +kubebuilder:validation:Required
	BucketArn string `json:"bucketArn" tf:"bucket_arn"`

	// +kubebuilder:validation:Optional
	BufferInterval *int64 `json:"bufferInterval,omitempty" tf:"buffer_interval"`

	// +kubebuilder:validation:Optional
	BufferSize *int64 `json:"bufferSize,omitempty" tf:"buffer_size"`

	// +kubebuilder:validation:Optional
	CloudwatchLoggingOptions []S3BackupConfigurationCloudwatchLoggingOptionsParameters `json:"cloudwatchLoggingOptions,omitempty" tf:"cloudwatch_logging_options"`

	// +kubebuilder:validation:Optional
	CompressionFormat *string `json:"compressionFormat,omitempty" tf:"compression_format"`

	// +kubebuilder:validation:Optional
	KmsKeyArn *string `json:"kmsKeyArn,omitempty" tf:"kms_key_arn"`

	// +kubebuilder:validation:Optional
	Prefix *string `json:"prefix,omitempty" tf:"prefix"`

	// +kubebuilder:validation:Required
	RoleArn string `json:"roleArn" tf:"role_arn"`
}

type S3ConfigurationCloudwatchLoggingOptionsObservation struct {
}

type S3ConfigurationCloudwatchLoggingOptionsParameters struct {

	// +kubebuilder:validation:Optional
	Enabled *bool `json:"enabled,omitempty" tf:"enabled"`

	// +kubebuilder:validation:Optional
	LogGroupName *string `json:"logGroupName,omitempty" tf:"log_group_name"`

	// +kubebuilder:validation:Optional
	LogStreamName *string `json:"logStreamName,omitempty" tf:"log_stream_name"`
}

type S3ConfigurationObservation struct {
}

type S3ConfigurationParameters struct {

	// +kubebuilder:validation:Required
	BucketArn string `json:"bucketArn" tf:"bucket_arn"`

	// +kubebuilder:validation:Optional
	BufferInterval *int64 `json:"bufferInterval,omitempty" tf:"buffer_interval"`

	// +kubebuilder:validation:Optional
	BufferSize *int64 `json:"bufferSize,omitempty" tf:"buffer_size"`

	// +kubebuilder:validation:Optional
	CloudwatchLoggingOptions []S3ConfigurationCloudwatchLoggingOptionsParameters `json:"cloudwatchLoggingOptions,omitempty" tf:"cloudwatch_logging_options"`

	// +kubebuilder:validation:Optional
	CompressionFormat *string `json:"compressionFormat,omitempty" tf:"compression_format"`

	// +kubebuilder:validation:Optional
	KmsKeyArn *string `json:"kmsKeyArn,omitempty" tf:"kms_key_arn"`

	// +kubebuilder:validation:Optional
	Prefix *string `json:"prefix,omitempty" tf:"prefix"`

	// +kubebuilder:validation:Required
	RoleArn string `json:"roleArn" tf:"role_arn"`
}

type SchemaConfigurationObservation struct {
}

type SchemaConfigurationParameters struct {

	// +kubebuilder:validation:Optional
	CatalogID *string `json:"catalogId,omitempty" tf:"catalog_id"`

	// +kubebuilder:validation:Required
	DatabaseName string `json:"databaseName" tf:"database_name"`

	// +kubebuilder:validation:Optional
	Region *string `json:"region,omitempty" tf:"region"`

	// +kubebuilder:validation:Required
	RoleArn string `json:"roleArn" tf:"role_arn"`

	// +kubebuilder:validation:Required
	TableName string `json:"tableName" tf:"table_name"`

	// +kubebuilder:validation:Optional
	VersionID *string `json:"versionId,omitempty" tf:"version_id"`
}

type SerializerObservation struct {
}

type SerializerParameters struct {

	// +kubebuilder:validation:Optional
	OrcSerDe []OrcSerDeParameters `json:"orcSerDe,omitempty" tf:"orc_ser_de"`

	// +kubebuilder:validation:Optional
	ParquetSerDe []ParquetSerDeParameters `json:"parquetSerDe,omitempty" tf:"parquet_ser_de"`
}

type ServerSideEncryptionObservation struct {
}

type ServerSideEncryptionParameters struct {

	// +kubebuilder:validation:Optional
	Enabled *bool `json:"enabled,omitempty" tf:"enabled"`

	// +kubebuilder:validation:Optional
	KeyArn *string `json:"keyArn,omitempty" tf:"key_arn"`

	// +kubebuilder:validation:Optional
	KeyType *string `json:"keyType,omitempty" tf:"key_type"`
}

type SplunkConfigurationCloudwatchLoggingOptionsObservation struct {
}

type SplunkConfigurationCloudwatchLoggingOptionsParameters struct {

	// +kubebuilder:validation:Optional
	Enabled *bool `json:"enabled,omitempty" tf:"enabled"`

	// +kubebuilder:validation:Optional
	LogGroupName *string `json:"logGroupName,omitempty" tf:"log_group_name"`

	// +kubebuilder:validation:Optional
	LogStreamName *string `json:"logStreamName,omitempty" tf:"log_stream_name"`
}

type SplunkConfigurationObservation struct {
}

type SplunkConfigurationParameters struct {

	// +kubebuilder:validation:Optional
	CloudwatchLoggingOptions []SplunkConfigurationCloudwatchLoggingOptionsParameters `json:"cloudwatchLoggingOptions,omitempty" tf:"cloudwatch_logging_options"`

	// +kubebuilder:validation:Optional
	HecAcknowledgmentTimeout *int64 `json:"hecAcknowledgmentTimeout,omitempty" tf:"hec_acknowledgment_timeout"`

	// +kubebuilder:validation:Required
	HecEndpoint string `json:"hecEndpoint" tf:"hec_endpoint"`

	// +kubebuilder:validation:Optional
	HecEndpointType *string `json:"hecEndpointType,omitempty" tf:"hec_endpoint_type"`

	// +kubebuilder:validation:Required
	HecToken string `json:"hecToken" tf:"hec_token"`

	// +kubebuilder:validation:Optional
	ProcessingConfiguration []SplunkConfigurationProcessingConfigurationParameters `json:"processingConfiguration,omitempty" tf:"processing_configuration"`

	// +kubebuilder:validation:Optional
	RetryDuration *int64 `json:"retryDuration,omitempty" tf:"retry_duration"`

	// +kubebuilder:validation:Optional
	S3BackupMode *string `json:"s3BackupMode,omitempty" tf:"s3_backup_mode"`
}

type SplunkConfigurationProcessingConfigurationObservation struct {
}

type SplunkConfigurationProcessingConfigurationParameters struct {

	// +kubebuilder:validation:Optional
	Enabled *bool `json:"enabled,omitempty" tf:"enabled"`

	// +kubebuilder:validation:Optional
	Processors []SplunkConfigurationProcessingConfigurationProcessorsParameters `json:"processors,omitempty" tf:"processors"`
}

type SplunkConfigurationProcessingConfigurationProcessorsObservation struct {
}

type SplunkConfigurationProcessingConfigurationProcessorsParameters struct {

	// +kubebuilder:validation:Optional
	Parameters []SplunkConfigurationProcessingConfigurationProcessorsParametersParameters `json:"parameters,omitempty" tf:"parameters"`

	// +kubebuilder:validation:Required
	Type string `json:"type" tf:"type"`
}

type SplunkConfigurationProcessingConfigurationProcessorsParametersObservation struct {
}

type SplunkConfigurationProcessingConfigurationProcessorsParametersParameters struct {

	// +kubebuilder:validation:Required
	ParameterName string `json:"parameterName" tf:"parameter_name"`

	// +kubebuilder:validation:Required
	ParameterValue string `json:"parameterValue" tf:"parameter_value"`
}

type VpcConfigObservation struct {
	VpcID string `json:"vpcId" tf:"vpc_id"`
}

type VpcConfigParameters struct {

	// +kubebuilder:validation:Required
	RoleArn string `json:"roleArn" tf:"role_arn"`

	// +kubebuilder:validation:Required
	SecurityGroupIds []string `json:"securityGroupIds" tf:"security_group_ids"`

	// +kubebuilder:validation:Required
	SubnetIds []string `json:"subnetIds" tf:"subnet_ids"`
}

// KinesisFirehoseDeliveryStreamSpec defines the desired state of KinesisFirehoseDeliveryStream
type KinesisFirehoseDeliveryStreamSpec struct {
	xpv1.ResourceSpec `json:",inline"`
	ForProvider       KinesisFirehoseDeliveryStreamParameters `json:"forProvider"`
}

// KinesisFirehoseDeliveryStreamStatus defines the observed state of KinesisFirehoseDeliveryStream.
type KinesisFirehoseDeliveryStreamStatus struct {
	xpv1.ResourceStatus `json:",inline"`
	AtProvider          KinesisFirehoseDeliveryStreamObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// KinesisFirehoseDeliveryStream is the Schema for the KinesisFirehoseDeliveryStreams API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,tfaws}
type KinesisFirehoseDeliveryStream struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              KinesisFirehoseDeliveryStreamSpec   `json:"spec"`
	Status            KinesisFirehoseDeliveryStreamStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// KinesisFirehoseDeliveryStreamList contains a list of KinesisFirehoseDeliveryStreams
type KinesisFirehoseDeliveryStreamList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []KinesisFirehoseDeliveryStream `json:"items"`
}

// Repository type metadata.
var (
	KinesisFirehoseDeliveryStreamKind             = "KinesisFirehoseDeliveryStream"
	KinesisFirehoseDeliveryStreamGroupKind        = schema.GroupKind{Group: Group, Kind: KinesisFirehoseDeliveryStreamKind}.String()
	KinesisFirehoseDeliveryStreamKindAPIVersion   = KinesisFirehoseDeliveryStreamKind + "." + GroupVersion.String()
	KinesisFirehoseDeliveryStreamGroupVersionKind = GroupVersion.WithKind(KinesisFirehoseDeliveryStreamKind)
)

func init() {
	SchemeBuilder.Register(&KinesisFirehoseDeliveryStream{}, &KinesisFirehoseDeliveryStreamList{})
}
