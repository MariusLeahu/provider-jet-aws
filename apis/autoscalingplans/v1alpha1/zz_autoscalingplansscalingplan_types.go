/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	xpv1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"
)

type ApplicationSourceObservation struct {
}

type ApplicationSourceParameters struct {

	// +kubebuilder:validation:Optional
	CloudformationStackArn *string `json:"cloudformationStackArn,omitempty" tf:"cloudformation_stack_arn"`

	// +kubebuilder:validation:Optional
	TagFilter []TagFilterParameters `json:"tagFilter,omitempty" tf:"tag_filter"`
}

type AutoscalingplansScalingPlanObservation struct {
	ScalingPlanVersion int64 `json:"scalingPlanVersion" tf:"scaling_plan_version"`
}

type AutoscalingplansScalingPlanParameters struct {

	// +kubebuilder:validation:Required
	ApplicationSource []ApplicationSourceParameters `json:"applicationSource" tf:"application_source"`

	// +kubebuilder:validation:Required
	Name string `json:"name" tf:"name"`

	// Region is the region you'd like your resource to be created in.
	// +terrajet:crd:field:TFTag=-
	// +kubebuilder:validation:Required
	Region string `json:"region" tf:"-"`

	// +kubebuilder:validation:Required
	ScalingInstruction []ScalingInstructionParameters `json:"scalingInstruction" tf:"scaling_instruction"`
}

type CustomizedLoadMetricSpecificationObservation struct {
}

type CustomizedLoadMetricSpecificationParameters struct {

	// +kubebuilder:validation:Optional
	Dimensions map[string]string `json:"dimensions,omitempty" tf:"dimensions"`

	// +kubebuilder:validation:Required
	MetricName string `json:"metricName" tf:"metric_name"`

	// +kubebuilder:validation:Required
	Namespace string `json:"namespace" tf:"namespace"`

	// +kubebuilder:validation:Required
	Statistic string `json:"statistic" tf:"statistic"`

	// +kubebuilder:validation:Optional
	Unit *string `json:"unit,omitempty" tf:"unit"`
}

type CustomizedScalingMetricSpecificationObservation struct {
}

type CustomizedScalingMetricSpecificationParameters struct {

	// +kubebuilder:validation:Optional
	Dimensions map[string]string `json:"dimensions,omitempty" tf:"dimensions"`

	// +kubebuilder:validation:Required
	MetricName string `json:"metricName" tf:"metric_name"`

	// +kubebuilder:validation:Required
	Namespace string `json:"namespace" tf:"namespace"`

	// +kubebuilder:validation:Required
	Statistic string `json:"statistic" tf:"statistic"`

	// +kubebuilder:validation:Optional
	Unit *string `json:"unit,omitempty" tf:"unit"`
}

type PredefinedLoadMetricSpecificationObservation struct {
}

type PredefinedLoadMetricSpecificationParameters struct {

	// +kubebuilder:validation:Required
	PredefinedLoadMetricType string `json:"predefinedLoadMetricType" tf:"predefined_load_metric_type"`

	// +kubebuilder:validation:Optional
	ResourceLabel *string `json:"resourceLabel,omitempty" tf:"resource_label"`
}

type PredefinedScalingMetricSpecificationObservation struct {
}

type PredefinedScalingMetricSpecificationParameters struct {

	// +kubebuilder:validation:Required
	PredefinedScalingMetricType string `json:"predefinedScalingMetricType" tf:"predefined_scaling_metric_type"`

	// +kubebuilder:validation:Optional
	ResourceLabel *string `json:"resourceLabel,omitempty" tf:"resource_label"`
}

type ScalingInstructionObservation struct {
}

type ScalingInstructionParameters struct {

	// +kubebuilder:validation:Optional
	CustomizedLoadMetricSpecification []CustomizedLoadMetricSpecificationParameters `json:"customizedLoadMetricSpecification,omitempty" tf:"customized_load_metric_specification"`

	// +kubebuilder:validation:Optional
	DisableDynamicScaling *bool `json:"disableDynamicScaling,omitempty" tf:"disable_dynamic_scaling"`

	// +kubebuilder:validation:Required
	MaxCapacity int64 `json:"maxCapacity" tf:"max_capacity"`

	// +kubebuilder:validation:Required
	MinCapacity int64 `json:"minCapacity" tf:"min_capacity"`

	// +kubebuilder:validation:Optional
	PredefinedLoadMetricSpecification []PredefinedLoadMetricSpecificationParameters `json:"predefinedLoadMetricSpecification,omitempty" tf:"predefined_load_metric_specification"`

	// +kubebuilder:validation:Optional
	PredictiveScalingMaxCapacityBehavior *string `json:"predictiveScalingMaxCapacityBehavior,omitempty" tf:"predictive_scaling_max_capacity_behavior"`

	// +kubebuilder:validation:Optional
	PredictiveScalingMaxCapacityBuffer *int64 `json:"predictiveScalingMaxCapacityBuffer,omitempty" tf:"predictive_scaling_max_capacity_buffer"`

	// +kubebuilder:validation:Optional
	PredictiveScalingMode *string `json:"predictiveScalingMode,omitempty" tf:"predictive_scaling_mode"`

	// +kubebuilder:validation:Required
	ResourceID string `json:"resourceId" tf:"resource_id"`

	// +kubebuilder:validation:Required
	ScalableDimension string `json:"scalableDimension" tf:"scalable_dimension"`

	// +kubebuilder:validation:Optional
	ScalingPolicyUpdateBehavior *string `json:"scalingPolicyUpdateBehavior,omitempty" tf:"scaling_policy_update_behavior"`

	// +kubebuilder:validation:Optional
	ScheduledActionBufferTime *int64 `json:"scheduledActionBufferTime,omitempty" tf:"scheduled_action_buffer_time"`

	// +kubebuilder:validation:Required
	ServiceNamespace string `json:"serviceNamespace" tf:"service_namespace"`

	// +kubebuilder:validation:Required
	TargetTrackingConfiguration []TargetTrackingConfigurationParameters `json:"targetTrackingConfiguration" tf:"target_tracking_configuration"`
}

type TagFilterObservation struct {
}

type TagFilterParameters struct {

	// +kubebuilder:validation:Required
	Key string `json:"key" tf:"key"`

	// +kubebuilder:validation:Optional
	Values []string `json:"values,omitempty" tf:"values"`
}

type TargetTrackingConfigurationObservation struct {
}

type TargetTrackingConfigurationParameters struct {

	// +kubebuilder:validation:Optional
	CustomizedScalingMetricSpecification []CustomizedScalingMetricSpecificationParameters `json:"customizedScalingMetricSpecification,omitempty" tf:"customized_scaling_metric_specification"`

	// +kubebuilder:validation:Optional
	DisableScaleIn *bool `json:"disableScaleIn,omitempty" tf:"disable_scale_in"`

	// +kubebuilder:validation:Optional
	EstimatedInstanceWarmup *int64 `json:"estimatedInstanceWarmup,omitempty" tf:"estimated_instance_warmup"`

	// +kubebuilder:validation:Optional
	PredefinedScalingMetricSpecification []PredefinedScalingMetricSpecificationParameters `json:"predefinedScalingMetricSpecification,omitempty" tf:"predefined_scaling_metric_specification"`

	// +kubebuilder:validation:Optional
	ScaleInCooldown *int64 `json:"scaleInCooldown,omitempty" tf:"scale_in_cooldown"`

	// +kubebuilder:validation:Optional
	ScaleOutCooldown *int64 `json:"scaleOutCooldown,omitempty" tf:"scale_out_cooldown"`

	// +kubebuilder:validation:Required
	TargetValue float64 `json:"targetValue" tf:"target_value"`
}

// AutoscalingplansScalingPlanSpec defines the desired state of AutoscalingplansScalingPlan
type AutoscalingplansScalingPlanSpec struct {
	xpv1.ResourceSpec `json:",inline"`
	ForProvider       AutoscalingplansScalingPlanParameters `json:"forProvider"`
}

// AutoscalingplansScalingPlanStatus defines the observed state of AutoscalingplansScalingPlan.
type AutoscalingplansScalingPlanStatus struct {
	xpv1.ResourceStatus `json:",inline"`
	AtProvider          AutoscalingplansScalingPlanObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// AutoscalingplansScalingPlan is the Schema for the AutoscalingplansScalingPlans API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,tfaws}
type AutoscalingplansScalingPlan struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              AutoscalingplansScalingPlanSpec   `json:"spec"`
	Status            AutoscalingplansScalingPlanStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// AutoscalingplansScalingPlanList contains a list of AutoscalingplansScalingPlans
type AutoscalingplansScalingPlanList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []AutoscalingplansScalingPlan `json:"items"`
}

// Repository type metadata.
var (
	AutoscalingplansScalingPlanKind             = "AutoscalingplansScalingPlan"
	AutoscalingplansScalingPlanGroupKind        = schema.GroupKind{Group: Group, Kind: AutoscalingplansScalingPlanKind}.String()
	AutoscalingplansScalingPlanKindAPIVersion   = AutoscalingplansScalingPlanKind + "." + GroupVersion.String()
	AutoscalingplansScalingPlanGroupVersionKind = GroupVersion.WithKind(AutoscalingplansScalingPlanKind)
)

func init() {
	SchemeBuilder.Register(&AutoscalingplansScalingPlan{}, &AutoscalingplansScalingPlanList{})
}
