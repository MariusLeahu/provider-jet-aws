/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	xpv1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"
)

type CommandObservation struct {
}

type CommandParameters struct {

	// +kubebuilder:validation:Optional
	Name *string `json:"name,omitempty" tf:"name"`

	// +kubebuilder:validation:Optional
	PythonVersion *string `json:"pythonVersion,omitempty" tf:"python_version"`

	// +kubebuilder:validation:Required
	ScriptLocation string `json:"scriptLocation" tf:"script_location"`
}

type ExecutionPropertyObservation struct {
}

type ExecutionPropertyParameters struct {

	// +kubebuilder:validation:Optional
	MaxConcurrentRuns *int64 `json:"maxConcurrentRuns,omitempty" tf:"max_concurrent_runs"`
}

type GlueJobObservation struct {
	Arn string `json:"arn" tf:"arn"`
}

type GlueJobParameters struct {

	// +kubebuilder:validation:Required
	Command []CommandParameters `json:"command" tf:"command"`

	// +kubebuilder:validation:Optional
	Connections []string `json:"connections,omitempty" tf:"connections"`

	// +kubebuilder:validation:Optional
	DefaultArguments map[string]string `json:"defaultArguments,omitempty" tf:"default_arguments"`

	// +kubebuilder:validation:Optional
	Description *string `json:"description,omitempty" tf:"description"`

	// +kubebuilder:validation:Optional
	ExecutionProperty []ExecutionPropertyParameters `json:"executionProperty,omitempty" tf:"execution_property"`

	// +kubebuilder:validation:Optional
	GlueVersion *string `json:"glueVersion,omitempty" tf:"glue_version"`

	// +kubebuilder:validation:Optional
	MaxCapacity *float64 `json:"maxCapacity,omitempty" tf:"max_capacity"`

	// +kubebuilder:validation:Optional
	MaxRetries *int64 `json:"maxRetries,omitempty" tf:"max_retries"`

	// +kubebuilder:validation:Required
	Name string `json:"name" tf:"name"`

	// +kubebuilder:validation:Optional
	NonOverridableArguments map[string]string `json:"nonOverridableArguments,omitempty" tf:"non_overridable_arguments"`

	// +kubebuilder:validation:Optional
	NotificationProperty []NotificationPropertyParameters `json:"notificationProperty,omitempty" tf:"notification_property"`

	// +kubebuilder:validation:Optional
	NumberOfWorkers *int64 `json:"numberOfWorkers,omitempty" tf:"number_of_workers"`

	// Region is the region you'd like your resource to be created in.
	// +terrajet:crd:field:TFTag=-
	// +kubebuilder:validation:Required
	Region string `json:"region" tf:"-"`

	// +kubebuilder:validation:Required
	RoleArn string `json:"roleArn" tf:"role_arn"`

	// +kubebuilder:validation:Optional
	SecurityConfiguration *string `json:"securityConfiguration,omitempty" tf:"security_configuration"`

	// +kubebuilder:validation:Optional
	Tags map[string]string `json:"tags,omitempty" tf:"tags"`

	// +kubebuilder:validation:Optional
	TagsAll map[string]string `json:"tagsAll,omitempty" tf:"tags_all"`

	// +kubebuilder:validation:Optional
	Timeout *int64 `json:"timeout,omitempty" tf:"timeout"`

	// +kubebuilder:validation:Optional
	WorkerType *string `json:"workerType,omitempty" tf:"worker_type"`
}

type NotificationPropertyObservation struct {
}

type NotificationPropertyParameters struct {

	// +kubebuilder:validation:Optional
	NotifyDelayAfter *int64 `json:"notifyDelayAfter,omitempty" tf:"notify_delay_after"`
}

// GlueJobSpec defines the desired state of GlueJob
type GlueJobSpec struct {
	xpv1.ResourceSpec `json:",inline"`
	ForProvider       GlueJobParameters `json:"forProvider"`
}

// GlueJobStatus defines the observed state of GlueJob.
type GlueJobStatus struct {
	xpv1.ResourceStatus `json:",inline"`
	AtProvider          GlueJobObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// GlueJob is the Schema for the GlueJobs API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,tfaws}
type GlueJob struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              GlueJobSpec   `json:"spec"`
	Status            GlueJobStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// GlueJobList contains a list of GlueJobs
type GlueJobList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []GlueJob `json:"items"`
}

// Repository type metadata.
var (
	GlueJobKind             = "GlueJob"
	GlueJobGroupKind        = schema.GroupKind{Group: Group, Kind: GlueJobKind}.String()
	GlueJobKindAPIVersion   = GlueJobKind + "." + GroupVersion.String()
	GlueJobGroupVersionKind = GroupVersion.WithKind(GlueJobKind)
)

func init() {
	SchemeBuilder.Register(&GlueJob{}, &GlueJobList{})
}
