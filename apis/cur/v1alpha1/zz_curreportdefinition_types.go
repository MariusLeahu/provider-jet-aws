/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	xpv1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"
)

type CurReportDefinitionObservation struct {
	Arn string `json:"arn" tf:"arn"`
}

type CurReportDefinitionParameters struct {

	// +kubebuilder:validation:Optional
	AdditionalArtifacts []string `json:"additionalArtifacts,omitempty" tf:"additional_artifacts"`

	// +kubebuilder:validation:Required
	AdditionalSchemaElements []string `json:"additionalSchemaElements" tf:"additional_schema_elements"`

	// +kubebuilder:validation:Required
	Compression string `json:"compression" tf:"compression"`

	// +kubebuilder:validation:Required
	Format string `json:"format" tf:"format"`

	// +kubebuilder:validation:Optional
	RefreshClosedReports *bool `json:"refreshClosedReports,omitempty" tf:"refresh_closed_reports"`

	// Region is the region you'd like your resource to be created in.
	// +terrajet:crd:field:TFTag=-
	// +kubebuilder:validation:Required
	Region string `json:"region" tf:"-"`

	// +kubebuilder:validation:Required
	ReportName string `json:"reportName" tf:"report_name"`

	// +kubebuilder:validation:Optional
	ReportVersioning *string `json:"reportVersioning,omitempty" tf:"report_versioning"`

	// +kubebuilder:validation:Required
	S3Bucket string `json:"s3Bucket" tf:"s3_bucket"`

	// +kubebuilder:validation:Optional
	S3Prefix *string `json:"s3Prefix,omitempty" tf:"s3_prefix"`

	// +kubebuilder:validation:Required
	S3Region string `json:"s3Region" tf:"s3_region"`

	// +kubebuilder:validation:Required
	TimeUnit string `json:"timeUnit" tf:"time_unit"`
}

// CurReportDefinitionSpec defines the desired state of CurReportDefinition
type CurReportDefinitionSpec struct {
	xpv1.ResourceSpec `json:",inline"`
	ForProvider       CurReportDefinitionParameters `json:"forProvider"`
}

// CurReportDefinitionStatus defines the observed state of CurReportDefinition.
type CurReportDefinitionStatus struct {
	xpv1.ResourceStatus `json:",inline"`
	AtProvider          CurReportDefinitionObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// CurReportDefinition is the Schema for the CurReportDefinitions API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,tfaws}
type CurReportDefinition struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              CurReportDefinitionSpec   `json:"spec"`
	Status            CurReportDefinitionStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// CurReportDefinitionList contains a list of CurReportDefinitions
type CurReportDefinitionList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []CurReportDefinition `json:"items"`
}

// Repository type metadata.
var (
	CurReportDefinitionKind             = "CurReportDefinition"
	CurReportDefinitionGroupKind        = schema.GroupKind{Group: Group, Kind: CurReportDefinitionKind}.String()
	CurReportDefinitionKindAPIVersion   = CurReportDefinitionKind + "." + GroupVersion.String()
	CurReportDefinitionGroupVersionKind = GroupVersion.WithKind(CurReportDefinitionKind)
)

func init() {
	SchemeBuilder.Register(&CurReportDefinition{}, &CurReportDefinitionList{})
}
