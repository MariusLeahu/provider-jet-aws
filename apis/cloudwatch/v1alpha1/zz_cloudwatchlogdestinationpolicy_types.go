/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	xpv1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"
)

type CloudwatchLogDestinationPolicyObservation struct {
}

type CloudwatchLogDestinationPolicyParameters struct {

	// +kubebuilder:validation:Required
	AccessPolicy string `json:"accessPolicy" tf:"access_policy"`

	// +kubebuilder:validation:Required
	DestinationName string `json:"destinationName" tf:"destination_name"`

	// Region is the region you'd like your resource to be created in.
	// +terrajet:crd:field:TFTag=-
	// +kubebuilder:validation:Required
	Region string `json:"region" tf:"-"`
}

// CloudwatchLogDestinationPolicySpec defines the desired state of CloudwatchLogDestinationPolicy
type CloudwatchLogDestinationPolicySpec struct {
	xpv1.ResourceSpec `json:",inline"`
	ForProvider       CloudwatchLogDestinationPolicyParameters `json:"forProvider"`
}

// CloudwatchLogDestinationPolicyStatus defines the observed state of CloudwatchLogDestinationPolicy.
type CloudwatchLogDestinationPolicyStatus struct {
	xpv1.ResourceStatus `json:",inline"`
	AtProvider          CloudwatchLogDestinationPolicyObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// CloudwatchLogDestinationPolicy is the Schema for the CloudwatchLogDestinationPolicys API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,tfaws}
type CloudwatchLogDestinationPolicy struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              CloudwatchLogDestinationPolicySpec   `json:"spec"`
	Status            CloudwatchLogDestinationPolicyStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// CloudwatchLogDestinationPolicyList contains a list of CloudwatchLogDestinationPolicys
type CloudwatchLogDestinationPolicyList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []CloudwatchLogDestinationPolicy `json:"items"`
}

// Repository type metadata.
var (
	CloudwatchLogDestinationPolicyKind             = "CloudwatchLogDestinationPolicy"
	CloudwatchLogDestinationPolicyGroupKind        = schema.GroupKind{Group: Group, Kind: CloudwatchLogDestinationPolicyKind}.String()
	CloudwatchLogDestinationPolicyKindAPIVersion   = CloudwatchLogDestinationPolicyKind + "." + GroupVersion.String()
	CloudwatchLogDestinationPolicyGroupVersionKind = GroupVersion.WithKind(CloudwatchLogDestinationPolicyKind)
)

func init() {
	SchemeBuilder.Register(&CloudwatchLogDestinationPolicy{}, &CloudwatchLogDestinationPolicyList{})
}
