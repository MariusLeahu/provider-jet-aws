/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/
// Code generated by angryjet. DO NOT EDIT.

package v1alpha1

import xpv1 "github.com/crossplane/crossplane-runtime/apis/common/v1"

// GetCondition of this CloudwatchCompositeAlarm.
func (mg *CloudwatchCompositeAlarm) GetCondition(ct xpv1.ConditionType) xpv1.Condition {
	return mg.Status.GetCondition(ct)
}

// GetDeletionPolicy of this CloudwatchCompositeAlarm.
func (mg *CloudwatchCompositeAlarm) GetDeletionPolicy() xpv1.DeletionPolicy {
	return mg.Spec.DeletionPolicy
}

// GetProviderConfigReference of this CloudwatchCompositeAlarm.
func (mg *CloudwatchCompositeAlarm) GetProviderConfigReference() *xpv1.Reference {
	return mg.Spec.ProviderConfigReference
}

/*
GetProviderReference of this CloudwatchCompositeAlarm.
Deprecated: Use GetProviderConfigReference.
*/
func (mg *CloudwatchCompositeAlarm) GetProviderReference() *xpv1.Reference {
	return mg.Spec.ProviderReference
}

// GetWriteConnectionSecretToReference of this CloudwatchCompositeAlarm.
func (mg *CloudwatchCompositeAlarm) GetWriteConnectionSecretToReference() *xpv1.SecretReference {
	return mg.Spec.WriteConnectionSecretToReference
}

// SetConditions of this CloudwatchCompositeAlarm.
func (mg *CloudwatchCompositeAlarm) SetConditions(c ...xpv1.Condition) {
	mg.Status.SetConditions(c...)
}

// SetDeletionPolicy of this CloudwatchCompositeAlarm.
func (mg *CloudwatchCompositeAlarm) SetDeletionPolicy(r xpv1.DeletionPolicy) {
	mg.Spec.DeletionPolicy = r
}

// SetProviderConfigReference of this CloudwatchCompositeAlarm.
func (mg *CloudwatchCompositeAlarm) SetProviderConfigReference(r *xpv1.Reference) {
	mg.Spec.ProviderConfigReference = r
}

/*
SetProviderReference of this CloudwatchCompositeAlarm.
Deprecated: Use SetProviderConfigReference.
*/
func (mg *CloudwatchCompositeAlarm) SetProviderReference(r *xpv1.Reference) {
	mg.Spec.ProviderReference = r
}

// SetWriteConnectionSecretToReference of this CloudwatchCompositeAlarm.
func (mg *CloudwatchCompositeAlarm) SetWriteConnectionSecretToReference(r *xpv1.SecretReference) {
	mg.Spec.WriteConnectionSecretToReference = r
}

// GetCondition of this CloudwatchDashboard.
func (mg *CloudwatchDashboard) GetCondition(ct xpv1.ConditionType) xpv1.Condition {
	return mg.Status.GetCondition(ct)
}

// GetDeletionPolicy of this CloudwatchDashboard.
func (mg *CloudwatchDashboard) GetDeletionPolicy() xpv1.DeletionPolicy {
	return mg.Spec.DeletionPolicy
}

// GetProviderConfigReference of this CloudwatchDashboard.
func (mg *CloudwatchDashboard) GetProviderConfigReference() *xpv1.Reference {
	return mg.Spec.ProviderConfigReference
}

/*
GetProviderReference of this CloudwatchDashboard.
Deprecated: Use GetProviderConfigReference.
*/
func (mg *CloudwatchDashboard) GetProviderReference() *xpv1.Reference {
	return mg.Spec.ProviderReference
}

// GetWriteConnectionSecretToReference of this CloudwatchDashboard.
func (mg *CloudwatchDashboard) GetWriteConnectionSecretToReference() *xpv1.SecretReference {
	return mg.Spec.WriteConnectionSecretToReference
}

// SetConditions of this CloudwatchDashboard.
func (mg *CloudwatchDashboard) SetConditions(c ...xpv1.Condition) {
	mg.Status.SetConditions(c...)
}

// SetDeletionPolicy of this CloudwatchDashboard.
func (mg *CloudwatchDashboard) SetDeletionPolicy(r xpv1.DeletionPolicy) {
	mg.Spec.DeletionPolicy = r
}

// SetProviderConfigReference of this CloudwatchDashboard.
func (mg *CloudwatchDashboard) SetProviderConfigReference(r *xpv1.Reference) {
	mg.Spec.ProviderConfigReference = r
}

/*
SetProviderReference of this CloudwatchDashboard.
Deprecated: Use SetProviderConfigReference.
*/
func (mg *CloudwatchDashboard) SetProviderReference(r *xpv1.Reference) {
	mg.Spec.ProviderReference = r
}

// SetWriteConnectionSecretToReference of this CloudwatchDashboard.
func (mg *CloudwatchDashboard) SetWriteConnectionSecretToReference(r *xpv1.SecretReference) {
	mg.Spec.WriteConnectionSecretToReference = r
}

// GetCondition of this CloudwatchEventApiDestination.
func (mg *CloudwatchEventApiDestination) GetCondition(ct xpv1.ConditionType) xpv1.Condition {
	return mg.Status.GetCondition(ct)
}

// GetDeletionPolicy of this CloudwatchEventApiDestination.
func (mg *CloudwatchEventApiDestination) GetDeletionPolicy() xpv1.DeletionPolicy {
	return mg.Spec.DeletionPolicy
}

// GetProviderConfigReference of this CloudwatchEventApiDestination.
func (mg *CloudwatchEventApiDestination) GetProviderConfigReference() *xpv1.Reference {
	return mg.Spec.ProviderConfigReference
}

/*
GetProviderReference of this CloudwatchEventApiDestination.
Deprecated: Use GetProviderConfigReference.
*/
func (mg *CloudwatchEventApiDestination) GetProviderReference() *xpv1.Reference {
	return mg.Spec.ProviderReference
}

// GetWriteConnectionSecretToReference of this CloudwatchEventApiDestination.
func (mg *CloudwatchEventApiDestination) GetWriteConnectionSecretToReference() *xpv1.SecretReference {
	return mg.Spec.WriteConnectionSecretToReference
}

// SetConditions of this CloudwatchEventApiDestination.
func (mg *CloudwatchEventApiDestination) SetConditions(c ...xpv1.Condition) {
	mg.Status.SetConditions(c...)
}

// SetDeletionPolicy of this CloudwatchEventApiDestination.
func (mg *CloudwatchEventApiDestination) SetDeletionPolicy(r xpv1.DeletionPolicy) {
	mg.Spec.DeletionPolicy = r
}

// SetProviderConfigReference of this CloudwatchEventApiDestination.
func (mg *CloudwatchEventApiDestination) SetProviderConfigReference(r *xpv1.Reference) {
	mg.Spec.ProviderConfigReference = r
}

/*
SetProviderReference of this CloudwatchEventApiDestination.
Deprecated: Use SetProviderConfigReference.
*/
func (mg *CloudwatchEventApiDestination) SetProviderReference(r *xpv1.Reference) {
	mg.Spec.ProviderReference = r
}

// SetWriteConnectionSecretToReference of this CloudwatchEventApiDestination.
func (mg *CloudwatchEventApiDestination) SetWriteConnectionSecretToReference(r *xpv1.SecretReference) {
	mg.Spec.WriteConnectionSecretToReference = r
}

// GetCondition of this CloudwatchEventArchive.
func (mg *CloudwatchEventArchive) GetCondition(ct xpv1.ConditionType) xpv1.Condition {
	return mg.Status.GetCondition(ct)
}

// GetDeletionPolicy of this CloudwatchEventArchive.
func (mg *CloudwatchEventArchive) GetDeletionPolicy() xpv1.DeletionPolicy {
	return mg.Spec.DeletionPolicy
}

// GetProviderConfigReference of this CloudwatchEventArchive.
func (mg *CloudwatchEventArchive) GetProviderConfigReference() *xpv1.Reference {
	return mg.Spec.ProviderConfigReference
}

/*
GetProviderReference of this CloudwatchEventArchive.
Deprecated: Use GetProviderConfigReference.
*/
func (mg *CloudwatchEventArchive) GetProviderReference() *xpv1.Reference {
	return mg.Spec.ProviderReference
}

// GetWriteConnectionSecretToReference of this CloudwatchEventArchive.
func (mg *CloudwatchEventArchive) GetWriteConnectionSecretToReference() *xpv1.SecretReference {
	return mg.Spec.WriteConnectionSecretToReference
}

// SetConditions of this CloudwatchEventArchive.
func (mg *CloudwatchEventArchive) SetConditions(c ...xpv1.Condition) {
	mg.Status.SetConditions(c...)
}

// SetDeletionPolicy of this CloudwatchEventArchive.
func (mg *CloudwatchEventArchive) SetDeletionPolicy(r xpv1.DeletionPolicy) {
	mg.Spec.DeletionPolicy = r
}

// SetProviderConfigReference of this CloudwatchEventArchive.
func (mg *CloudwatchEventArchive) SetProviderConfigReference(r *xpv1.Reference) {
	mg.Spec.ProviderConfigReference = r
}

/*
SetProviderReference of this CloudwatchEventArchive.
Deprecated: Use SetProviderConfigReference.
*/
func (mg *CloudwatchEventArchive) SetProviderReference(r *xpv1.Reference) {
	mg.Spec.ProviderReference = r
}

// SetWriteConnectionSecretToReference of this CloudwatchEventArchive.
func (mg *CloudwatchEventArchive) SetWriteConnectionSecretToReference(r *xpv1.SecretReference) {
	mg.Spec.WriteConnectionSecretToReference = r
}

// GetCondition of this CloudwatchEventBus.
func (mg *CloudwatchEventBus) GetCondition(ct xpv1.ConditionType) xpv1.Condition {
	return mg.Status.GetCondition(ct)
}

// GetDeletionPolicy of this CloudwatchEventBus.
func (mg *CloudwatchEventBus) GetDeletionPolicy() xpv1.DeletionPolicy {
	return mg.Spec.DeletionPolicy
}

// GetProviderConfigReference of this CloudwatchEventBus.
func (mg *CloudwatchEventBus) GetProviderConfigReference() *xpv1.Reference {
	return mg.Spec.ProviderConfigReference
}

/*
GetProviderReference of this CloudwatchEventBus.
Deprecated: Use GetProviderConfigReference.
*/
func (mg *CloudwatchEventBus) GetProviderReference() *xpv1.Reference {
	return mg.Spec.ProviderReference
}

// GetWriteConnectionSecretToReference of this CloudwatchEventBus.
func (mg *CloudwatchEventBus) GetWriteConnectionSecretToReference() *xpv1.SecretReference {
	return mg.Spec.WriteConnectionSecretToReference
}

// SetConditions of this CloudwatchEventBus.
func (mg *CloudwatchEventBus) SetConditions(c ...xpv1.Condition) {
	mg.Status.SetConditions(c...)
}

// SetDeletionPolicy of this CloudwatchEventBus.
func (mg *CloudwatchEventBus) SetDeletionPolicy(r xpv1.DeletionPolicy) {
	mg.Spec.DeletionPolicy = r
}

// SetProviderConfigReference of this CloudwatchEventBus.
func (mg *CloudwatchEventBus) SetProviderConfigReference(r *xpv1.Reference) {
	mg.Spec.ProviderConfigReference = r
}

/*
SetProviderReference of this CloudwatchEventBus.
Deprecated: Use SetProviderConfigReference.
*/
func (mg *CloudwatchEventBus) SetProviderReference(r *xpv1.Reference) {
	mg.Spec.ProviderReference = r
}

// SetWriteConnectionSecretToReference of this CloudwatchEventBus.
func (mg *CloudwatchEventBus) SetWriteConnectionSecretToReference(r *xpv1.SecretReference) {
	mg.Spec.WriteConnectionSecretToReference = r
}

// GetCondition of this CloudwatchEventBusPolicy.
func (mg *CloudwatchEventBusPolicy) GetCondition(ct xpv1.ConditionType) xpv1.Condition {
	return mg.Status.GetCondition(ct)
}

// GetDeletionPolicy of this CloudwatchEventBusPolicy.
func (mg *CloudwatchEventBusPolicy) GetDeletionPolicy() xpv1.DeletionPolicy {
	return mg.Spec.DeletionPolicy
}

// GetProviderConfigReference of this CloudwatchEventBusPolicy.
func (mg *CloudwatchEventBusPolicy) GetProviderConfigReference() *xpv1.Reference {
	return mg.Spec.ProviderConfigReference
}

/*
GetProviderReference of this CloudwatchEventBusPolicy.
Deprecated: Use GetProviderConfigReference.
*/
func (mg *CloudwatchEventBusPolicy) GetProviderReference() *xpv1.Reference {
	return mg.Spec.ProviderReference
}

// GetWriteConnectionSecretToReference of this CloudwatchEventBusPolicy.
func (mg *CloudwatchEventBusPolicy) GetWriteConnectionSecretToReference() *xpv1.SecretReference {
	return mg.Spec.WriteConnectionSecretToReference
}

// SetConditions of this CloudwatchEventBusPolicy.
func (mg *CloudwatchEventBusPolicy) SetConditions(c ...xpv1.Condition) {
	mg.Status.SetConditions(c...)
}

// SetDeletionPolicy of this CloudwatchEventBusPolicy.
func (mg *CloudwatchEventBusPolicy) SetDeletionPolicy(r xpv1.DeletionPolicy) {
	mg.Spec.DeletionPolicy = r
}

// SetProviderConfigReference of this CloudwatchEventBusPolicy.
func (mg *CloudwatchEventBusPolicy) SetProviderConfigReference(r *xpv1.Reference) {
	mg.Spec.ProviderConfigReference = r
}

/*
SetProviderReference of this CloudwatchEventBusPolicy.
Deprecated: Use SetProviderConfigReference.
*/
func (mg *CloudwatchEventBusPolicy) SetProviderReference(r *xpv1.Reference) {
	mg.Spec.ProviderReference = r
}

// SetWriteConnectionSecretToReference of this CloudwatchEventBusPolicy.
func (mg *CloudwatchEventBusPolicy) SetWriteConnectionSecretToReference(r *xpv1.SecretReference) {
	mg.Spec.WriteConnectionSecretToReference = r
}

// GetCondition of this CloudwatchEventConnection.
func (mg *CloudwatchEventConnection) GetCondition(ct xpv1.ConditionType) xpv1.Condition {
	return mg.Status.GetCondition(ct)
}

// GetDeletionPolicy of this CloudwatchEventConnection.
func (mg *CloudwatchEventConnection) GetDeletionPolicy() xpv1.DeletionPolicy {
	return mg.Spec.DeletionPolicy
}

// GetProviderConfigReference of this CloudwatchEventConnection.
func (mg *CloudwatchEventConnection) GetProviderConfigReference() *xpv1.Reference {
	return mg.Spec.ProviderConfigReference
}

/*
GetProviderReference of this CloudwatchEventConnection.
Deprecated: Use GetProviderConfigReference.
*/
func (mg *CloudwatchEventConnection) GetProviderReference() *xpv1.Reference {
	return mg.Spec.ProviderReference
}

// GetWriteConnectionSecretToReference of this CloudwatchEventConnection.
func (mg *CloudwatchEventConnection) GetWriteConnectionSecretToReference() *xpv1.SecretReference {
	return mg.Spec.WriteConnectionSecretToReference
}

// SetConditions of this CloudwatchEventConnection.
func (mg *CloudwatchEventConnection) SetConditions(c ...xpv1.Condition) {
	mg.Status.SetConditions(c...)
}

// SetDeletionPolicy of this CloudwatchEventConnection.
func (mg *CloudwatchEventConnection) SetDeletionPolicy(r xpv1.DeletionPolicy) {
	mg.Spec.DeletionPolicy = r
}

// SetProviderConfigReference of this CloudwatchEventConnection.
func (mg *CloudwatchEventConnection) SetProviderConfigReference(r *xpv1.Reference) {
	mg.Spec.ProviderConfigReference = r
}

/*
SetProviderReference of this CloudwatchEventConnection.
Deprecated: Use SetProviderConfigReference.
*/
func (mg *CloudwatchEventConnection) SetProviderReference(r *xpv1.Reference) {
	mg.Spec.ProviderReference = r
}

// SetWriteConnectionSecretToReference of this CloudwatchEventConnection.
func (mg *CloudwatchEventConnection) SetWriteConnectionSecretToReference(r *xpv1.SecretReference) {
	mg.Spec.WriteConnectionSecretToReference = r
}

// GetCondition of this CloudwatchEventPermission.
func (mg *CloudwatchEventPermission) GetCondition(ct xpv1.ConditionType) xpv1.Condition {
	return mg.Status.GetCondition(ct)
}

// GetDeletionPolicy of this CloudwatchEventPermission.
func (mg *CloudwatchEventPermission) GetDeletionPolicy() xpv1.DeletionPolicy {
	return mg.Spec.DeletionPolicy
}

// GetProviderConfigReference of this CloudwatchEventPermission.
func (mg *CloudwatchEventPermission) GetProviderConfigReference() *xpv1.Reference {
	return mg.Spec.ProviderConfigReference
}

/*
GetProviderReference of this CloudwatchEventPermission.
Deprecated: Use GetProviderConfigReference.
*/
func (mg *CloudwatchEventPermission) GetProviderReference() *xpv1.Reference {
	return mg.Spec.ProviderReference
}

// GetWriteConnectionSecretToReference of this CloudwatchEventPermission.
func (mg *CloudwatchEventPermission) GetWriteConnectionSecretToReference() *xpv1.SecretReference {
	return mg.Spec.WriteConnectionSecretToReference
}

// SetConditions of this CloudwatchEventPermission.
func (mg *CloudwatchEventPermission) SetConditions(c ...xpv1.Condition) {
	mg.Status.SetConditions(c...)
}

// SetDeletionPolicy of this CloudwatchEventPermission.
func (mg *CloudwatchEventPermission) SetDeletionPolicy(r xpv1.DeletionPolicy) {
	mg.Spec.DeletionPolicy = r
}

// SetProviderConfigReference of this CloudwatchEventPermission.
func (mg *CloudwatchEventPermission) SetProviderConfigReference(r *xpv1.Reference) {
	mg.Spec.ProviderConfigReference = r
}

/*
SetProviderReference of this CloudwatchEventPermission.
Deprecated: Use SetProviderConfigReference.
*/
func (mg *CloudwatchEventPermission) SetProviderReference(r *xpv1.Reference) {
	mg.Spec.ProviderReference = r
}

// SetWriteConnectionSecretToReference of this CloudwatchEventPermission.
func (mg *CloudwatchEventPermission) SetWriteConnectionSecretToReference(r *xpv1.SecretReference) {
	mg.Spec.WriteConnectionSecretToReference = r
}

// GetCondition of this CloudwatchEventRule.
func (mg *CloudwatchEventRule) GetCondition(ct xpv1.ConditionType) xpv1.Condition {
	return mg.Status.GetCondition(ct)
}

// GetDeletionPolicy of this CloudwatchEventRule.
func (mg *CloudwatchEventRule) GetDeletionPolicy() xpv1.DeletionPolicy {
	return mg.Spec.DeletionPolicy
}

// GetProviderConfigReference of this CloudwatchEventRule.
func (mg *CloudwatchEventRule) GetProviderConfigReference() *xpv1.Reference {
	return mg.Spec.ProviderConfigReference
}

/*
GetProviderReference of this CloudwatchEventRule.
Deprecated: Use GetProviderConfigReference.
*/
func (mg *CloudwatchEventRule) GetProviderReference() *xpv1.Reference {
	return mg.Spec.ProviderReference
}

// GetWriteConnectionSecretToReference of this CloudwatchEventRule.
func (mg *CloudwatchEventRule) GetWriteConnectionSecretToReference() *xpv1.SecretReference {
	return mg.Spec.WriteConnectionSecretToReference
}

// SetConditions of this CloudwatchEventRule.
func (mg *CloudwatchEventRule) SetConditions(c ...xpv1.Condition) {
	mg.Status.SetConditions(c...)
}

// SetDeletionPolicy of this CloudwatchEventRule.
func (mg *CloudwatchEventRule) SetDeletionPolicy(r xpv1.DeletionPolicy) {
	mg.Spec.DeletionPolicy = r
}

// SetProviderConfigReference of this CloudwatchEventRule.
func (mg *CloudwatchEventRule) SetProviderConfigReference(r *xpv1.Reference) {
	mg.Spec.ProviderConfigReference = r
}

/*
SetProviderReference of this CloudwatchEventRule.
Deprecated: Use SetProviderConfigReference.
*/
func (mg *CloudwatchEventRule) SetProviderReference(r *xpv1.Reference) {
	mg.Spec.ProviderReference = r
}

// SetWriteConnectionSecretToReference of this CloudwatchEventRule.
func (mg *CloudwatchEventRule) SetWriteConnectionSecretToReference(r *xpv1.SecretReference) {
	mg.Spec.WriteConnectionSecretToReference = r
}

// GetCondition of this CloudwatchEventTarget.
func (mg *CloudwatchEventTarget) GetCondition(ct xpv1.ConditionType) xpv1.Condition {
	return mg.Status.GetCondition(ct)
}

// GetDeletionPolicy of this CloudwatchEventTarget.
func (mg *CloudwatchEventTarget) GetDeletionPolicy() xpv1.DeletionPolicy {
	return mg.Spec.DeletionPolicy
}

// GetProviderConfigReference of this CloudwatchEventTarget.
func (mg *CloudwatchEventTarget) GetProviderConfigReference() *xpv1.Reference {
	return mg.Spec.ProviderConfigReference
}

/*
GetProviderReference of this CloudwatchEventTarget.
Deprecated: Use GetProviderConfigReference.
*/
func (mg *CloudwatchEventTarget) GetProviderReference() *xpv1.Reference {
	return mg.Spec.ProviderReference
}

// GetWriteConnectionSecretToReference of this CloudwatchEventTarget.
func (mg *CloudwatchEventTarget) GetWriteConnectionSecretToReference() *xpv1.SecretReference {
	return mg.Spec.WriteConnectionSecretToReference
}

// SetConditions of this CloudwatchEventTarget.
func (mg *CloudwatchEventTarget) SetConditions(c ...xpv1.Condition) {
	mg.Status.SetConditions(c...)
}

// SetDeletionPolicy of this CloudwatchEventTarget.
func (mg *CloudwatchEventTarget) SetDeletionPolicy(r xpv1.DeletionPolicy) {
	mg.Spec.DeletionPolicy = r
}

// SetProviderConfigReference of this CloudwatchEventTarget.
func (mg *CloudwatchEventTarget) SetProviderConfigReference(r *xpv1.Reference) {
	mg.Spec.ProviderConfigReference = r
}

/*
SetProviderReference of this CloudwatchEventTarget.
Deprecated: Use SetProviderConfigReference.
*/
func (mg *CloudwatchEventTarget) SetProviderReference(r *xpv1.Reference) {
	mg.Spec.ProviderReference = r
}

// SetWriteConnectionSecretToReference of this CloudwatchEventTarget.
func (mg *CloudwatchEventTarget) SetWriteConnectionSecretToReference(r *xpv1.SecretReference) {
	mg.Spec.WriteConnectionSecretToReference = r
}

// GetCondition of this CloudwatchLogDestination.
func (mg *CloudwatchLogDestination) GetCondition(ct xpv1.ConditionType) xpv1.Condition {
	return mg.Status.GetCondition(ct)
}

// GetDeletionPolicy of this CloudwatchLogDestination.
func (mg *CloudwatchLogDestination) GetDeletionPolicy() xpv1.DeletionPolicy {
	return mg.Spec.DeletionPolicy
}

// GetProviderConfigReference of this CloudwatchLogDestination.
func (mg *CloudwatchLogDestination) GetProviderConfigReference() *xpv1.Reference {
	return mg.Spec.ProviderConfigReference
}

/*
GetProviderReference of this CloudwatchLogDestination.
Deprecated: Use GetProviderConfigReference.
*/
func (mg *CloudwatchLogDestination) GetProviderReference() *xpv1.Reference {
	return mg.Spec.ProviderReference
}

// GetWriteConnectionSecretToReference of this CloudwatchLogDestination.
func (mg *CloudwatchLogDestination) GetWriteConnectionSecretToReference() *xpv1.SecretReference {
	return mg.Spec.WriteConnectionSecretToReference
}

// SetConditions of this CloudwatchLogDestination.
func (mg *CloudwatchLogDestination) SetConditions(c ...xpv1.Condition) {
	mg.Status.SetConditions(c...)
}

// SetDeletionPolicy of this CloudwatchLogDestination.
func (mg *CloudwatchLogDestination) SetDeletionPolicy(r xpv1.DeletionPolicy) {
	mg.Spec.DeletionPolicy = r
}

// SetProviderConfigReference of this CloudwatchLogDestination.
func (mg *CloudwatchLogDestination) SetProviderConfigReference(r *xpv1.Reference) {
	mg.Spec.ProviderConfigReference = r
}

/*
SetProviderReference of this CloudwatchLogDestination.
Deprecated: Use SetProviderConfigReference.
*/
func (mg *CloudwatchLogDestination) SetProviderReference(r *xpv1.Reference) {
	mg.Spec.ProviderReference = r
}

// SetWriteConnectionSecretToReference of this CloudwatchLogDestination.
func (mg *CloudwatchLogDestination) SetWriteConnectionSecretToReference(r *xpv1.SecretReference) {
	mg.Spec.WriteConnectionSecretToReference = r
}

// GetCondition of this CloudwatchLogDestinationPolicy.
func (mg *CloudwatchLogDestinationPolicy) GetCondition(ct xpv1.ConditionType) xpv1.Condition {
	return mg.Status.GetCondition(ct)
}

// GetDeletionPolicy of this CloudwatchLogDestinationPolicy.
func (mg *CloudwatchLogDestinationPolicy) GetDeletionPolicy() xpv1.DeletionPolicy {
	return mg.Spec.DeletionPolicy
}

// GetProviderConfigReference of this CloudwatchLogDestinationPolicy.
func (mg *CloudwatchLogDestinationPolicy) GetProviderConfigReference() *xpv1.Reference {
	return mg.Spec.ProviderConfigReference
}

/*
GetProviderReference of this CloudwatchLogDestinationPolicy.
Deprecated: Use GetProviderConfigReference.
*/
func (mg *CloudwatchLogDestinationPolicy) GetProviderReference() *xpv1.Reference {
	return mg.Spec.ProviderReference
}

// GetWriteConnectionSecretToReference of this CloudwatchLogDestinationPolicy.
func (mg *CloudwatchLogDestinationPolicy) GetWriteConnectionSecretToReference() *xpv1.SecretReference {
	return mg.Spec.WriteConnectionSecretToReference
}

// SetConditions of this CloudwatchLogDestinationPolicy.
func (mg *CloudwatchLogDestinationPolicy) SetConditions(c ...xpv1.Condition) {
	mg.Status.SetConditions(c...)
}

// SetDeletionPolicy of this CloudwatchLogDestinationPolicy.
func (mg *CloudwatchLogDestinationPolicy) SetDeletionPolicy(r xpv1.DeletionPolicy) {
	mg.Spec.DeletionPolicy = r
}

// SetProviderConfigReference of this CloudwatchLogDestinationPolicy.
func (mg *CloudwatchLogDestinationPolicy) SetProviderConfigReference(r *xpv1.Reference) {
	mg.Spec.ProviderConfigReference = r
}

/*
SetProviderReference of this CloudwatchLogDestinationPolicy.
Deprecated: Use SetProviderConfigReference.
*/
func (mg *CloudwatchLogDestinationPolicy) SetProviderReference(r *xpv1.Reference) {
	mg.Spec.ProviderReference = r
}

// SetWriteConnectionSecretToReference of this CloudwatchLogDestinationPolicy.
func (mg *CloudwatchLogDestinationPolicy) SetWriteConnectionSecretToReference(r *xpv1.SecretReference) {
	mg.Spec.WriteConnectionSecretToReference = r
}

// GetCondition of this CloudwatchLogGroup.
func (mg *CloudwatchLogGroup) GetCondition(ct xpv1.ConditionType) xpv1.Condition {
	return mg.Status.GetCondition(ct)
}

// GetDeletionPolicy of this CloudwatchLogGroup.
func (mg *CloudwatchLogGroup) GetDeletionPolicy() xpv1.DeletionPolicy {
	return mg.Spec.DeletionPolicy
}

// GetProviderConfigReference of this CloudwatchLogGroup.
func (mg *CloudwatchLogGroup) GetProviderConfigReference() *xpv1.Reference {
	return mg.Spec.ProviderConfigReference
}

/*
GetProviderReference of this CloudwatchLogGroup.
Deprecated: Use GetProviderConfigReference.
*/
func (mg *CloudwatchLogGroup) GetProviderReference() *xpv1.Reference {
	return mg.Spec.ProviderReference
}

// GetWriteConnectionSecretToReference of this CloudwatchLogGroup.
func (mg *CloudwatchLogGroup) GetWriteConnectionSecretToReference() *xpv1.SecretReference {
	return mg.Spec.WriteConnectionSecretToReference
}

// SetConditions of this CloudwatchLogGroup.
func (mg *CloudwatchLogGroup) SetConditions(c ...xpv1.Condition) {
	mg.Status.SetConditions(c...)
}

// SetDeletionPolicy of this CloudwatchLogGroup.
func (mg *CloudwatchLogGroup) SetDeletionPolicy(r xpv1.DeletionPolicy) {
	mg.Spec.DeletionPolicy = r
}

// SetProviderConfigReference of this CloudwatchLogGroup.
func (mg *CloudwatchLogGroup) SetProviderConfigReference(r *xpv1.Reference) {
	mg.Spec.ProviderConfigReference = r
}

/*
SetProviderReference of this CloudwatchLogGroup.
Deprecated: Use SetProviderConfigReference.
*/
func (mg *CloudwatchLogGroup) SetProviderReference(r *xpv1.Reference) {
	mg.Spec.ProviderReference = r
}

// SetWriteConnectionSecretToReference of this CloudwatchLogGroup.
func (mg *CloudwatchLogGroup) SetWriteConnectionSecretToReference(r *xpv1.SecretReference) {
	mg.Spec.WriteConnectionSecretToReference = r
}

// GetCondition of this CloudwatchLogMetricFilter.
func (mg *CloudwatchLogMetricFilter) GetCondition(ct xpv1.ConditionType) xpv1.Condition {
	return mg.Status.GetCondition(ct)
}

// GetDeletionPolicy of this CloudwatchLogMetricFilter.
func (mg *CloudwatchLogMetricFilter) GetDeletionPolicy() xpv1.DeletionPolicy {
	return mg.Spec.DeletionPolicy
}

// GetProviderConfigReference of this CloudwatchLogMetricFilter.
func (mg *CloudwatchLogMetricFilter) GetProviderConfigReference() *xpv1.Reference {
	return mg.Spec.ProviderConfigReference
}

/*
GetProviderReference of this CloudwatchLogMetricFilter.
Deprecated: Use GetProviderConfigReference.
*/
func (mg *CloudwatchLogMetricFilter) GetProviderReference() *xpv1.Reference {
	return mg.Spec.ProviderReference
}

// GetWriteConnectionSecretToReference of this CloudwatchLogMetricFilter.
func (mg *CloudwatchLogMetricFilter) GetWriteConnectionSecretToReference() *xpv1.SecretReference {
	return mg.Spec.WriteConnectionSecretToReference
}

// SetConditions of this CloudwatchLogMetricFilter.
func (mg *CloudwatchLogMetricFilter) SetConditions(c ...xpv1.Condition) {
	mg.Status.SetConditions(c...)
}

// SetDeletionPolicy of this CloudwatchLogMetricFilter.
func (mg *CloudwatchLogMetricFilter) SetDeletionPolicy(r xpv1.DeletionPolicy) {
	mg.Spec.DeletionPolicy = r
}

// SetProviderConfigReference of this CloudwatchLogMetricFilter.
func (mg *CloudwatchLogMetricFilter) SetProviderConfigReference(r *xpv1.Reference) {
	mg.Spec.ProviderConfigReference = r
}

/*
SetProviderReference of this CloudwatchLogMetricFilter.
Deprecated: Use SetProviderConfigReference.
*/
func (mg *CloudwatchLogMetricFilter) SetProviderReference(r *xpv1.Reference) {
	mg.Spec.ProviderReference = r
}

// SetWriteConnectionSecretToReference of this CloudwatchLogMetricFilter.
func (mg *CloudwatchLogMetricFilter) SetWriteConnectionSecretToReference(r *xpv1.SecretReference) {
	mg.Spec.WriteConnectionSecretToReference = r
}

// GetCondition of this CloudwatchLogResourcePolicy.
func (mg *CloudwatchLogResourcePolicy) GetCondition(ct xpv1.ConditionType) xpv1.Condition {
	return mg.Status.GetCondition(ct)
}

// GetDeletionPolicy of this CloudwatchLogResourcePolicy.
func (mg *CloudwatchLogResourcePolicy) GetDeletionPolicy() xpv1.DeletionPolicy {
	return mg.Spec.DeletionPolicy
}

// GetProviderConfigReference of this CloudwatchLogResourcePolicy.
func (mg *CloudwatchLogResourcePolicy) GetProviderConfigReference() *xpv1.Reference {
	return mg.Spec.ProviderConfigReference
}

/*
GetProviderReference of this CloudwatchLogResourcePolicy.
Deprecated: Use GetProviderConfigReference.
*/
func (mg *CloudwatchLogResourcePolicy) GetProviderReference() *xpv1.Reference {
	return mg.Spec.ProviderReference
}

// GetWriteConnectionSecretToReference of this CloudwatchLogResourcePolicy.
func (mg *CloudwatchLogResourcePolicy) GetWriteConnectionSecretToReference() *xpv1.SecretReference {
	return mg.Spec.WriteConnectionSecretToReference
}

// SetConditions of this CloudwatchLogResourcePolicy.
func (mg *CloudwatchLogResourcePolicy) SetConditions(c ...xpv1.Condition) {
	mg.Status.SetConditions(c...)
}

// SetDeletionPolicy of this CloudwatchLogResourcePolicy.
func (mg *CloudwatchLogResourcePolicy) SetDeletionPolicy(r xpv1.DeletionPolicy) {
	mg.Spec.DeletionPolicy = r
}

// SetProviderConfigReference of this CloudwatchLogResourcePolicy.
func (mg *CloudwatchLogResourcePolicy) SetProviderConfigReference(r *xpv1.Reference) {
	mg.Spec.ProviderConfigReference = r
}

/*
SetProviderReference of this CloudwatchLogResourcePolicy.
Deprecated: Use SetProviderConfigReference.
*/
func (mg *CloudwatchLogResourcePolicy) SetProviderReference(r *xpv1.Reference) {
	mg.Spec.ProviderReference = r
}

// SetWriteConnectionSecretToReference of this CloudwatchLogResourcePolicy.
func (mg *CloudwatchLogResourcePolicy) SetWriteConnectionSecretToReference(r *xpv1.SecretReference) {
	mg.Spec.WriteConnectionSecretToReference = r
}

// GetCondition of this CloudwatchLogStream.
func (mg *CloudwatchLogStream) GetCondition(ct xpv1.ConditionType) xpv1.Condition {
	return mg.Status.GetCondition(ct)
}

// GetDeletionPolicy of this CloudwatchLogStream.
func (mg *CloudwatchLogStream) GetDeletionPolicy() xpv1.DeletionPolicy {
	return mg.Spec.DeletionPolicy
}

// GetProviderConfigReference of this CloudwatchLogStream.
func (mg *CloudwatchLogStream) GetProviderConfigReference() *xpv1.Reference {
	return mg.Spec.ProviderConfigReference
}

/*
GetProviderReference of this CloudwatchLogStream.
Deprecated: Use GetProviderConfigReference.
*/
func (mg *CloudwatchLogStream) GetProviderReference() *xpv1.Reference {
	return mg.Spec.ProviderReference
}

// GetWriteConnectionSecretToReference of this CloudwatchLogStream.
func (mg *CloudwatchLogStream) GetWriteConnectionSecretToReference() *xpv1.SecretReference {
	return mg.Spec.WriteConnectionSecretToReference
}

// SetConditions of this CloudwatchLogStream.
func (mg *CloudwatchLogStream) SetConditions(c ...xpv1.Condition) {
	mg.Status.SetConditions(c...)
}

// SetDeletionPolicy of this CloudwatchLogStream.
func (mg *CloudwatchLogStream) SetDeletionPolicy(r xpv1.DeletionPolicy) {
	mg.Spec.DeletionPolicy = r
}

// SetProviderConfigReference of this CloudwatchLogStream.
func (mg *CloudwatchLogStream) SetProviderConfigReference(r *xpv1.Reference) {
	mg.Spec.ProviderConfigReference = r
}

/*
SetProviderReference of this CloudwatchLogStream.
Deprecated: Use SetProviderConfigReference.
*/
func (mg *CloudwatchLogStream) SetProviderReference(r *xpv1.Reference) {
	mg.Spec.ProviderReference = r
}

// SetWriteConnectionSecretToReference of this CloudwatchLogStream.
func (mg *CloudwatchLogStream) SetWriteConnectionSecretToReference(r *xpv1.SecretReference) {
	mg.Spec.WriteConnectionSecretToReference = r
}

// GetCondition of this CloudwatchLogSubscriptionFilter.
func (mg *CloudwatchLogSubscriptionFilter) GetCondition(ct xpv1.ConditionType) xpv1.Condition {
	return mg.Status.GetCondition(ct)
}

// GetDeletionPolicy of this CloudwatchLogSubscriptionFilter.
func (mg *CloudwatchLogSubscriptionFilter) GetDeletionPolicy() xpv1.DeletionPolicy {
	return mg.Spec.DeletionPolicy
}

// GetProviderConfigReference of this CloudwatchLogSubscriptionFilter.
func (mg *CloudwatchLogSubscriptionFilter) GetProviderConfigReference() *xpv1.Reference {
	return mg.Spec.ProviderConfigReference
}

/*
GetProviderReference of this CloudwatchLogSubscriptionFilter.
Deprecated: Use GetProviderConfigReference.
*/
func (mg *CloudwatchLogSubscriptionFilter) GetProviderReference() *xpv1.Reference {
	return mg.Spec.ProviderReference
}

// GetWriteConnectionSecretToReference of this CloudwatchLogSubscriptionFilter.
func (mg *CloudwatchLogSubscriptionFilter) GetWriteConnectionSecretToReference() *xpv1.SecretReference {
	return mg.Spec.WriteConnectionSecretToReference
}

// SetConditions of this CloudwatchLogSubscriptionFilter.
func (mg *CloudwatchLogSubscriptionFilter) SetConditions(c ...xpv1.Condition) {
	mg.Status.SetConditions(c...)
}

// SetDeletionPolicy of this CloudwatchLogSubscriptionFilter.
func (mg *CloudwatchLogSubscriptionFilter) SetDeletionPolicy(r xpv1.DeletionPolicy) {
	mg.Spec.DeletionPolicy = r
}

// SetProviderConfigReference of this CloudwatchLogSubscriptionFilter.
func (mg *CloudwatchLogSubscriptionFilter) SetProviderConfigReference(r *xpv1.Reference) {
	mg.Spec.ProviderConfigReference = r
}

/*
SetProviderReference of this CloudwatchLogSubscriptionFilter.
Deprecated: Use SetProviderConfigReference.
*/
func (mg *CloudwatchLogSubscriptionFilter) SetProviderReference(r *xpv1.Reference) {
	mg.Spec.ProviderReference = r
}

// SetWriteConnectionSecretToReference of this CloudwatchLogSubscriptionFilter.
func (mg *CloudwatchLogSubscriptionFilter) SetWriteConnectionSecretToReference(r *xpv1.SecretReference) {
	mg.Spec.WriteConnectionSecretToReference = r
}

// GetCondition of this CloudwatchMetricAlarm.
func (mg *CloudwatchMetricAlarm) GetCondition(ct xpv1.ConditionType) xpv1.Condition {
	return mg.Status.GetCondition(ct)
}

// GetDeletionPolicy of this CloudwatchMetricAlarm.
func (mg *CloudwatchMetricAlarm) GetDeletionPolicy() xpv1.DeletionPolicy {
	return mg.Spec.DeletionPolicy
}

// GetProviderConfigReference of this CloudwatchMetricAlarm.
func (mg *CloudwatchMetricAlarm) GetProviderConfigReference() *xpv1.Reference {
	return mg.Spec.ProviderConfigReference
}

/*
GetProviderReference of this CloudwatchMetricAlarm.
Deprecated: Use GetProviderConfigReference.
*/
func (mg *CloudwatchMetricAlarm) GetProviderReference() *xpv1.Reference {
	return mg.Spec.ProviderReference
}

// GetWriteConnectionSecretToReference of this CloudwatchMetricAlarm.
func (mg *CloudwatchMetricAlarm) GetWriteConnectionSecretToReference() *xpv1.SecretReference {
	return mg.Spec.WriteConnectionSecretToReference
}

// SetConditions of this CloudwatchMetricAlarm.
func (mg *CloudwatchMetricAlarm) SetConditions(c ...xpv1.Condition) {
	mg.Status.SetConditions(c...)
}

// SetDeletionPolicy of this CloudwatchMetricAlarm.
func (mg *CloudwatchMetricAlarm) SetDeletionPolicy(r xpv1.DeletionPolicy) {
	mg.Spec.DeletionPolicy = r
}

// SetProviderConfigReference of this CloudwatchMetricAlarm.
func (mg *CloudwatchMetricAlarm) SetProviderConfigReference(r *xpv1.Reference) {
	mg.Spec.ProviderConfigReference = r
}

/*
SetProviderReference of this CloudwatchMetricAlarm.
Deprecated: Use SetProviderConfigReference.
*/
func (mg *CloudwatchMetricAlarm) SetProviderReference(r *xpv1.Reference) {
	mg.Spec.ProviderReference = r
}

// SetWriteConnectionSecretToReference of this CloudwatchMetricAlarm.
func (mg *CloudwatchMetricAlarm) SetWriteConnectionSecretToReference(r *xpv1.SecretReference) {
	mg.Spec.WriteConnectionSecretToReference = r
}

// GetCondition of this CloudwatchMetricStream.
func (mg *CloudwatchMetricStream) GetCondition(ct xpv1.ConditionType) xpv1.Condition {
	return mg.Status.GetCondition(ct)
}

// GetDeletionPolicy of this CloudwatchMetricStream.
func (mg *CloudwatchMetricStream) GetDeletionPolicy() xpv1.DeletionPolicy {
	return mg.Spec.DeletionPolicy
}

// GetProviderConfigReference of this CloudwatchMetricStream.
func (mg *CloudwatchMetricStream) GetProviderConfigReference() *xpv1.Reference {
	return mg.Spec.ProviderConfigReference
}

/*
GetProviderReference of this CloudwatchMetricStream.
Deprecated: Use GetProviderConfigReference.
*/
func (mg *CloudwatchMetricStream) GetProviderReference() *xpv1.Reference {
	return mg.Spec.ProviderReference
}

// GetWriteConnectionSecretToReference of this CloudwatchMetricStream.
func (mg *CloudwatchMetricStream) GetWriteConnectionSecretToReference() *xpv1.SecretReference {
	return mg.Spec.WriteConnectionSecretToReference
}

// SetConditions of this CloudwatchMetricStream.
func (mg *CloudwatchMetricStream) SetConditions(c ...xpv1.Condition) {
	mg.Status.SetConditions(c...)
}

// SetDeletionPolicy of this CloudwatchMetricStream.
func (mg *CloudwatchMetricStream) SetDeletionPolicy(r xpv1.DeletionPolicy) {
	mg.Spec.DeletionPolicy = r
}

// SetProviderConfigReference of this CloudwatchMetricStream.
func (mg *CloudwatchMetricStream) SetProviderConfigReference(r *xpv1.Reference) {
	mg.Spec.ProviderConfigReference = r
}

/*
SetProviderReference of this CloudwatchMetricStream.
Deprecated: Use SetProviderConfigReference.
*/
func (mg *CloudwatchMetricStream) SetProviderReference(r *xpv1.Reference) {
	mg.Spec.ProviderReference = r
}

// SetWriteConnectionSecretToReference of this CloudwatchMetricStream.
func (mg *CloudwatchMetricStream) SetWriteConnectionSecretToReference(r *xpv1.SecretReference) {
	mg.Spec.WriteConnectionSecretToReference = r
}

// GetCondition of this CloudwatchQueryDefinition.
func (mg *CloudwatchQueryDefinition) GetCondition(ct xpv1.ConditionType) xpv1.Condition {
	return mg.Status.GetCondition(ct)
}

// GetDeletionPolicy of this CloudwatchQueryDefinition.
func (mg *CloudwatchQueryDefinition) GetDeletionPolicy() xpv1.DeletionPolicy {
	return mg.Spec.DeletionPolicy
}

// GetProviderConfigReference of this CloudwatchQueryDefinition.
func (mg *CloudwatchQueryDefinition) GetProviderConfigReference() *xpv1.Reference {
	return mg.Spec.ProviderConfigReference
}

/*
GetProviderReference of this CloudwatchQueryDefinition.
Deprecated: Use GetProviderConfigReference.
*/
func (mg *CloudwatchQueryDefinition) GetProviderReference() *xpv1.Reference {
	return mg.Spec.ProviderReference
}

// GetWriteConnectionSecretToReference of this CloudwatchQueryDefinition.
func (mg *CloudwatchQueryDefinition) GetWriteConnectionSecretToReference() *xpv1.SecretReference {
	return mg.Spec.WriteConnectionSecretToReference
}

// SetConditions of this CloudwatchQueryDefinition.
func (mg *CloudwatchQueryDefinition) SetConditions(c ...xpv1.Condition) {
	mg.Status.SetConditions(c...)
}

// SetDeletionPolicy of this CloudwatchQueryDefinition.
func (mg *CloudwatchQueryDefinition) SetDeletionPolicy(r xpv1.DeletionPolicy) {
	mg.Spec.DeletionPolicy = r
}

// SetProviderConfigReference of this CloudwatchQueryDefinition.
func (mg *CloudwatchQueryDefinition) SetProviderConfigReference(r *xpv1.Reference) {
	mg.Spec.ProviderConfigReference = r
}

/*
SetProviderReference of this CloudwatchQueryDefinition.
Deprecated: Use SetProviderConfigReference.
*/
func (mg *CloudwatchQueryDefinition) SetProviderReference(r *xpv1.Reference) {
	mg.Spec.ProviderReference = r
}

// SetWriteConnectionSecretToReference of this CloudwatchQueryDefinition.
func (mg *CloudwatchQueryDefinition) SetWriteConnectionSecretToReference(r *xpv1.SecretReference) {
	mg.Spec.WriteConnectionSecretToReference = r
}
