/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	xpv1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"
)

type CloudwatchMetricAlarmObservation struct {
	Arn string `json:"arn" tf:"arn"`
}

type CloudwatchMetricAlarmParameters struct {

	// +kubebuilder:validation:Optional
	ActionsEnabled *bool `json:"actionsEnabled,omitempty" tf:"actions_enabled"`

	// +kubebuilder:validation:Optional
	AlarmActions []string `json:"alarmActions,omitempty" tf:"alarm_actions"`

	// +kubebuilder:validation:Optional
	AlarmDescription *string `json:"alarmDescription,omitempty" tf:"alarm_description"`

	// +kubebuilder:validation:Required
	AlarmName string `json:"alarmName" tf:"alarm_name"`

	// +kubebuilder:validation:Required
	ComparisonOperator string `json:"comparisonOperator" tf:"comparison_operator"`

	// +kubebuilder:validation:Optional
	DatapointsToAlarm *int64 `json:"datapointsToAlarm,omitempty" tf:"datapoints_to_alarm"`

	// +kubebuilder:validation:Optional
	Dimensions map[string]string `json:"dimensions,omitempty" tf:"dimensions"`

	// +kubebuilder:validation:Optional
	EvaluateLowSampleCountPercentiles *string `json:"evaluateLowSampleCountPercentiles,omitempty" tf:"evaluate_low_sample_count_percentiles"`

	// +kubebuilder:validation:Required
	EvaluationPeriods int64 `json:"evaluationPeriods" tf:"evaluation_periods"`

	// +kubebuilder:validation:Optional
	ExtendedStatistic *string `json:"extendedStatistic,omitempty" tf:"extended_statistic"`

	// +kubebuilder:validation:Optional
	InsufficientDataActions []string `json:"insufficientDataActions,omitempty" tf:"insufficient_data_actions"`

	// +kubebuilder:validation:Optional
	MetricName *string `json:"metricName,omitempty" tf:"metric_name"`

	// +kubebuilder:validation:Optional
	MetricQuery []MetricQueryParameters `json:"metricQuery,omitempty" tf:"metric_query"`

	// +kubebuilder:validation:Optional
	Namespace *string `json:"namespace,omitempty" tf:"namespace"`

	// +kubebuilder:validation:Optional
	OkActions []string `json:"okActions,omitempty" tf:"ok_actions"`

	// +kubebuilder:validation:Optional
	Period *int64 `json:"period,omitempty" tf:"period"`

	// Region is the region you'd like your resource to be created in.
	// +terrajet:crd:field:TFTag=-
	// +kubebuilder:validation:Required
	Region string `json:"region" tf:"-"`

	// +kubebuilder:validation:Optional
	Statistic *string `json:"statistic,omitempty" tf:"statistic"`

	// +kubebuilder:validation:Optional
	Tags map[string]string `json:"tags,omitempty" tf:"tags"`

	// +kubebuilder:validation:Optional
	TagsAll map[string]string `json:"tagsAll,omitempty" tf:"tags_all"`

	// +kubebuilder:validation:Optional
	Threshold *float64 `json:"threshold,omitempty" tf:"threshold"`

	// +kubebuilder:validation:Optional
	ThresholdMetricID *string `json:"thresholdMetricId,omitempty" tf:"threshold_metric_id"`

	// +kubebuilder:validation:Optional
	TreatMissingData *string `json:"treatMissingData,omitempty" tf:"treat_missing_data"`

	// +kubebuilder:validation:Optional
	Unit *string `json:"unit,omitempty" tf:"unit"`
}

type MetricObservation struct {
}

type MetricParameters struct {

	// +kubebuilder:validation:Optional
	Dimensions map[string]string `json:"dimensions,omitempty" tf:"dimensions"`

	// +kubebuilder:validation:Required
	MetricName string `json:"metricName" tf:"metric_name"`

	// +kubebuilder:validation:Optional
	Namespace *string `json:"namespace,omitempty" tf:"namespace"`

	// +kubebuilder:validation:Required
	Period int64 `json:"period" tf:"period"`

	// +kubebuilder:validation:Required
	Stat string `json:"stat" tf:"stat"`

	// +kubebuilder:validation:Optional
	Unit *string `json:"unit,omitempty" tf:"unit"`
}

type MetricQueryObservation struct {
}

type MetricQueryParameters struct {

	// +kubebuilder:validation:Optional
	Expression *string `json:"expression,omitempty" tf:"expression"`

	// +kubebuilder:validation:Required
	ID string `json:"id" tf:"id"`

	// +kubebuilder:validation:Optional
	Label *string `json:"label,omitempty" tf:"label"`

	// +kubebuilder:validation:Optional
	Metric []MetricParameters `json:"metric,omitempty" tf:"metric"`

	// +kubebuilder:validation:Optional
	ReturnData *bool `json:"returnData,omitempty" tf:"return_data"`
}

// CloudwatchMetricAlarmSpec defines the desired state of CloudwatchMetricAlarm
type CloudwatchMetricAlarmSpec struct {
	xpv1.ResourceSpec `json:",inline"`
	ForProvider       CloudwatchMetricAlarmParameters `json:"forProvider"`
}

// CloudwatchMetricAlarmStatus defines the observed state of CloudwatchMetricAlarm.
type CloudwatchMetricAlarmStatus struct {
	xpv1.ResourceStatus `json:",inline"`
	AtProvider          CloudwatchMetricAlarmObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// CloudwatchMetricAlarm is the Schema for the CloudwatchMetricAlarms API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,tfaws}
type CloudwatchMetricAlarm struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              CloudwatchMetricAlarmSpec   `json:"spec"`
	Status            CloudwatchMetricAlarmStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// CloudwatchMetricAlarmList contains a list of CloudwatchMetricAlarms
type CloudwatchMetricAlarmList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []CloudwatchMetricAlarm `json:"items"`
}

// Repository type metadata.
var (
	CloudwatchMetricAlarmKind             = "CloudwatchMetricAlarm"
	CloudwatchMetricAlarmGroupKind        = schema.GroupKind{Group: Group, Kind: CloudwatchMetricAlarmKind}.String()
	CloudwatchMetricAlarmKindAPIVersion   = CloudwatchMetricAlarmKind + "." + GroupVersion.String()
	CloudwatchMetricAlarmGroupVersionKind = GroupVersion.WithKind(CloudwatchMetricAlarmKind)
)

func init() {
	SchemeBuilder.Register(&CloudwatchMetricAlarm{}, &CloudwatchMetricAlarmList{})
}
