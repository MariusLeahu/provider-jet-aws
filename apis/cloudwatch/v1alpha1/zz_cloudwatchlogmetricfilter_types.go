/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	xpv1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"
)

type CloudwatchLogMetricFilterObservation struct {
}

type CloudwatchLogMetricFilterParameters struct {
	LogGroupName string `json:"logGroupName" tf:"log_group_name"`

	MetricTransformation []MetricTransformationParameters `json:"metricTransformation" tf:"metric_transformation"`

	Name string `json:"name" tf:"name"`

	Pattern string `json:"pattern" tf:"pattern"`

	Region string `json:"region" tf:"-"`
}

type MetricTransformationObservation struct {
}

type MetricTransformationParameters struct {
	DefaultValue *string `json:"defaultValue,omitempty" tf:"default_value"`

	Dimensions map[string]string `json:"dimensions,omitempty" tf:"dimensions"`

	Name string `json:"name" tf:"name"`

	Namespace string `json:"namespace" tf:"namespace"`

	Unit *string `json:"unit,omitempty" tf:"unit"`

	Value string `json:"value" tf:"value"`
}

// CloudwatchLogMetricFilterSpec defines the desired state of CloudwatchLogMetricFilter
type CloudwatchLogMetricFilterSpec struct {
	xpv1.ResourceSpec `json:",inline"`
	ForProvider       CloudwatchLogMetricFilterParameters `json:"forProvider"`
}

// CloudwatchLogMetricFilterStatus defines the observed state of CloudwatchLogMetricFilter.
type CloudwatchLogMetricFilterStatus struct {
	xpv1.ResourceStatus `json:",inline"`
	AtProvider          CloudwatchLogMetricFilterObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// CloudwatchLogMetricFilter is the Schema for the CloudwatchLogMetricFilters API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,tfaws}
type CloudwatchLogMetricFilter struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              CloudwatchLogMetricFilterSpec   `json:"spec"`
	Status            CloudwatchLogMetricFilterStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// CloudwatchLogMetricFilterList contains a list of CloudwatchLogMetricFilters
type CloudwatchLogMetricFilterList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []CloudwatchLogMetricFilter `json:"items"`
}

// Repository type metadata.
var (
	CloudwatchLogMetricFilterKind             = "CloudwatchLogMetricFilter"
	CloudwatchLogMetricFilterGroupKind        = schema.GroupKind{Group: Group, Kind: CloudwatchLogMetricFilterKind}.String()
	CloudwatchLogMetricFilterKindAPIVersion   = CloudwatchLogMetricFilterKind + "." + GroupVersion.String()
	CloudwatchLogMetricFilterGroupVersionKind = GroupVersion.WithKind(CloudwatchLogMetricFilterKind)
)

func init() {
	SchemeBuilder.Register(&CloudwatchLogMetricFilter{}, &CloudwatchLogMetricFilterList{})
}
