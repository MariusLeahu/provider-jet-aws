/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/
// Code generated by angryjet. DO NOT EDIT.

package v1alpha1

import xpv1 "github.com/crossplane/crossplane-runtime/apis/common/v1"

// GetCondition of this DatasyncAgent.
func (mg *DatasyncAgent) GetCondition(ct xpv1.ConditionType) xpv1.Condition {
	return mg.Status.GetCondition(ct)
}

// GetDeletionPolicy of this DatasyncAgent.
func (mg *DatasyncAgent) GetDeletionPolicy() xpv1.DeletionPolicy {
	return mg.Spec.DeletionPolicy
}

// GetProviderConfigReference of this DatasyncAgent.
func (mg *DatasyncAgent) GetProviderConfigReference() *xpv1.Reference {
	return mg.Spec.ProviderConfigReference
}

/*
GetProviderReference of this DatasyncAgent.
Deprecated: Use GetProviderConfigReference.
*/
func (mg *DatasyncAgent) GetProviderReference() *xpv1.Reference {
	return mg.Spec.ProviderReference
}

// GetWriteConnectionSecretToReference of this DatasyncAgent.
func (mg *DatasyncAgent) GetWriteConnectionSecretToReference() *xpv1.SecretReference {
	return mg.Spec.WriteConnectionSecretToReference
}

// SetConditions of this DatasyncAgent.
func (mg *DatasyncAgent) SetConditions(c ...xpv1.Condition) {
	mg.Status.SetConditions(c...)
}

// SetDeletionPolicy of this DatasyncAgent.
func (mg *DatasyncAgent) SetDeletionPolicy(r xpv1.DeletionPolicy) {
	mg.Spec.DeletionPolicy = r
}

// SetProviderConfigReference of this DatasyncAgent.
func (mg *DatasyncAgent) SetProviderConfigReference(r *xpv1.Reference) {
	mg.Spec.ProviderConfigReference = r
}

/*
SetProviderReference of this DatasyncAgent.
Deprecated: Use SetProviderConfigReference.
*/
func (mg *DatasyncAgent) SetProviderReference(r *xpv1.Reference) {
	mg.Spec.ProviderReference = r
}

// SetWriteConnectionSecretToReference of this DatasyncAgent.
func (mg *DatasyncAgent) SetWriteConnectionSecretToReference(r *xpv1.SecretReference) {
	mg.Spec.WriteConnectionSecretToReference = r
}

// GetCondition of this DatasyncLocationEfs.
func (mg *DatasyncLocationEfs) GetCondition(ct xpv1.ConditionType) xpv1.Condition {
	return mg.Status.GetCondition(ct)
}

// GetDeletionPolicy of this DatasyncLocationEfs.
func (mg *DatasyncLocationEfs) GetDeletionPolicy() xpv1.DeletionPolicy {
	return mg.Spec.DeletionPolicy
}

// GetProviderConfigReference of this DatasyncLocationEfs.
func (mg *DatasyncLocationEfs) GetProviderConfigReference() *xpv1.Reference {
	return mg.Spec.ProviderConfigReference
}

/*
GetProviderReference of this DatasyncLocationEfs.
Deprecated: Use GetProviderConfigReference.
*/
func (mg *DatasyncLocationEfs) GetProviderReference() *xpv1.Reference {
	return mg.Spec.ProviderReference
}

// GetWriteConnectionSecretToReference of this DatasyncLocationEfs.
func (mg *DatasyncLocationEfs) GetWriteConnectionSecretToReference() *xpv1.SecretReference {
	return mg.Spec.WriteConnectionSecretToReference
}

// SetConditions of this DatasyncLocationEfs.
func (mg *DatasyncLocationEfs) SetConditions(c ...xpv1.Condition) {
	mg.Status.SetConditions(c...)
}

// SetDeletionPolicy of this DatasyncLocationEfs.
func (mg *DatasyncLocationEfs) SetDeletionPolicy(r xpv1.DeletionPolicy) {
	mg.Spec.DeletionPolicy = r
}

// SetProviderConfigReference of this DatasyncLocationEfs.
func (mg *DatasyncLocationEfs) SetProviderConfigReference(r *xpv1.Reference) {
	mg.Spec.ProviderConfigReference = r
}

/*
SetProviderReference of this DatasyncLocationEfs.
Deprecated: Use SetProviderConfigReference.
*/
func (mg *DatasyncLocationEfs) SetProviderReference(r *xpv1.Reference) {
	mg.Spec.ProviderReference = r
}

// SetWriteConnectionSecretToReference of this DatasyncLocationEfs.
func (mg *DatasyncLocationEfs) SetWriteConnectionSecretToReference(r *xpv1.SecretReference) {
	mg.Spec.WriteConnectionSecretToReference = r
}

// GetCondition of this DatasyncLocationFsxWindowsFileSystem.
func (mg *DatasyncLocationFsxWindowsFileSystem) GetCondition(ct xpv1.ConditionType) xpv1.Condition {
	return mg.Status.GetCondition(ct)
}

// GetDeletionPolicy of this DatasyncLocationFsxWindowsFileSystem.
func (mg *DatasyncLocationFsxWindowsFileSystem) GetDeletionPolicy() xpv1.DeletionPolicy {
	return mg.Spec.DeletionPolicy
}

// GetProviderConfigReference of this DatasyncLocationFsxWindowsFileSystem.
func (mg *DatasyncLocationFsxWindowsFileSystem) GetProviderConfigReference() *xpv1.Reference {
	return mg.Spec.ProviderConfigReference
}

/*
GetProviderReference of this DatasyncLocationFsxWindowsFileSystem.
Deprecated: Use GetProviderConfigReference.
*/
func (mg *DatasyncLocationFsxWindowsFileSystem) GetProviderReference() *xpv1.Reference {
	return mg.Spec.ProviderReference
}

// GetWriteConnectionSecretToReference of this DatasyncLocationFsxWindowsFileSystem.
func (mg *DatasyncLocationFsxWindowsFileSystem) GetWriteConnectionSecretToReference() *xpv1.SecretReference {
	return mg.Spec.WriteConnectionSecretToReference
}

// SetConditions of this DatasyncLocationFsxWindowsFileSystem.
func (mg *DatasyncLocationFsxWindowsFileSystem) SetConditions(c ...xpv1.Condition) {
	mg.Status.SetConditions(c...)
}

// SetDeletionPolicy of this DatasyncLocationFsxWindowsFileSystem.
func (mg *DatasyncLocationFsxWindowsFileSystem) SetDeletionPolicy(r xpv1.DeletionPolicy) {
	mg.Spec.DeletionPolicy = r
}

// SetProviderConfigReference of this DatasyncLocationFsxWindowsFileSystem.
func (mg *DatasyncLocationFsxWindowsFileSystem) SetProviderConfigReference(r *xpv1.Reference) {
	mg.Spec.ProviderConfigReference = r
}

/*
SetProviderReference of this DatasyncLocationFsxWindowsFileSystem.
Deprecated: Use SetProviderConfigReference.
*/
func (mg *DatasyncLocationFsxWindowsFileSystem) SetProviderReference(r *xpv1.Reference) {
	mg.Spec.ProviderReference = r
}

// SetWriteConnectionSecretToReference of this DatasyncLocationFsxWindowsFileSystem.
func (mg *DatasyncLocationFsxWindowsFileSystem) SetWriteConnectionSecretToReference(r *xpv1.SecretReference) {
	mg.Spec.WriteConnectionSecretToReference = r
}

// GetCondition of this DatasyncLocationNfs.
func (mg *DatasyncLocationNfs) GetCondition(ct xpv1.ConditionType) xpv1.Condition {
	return mg.Status.GetCondition(ct)
}

// GetDeletionPolicy of this DatasyncLocationNfs.
func (mg *DatasyncLocationNfs) GetDeletionPolicy() xpv1.DeletionPolicy {
	return mg.Spec.DeletionPolicy
}

// GetProviderConfigReference of this DatasyncLocationNfs.
func (mg *DatasyncLocationNfs) GetProviderConfigReference() *xpv1.Reference {
	return mg.Spec.ProviderConfigReference
}

/*
GetProviderReference of this DatasyncLocationNfs.
Deprecated: Use GetProviderConfigReference.
*/
func (mg *DatasyncLocationNfs) GetProviderReference() *xpv1.Reference {
	return mg.Spec.ProviderReference
}

// GetWriteConnectionSecretToReference of this DatasyncLocationNfs.
func (mg *DatasyncLocationNfs) GetWriteConnectionSecretToReference() *xpv1.SecretReference {
	return mg.Spec.WriteConnectionSecretToReference
}

// SetConditions of this DatasyncLocationNfs.
func (mg *DatasyncLocationNfs) SetConditions(c ...xpv1.Condition) {
	mg.Status.SetConditions(c...)
}

// SetDeletionPolicy of this DatasyncLocationNfs.
func (mg *DatasyncLocationNfs) SetDeletionPolicy(r xpv1.DeletionPolicy) {
	mg.Spec.DeletionPolicy = r
}

// SetProviderConfigReference of this DatasyncLocationNfs.
func (mg *DatasyncLocationNfs) SetProviderConfigReference(r *xpv1.Reference) {
	mg.Spec.ProviderConfigReference = r
}

/*
SetProviderReference of this DatasyncLocationNfs.
Deprecated: Use SetProviderConfigReference.
*/
func (mg *DatasyncLocationNfs) SetProviderReference(r *xpv1.Reference) {
	mg.Spec.ProviderReference = r
}

// SetWriteConnectionSecretToReference of this DatasyncLocationNfs.
func (mg *DatasyncLocationNfs) SetWriteConnectionSecretToReference(r *xpv1.SecretReference) {
	mg.Spec.WriteConnectionSecretToReference = r
}

// GetCondition of this DatasyncLocationS3.
func (mg *DatasyncLocationS3) GetCondition(ct xpv1.ConditionType) xpv1.Condition {
	return mg.Status.GetCondition(ct)
}

// GetDeletionPolicy of this DatasyncLocationS3.
func (mg *DatasyncLocationS3) GetDeletionPolicy() xpv1.DeletionPolicy {
	return mg.Spec.DeletionPolicy
}

// GetProviderConfigReference of this DatasyncLocationS3.
func (mg *DatasyncLocationS3) GetProviderConfigReference() *xpv1.Reference {
	return mg.Spec.ProviderConfigReference
}

/*
GetProviderReference of this DatasyncLocationS3.
Deprecated: Use GetProviderConfigReference.
*/
func (mg *DatasyncLocationS3) GetProviderReference() *xpv1.Reference {
	return mg.Spec.ProviderReference
}

// GetWriteConnectionSecretToReference of this DatasyncLocationS3.
func (mg *DatasyncLocationS3) GetWriteConnectionSecretToReference() *xpv1.SecretReference {
	return mg.Spec.WriteConnectionSecretToReference
}

// SetConditions of this DatasyncLocationS3.
func (mg *DatasyncLocationS3) SetConditions(c ...xpv1.Condition) {
	mg.Status.SetConditions(c...)
}

// SetDeletionPolicy of this DatasyncLocationS3.
func (mg *DatasyncLocationS3) SetDeletionPolicy(r xpv1.DeletionPolicy) {
	mg.Spec.DeletionPolicy = r
}

// SetProviderConfigReference of this DatasyncLocationS3.
func (mg *DatasyncLocationS3) SetProviderConfigReference(r *xpv1.Reference) {
	mg.Spec.ProviderConfigReference = r
}

/*
SetProviderReference of this DatasyncLocationS3.
Deprecated: Use SetProviderConfigReference.
*/
func (mg *DatasyncLocationS3) SetProviderReference(r *xpv1.Reference) {
	mg.Spec.ProviderReference = r
}

// SetWriteConnectionSecretToReference of this DatasyncLocationS3.
func (mg *DatasyncLocationS3) SetWriteConnectionSecretToReference(r *xpv1.SecretReference) {
	mg.Spec.WriteConnectionSecretToReference = r
}

// GetCondition of this DatasyncLocationSmb.
func (mg *DatasyncLocationSmb) GetCondition(ct xpv1.ConditionType) xpv1.Condition {
	return mg.Status.GetCondition(ct)
}

// GetDeletionPolicy of this DatasyncLocationSmb.
func (mg *DatasyncLocationSmb) GetDeletionPolicy() xpv1.DeletionPolicy {
	return mg.Spec.DeletionPolicy
}

// GetProviderConfigReference of this DatasyncLocationSmb.
func (mg *DatasyncLocationSmb) GetProviderConfigReference() *xpv1.Reference {
	return mg.Spec.ProviderConfigReference
}

/*
GetProviderReference of this DatasyncLocationSmb.
Deprecated: Use GetProviderConfigReference.
*/
func (mg *DatasyncLocationSmb) GetProviderReference() *xpv1.Reference {
	return mg.Spec.ProviderReference
}

// GetWriteConnectionSecretToReference of this DatasyncLocationSmb.
func (mg *DatasyncLocationSmb) GetWriteConnectionSecretToReference() *xpv1.SecretReference {
	return mg.Spec.WriteConnectionSecretToReference
}

// SetConditions of this DatasyncLocationSmb.
func (mg *DatasyncLocationSmb) SetConditions(c ...xpv1.Condition) {
	mg.Status.SetConditions(c...)
}

// SetDeletionPolicy of this DatasyncLocationSmb.
func (mg *DatasyncLocationSmb) SetDeletionPolicy(r xpv1.DeletionPolicy) {
	mg.Spec.DeletionPolicy = r
}

// SetProviderConfigReference of this DatasyncLocationSmb.
func (mg *DatasyncLocationSmb) SetProviderConfigReference(r *xpv1.Reference) {
	mg.Spec.ProviderConfigReference = r
}

/*
SetProviderReference of this DatasyncLocationSmb.
Deprecated: Use SetProviderConfigReference.
*/
func (mg *DatasyncLocationSmb) SetProviderReference(r *xpv1.Reference) {
	mg.Spec.ProviderReference = r
}

// SetWriteConnectionSecretToReference of this DatasyncLocationSmb.
func (mg *DatasyncLocationSmb) SetWriteConnectionSecretToReference(r *xpv1.SecretReference) {
	mg.Spec.WriteConnectionSecretToReference = r
}

// GetCondition of this DatasyncTask.
func (mg *DatasyncTask) GetCondition(ct xpv1.ConditionType) xpv1.Condition {
	return mg.Status.GetCondition(ct)
}

// GetDeletionPolicy of this DatasyncTask.
func (mg *DatasyncTask) GetDeletionPolicy() xpv1.DeletionPolicy {
	return mg.Spec.DeletionPolicy
}

// GetProviderConfigReference of this DatasyncTask.
func (mg *DatasyncTask) GetProviderConfigReference() *xpv1.Reference {
	return mg.Spec.ProviderConfigReference
}

/*
GetProviderReference of this DatasyncTask.
Deprecated: Use GetProviderConfigReference.
*/
func (mg *DatasyncTask) GetProviderReference() *xpv1.Reference {
	return mg.Spec.ProviderReference
}

// GetWriteConnectionSecretToReference of this DatasyncTask.
func (mg *DatasyncTask) GetWriteConnectionSecretToReference() *xpv1.SecretReference {
	return mg.Spec.WriteConnectionSecretToReference
}

// SetConditions of this DatasyncTask.
func (mg *DatasyncTask) SetConditions(c ...xpv1.Condition) {
	mg.Status.SetConditions(c...)
}

// SetDeletionPolicy of this DatasyncTask.
func (mg *DatasyncTask) SetDeletionPolicy(r xpv1.DeletionPolicy) {
	mg.Spec.DeletionPolicy = r
}

// SetProviderConfigReference of this DatasyncTask.
func (mg *DatasyncTask) SetProviderConfigReference(r *xpv1.Reference) {
	mg.Spec.ProviderConfigReference = r
}

/*
SetProviderReference of this DatasyncTask.
Deprecated: Use SetProviderConfigReference.
*/
func (mg *DatasyncTask) SetProviderReference(r *xpv1.Reference) {
	mg.Spec.ProviderReference = r
}

// SetWriteConnectionSecretToReference of this DatasyncTask.
func (mg *DatasyncTask) SetWriteConnectionSecretToReference(r *xpv1.SecretReference) {
	mg.Spec.WriteConnectionSecretToReference = r
}
