/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type RolePolicyObservation struct {
}

type RolePolicyParameters struct {

	// +kubebuilder:validation:Required
	Policy *string `json:"policy" tf:"policy,omitempty"`

	// Region is the region you'd like your resource to be created in.
	// +terrajet:crd:field:TFTag=-
	// +kubebuilder:validation:Required
	Region *string `json:"region" tf:"-,omitempty"`

	// +kubebuilder:validation:Required
	Role *string `json:"role" tf:"role,omitempty"`
}

// RolePolicySpec defines the desired state of RolePolicy
type RolePolicySpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     RolePolicyParameters `json:"forProvider"`
}

// RolePolicyStatus defines the observed state of RolePolicy.
type RolePolicyStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        RolePolicyObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// RolePolicy is the Schema for the RolePolicys API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,tfaws}
type RolePolicy struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              RolePolicySpec   `json:"spec"`
	Status            RolePolicyStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// RolePolicyList contains a list of RolePolicys
type RolePolicyList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []RolePolicy `json:"items"`
}

// Repository type metadata.
var (
	RolePolicyKind             = "RolePolicy"
	RolePolicyGroupKind        = schema.GroupKind{Group: Group, Kind: RolePolicyKind}.String()
	RolePolicyKindAPIVersion   = RolePolicyKind + "." + GroupVersion.String()
	RolePolicyGroupVersionKind = GroupVersion.WithKind(RolePolicyKind)
)

func init() {
	SchemeBuilder.Register(&RolePolicy{}, &RolePolicyList{})
}
