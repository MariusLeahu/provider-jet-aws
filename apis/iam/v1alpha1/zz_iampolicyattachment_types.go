/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type IamPolicyAttachmentObservation struct {
}

type IamPolicyAttachmentParameters struct {

	// +crossplane:generate:reference:type=IamGroup
	// +kubebuilder:validation:Optional
	Groups []*string `json:"groups,omitempty" tf:"groups"`

	// +kubebuilder:validation:Optional
	GroupsRefs []v1.Reference `json:"groupsRefs,omitempty" tf:"-"`

	// +kubebuilder:validation:Optional
	GroupsSelector *v1.Selector `json:"groupsSelector,omitempty" tf:"-"`

	// +kubebuilder:validation:Required
	Name *string `json:"name" tf:"name"`

	// +crossplane:generate:reference:type=IamPolicy
	// +crossplane:generate:reference:extractor=github.com/crossplane-contrib/provider-tf-aws/config/iam.PolicyARNExtractor()
	// +kubebuilder:validation:Optional
	PolicyArn *string `json:"policyArn,omitempty" tf:"policy_arn"`

	// +kubebuilder:validation:Optional
	PolicyArnRef *v1.Reference `json:"policyArnRef,omitempty" tf:"-"`

	// +kubebuilder:validation:Optional
	PolicyArnSelector *v1.Selector `json:"policyArnSelector,omitempty" tf:"-"`

	// Region is the region you'd like your resource to be created in.
	// +terrajet:crd:field:TFTag=-
	// +kubebuilder:validation:Required
	Region *string `json:"region" tf:"-"`

	// +crossplane:generate:reference:type=IamRole
	// +kubebuilder:validation:Optional
	Roles []*string `json:"roles,omitempty" tf:"roles"`

	// +kubebuilder:validation:Optional
	RolesRefs []v1.Reference `json:"rolesRefs,omitempty" tf:"-"`

	// +kubebuilder:validation:Optional
	RolesSelector *v1.Selector `json:"rolesSelector,omitempty" tf:"-"`

	// +crossplane:generate:reference:type=IamUser
	// +kubebuilder:validation:Optional
	Users []*string `json:"users,omitempty" tf:"users"`

	// +kubebuilder:validation:Optional
	UsersRefs []v1.Reference `json:"usersRefs,omitempty" tf:"-"`

	// +kubebuilder:validation:Optional
	UsersSelector *v1.Selector `json:"usersSelector,omitempty" tf:"-"`
}

// IamPolicyAttachmentSpec defines the desired state of IamPolicyAttachment
type IamPolicyAttachmentSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     IamPolicyAttachmentParameters `json:"forProvider"`
}

// IamPolicyAttachmentStatus defines the observed state of IamPolicyAttachment.
type IamPolicyAttachmentStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        IamPolicyAttachmentObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// IamPolicyAttachment is the Schema for the IamPolicyAttachments API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,tfaws}
type IamPolicyAttachment struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              IamPolicyAttachmentSpec   `json:"spec"`
	Status            IamPolicyAttachmentStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// IamPolicyAttachmentList contains a list of IamPolicyAttachments
type IamPolicyAttachmentList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []IamPolicyAttachment `json:"items"`
}

// Repository type metadata.
var (
	IamPolicyAttachmentKind             = "IamPolicyAttachment"
	IamPolicyAttachmentGroupKind        = schema.GroupKind{Group: Group, Kind: IamPolicyAttachmentKind}.String()
	IamPolicyAttachmentKindAPIVersion   = IamPolicyAttachmentKind + "." + GroupVersion.String()
	IamPolicyAttachmentGroupVersionKind = GroupVersion.WithKind(IamPolicyAttachmentKind)
)

func init() {
	SchemeBuilder.Register(&IamPolicyAttachment{}, &IamPolicyAttachmentList{})
}
