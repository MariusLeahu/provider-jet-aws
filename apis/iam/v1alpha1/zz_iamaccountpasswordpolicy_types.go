/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	xpv1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"
)

type IamAccountPasswordPolicyObservation struct {
	ExpirePasswords bool `json:"expirePasswords,omitempty" tf:"expire_passwords"`
}

type IamAccountPasswordPolicyParameters struct {

	// +kubebuilder:validation:Optional
	AllowUsersToChangePassword *bool `json:"allowUsersToChangePassword,omitempty" tf:"allow_users_to_change_password"`

	// +kubebuilder:validation:Optional
	HardExpiry *bool `json:"hardExpiry,omitempty" tf:"hard_expiry"`

	// +kubebuilder:validation:Optional
	MaxPasswordAge *int64 `json:"maxPasswordAge,omitempty" tf:"max_password_age"`

	// +kubebuilder:validation:Optional
	MinimumPasswordLength *int64 `json:"minimumPasswordLength,omitempty" tf:"minimum_password_length"`

	// +kubebuilder:validation:Optional
	PasswordReusePrevention *int64 `json:"passwordReusePrevention,omitempty" tf:"password_reuse_prevention"`

	// Region is the region you'd like your resource to be created in.
	// +terrajet:crd:field:TFTag=-
	// +kubebuilder:validation:Required
	Region string `json:"region" tf:"-"`

	// +kubebuilder:validation:Optional
	RequireLowercaseCharacters *bool `json:"requireLowercaseCharacters,omitempty" tf:"require_lowercase_characters"`

	// +kubebuilder:validation:Optional
	RequireNumbers *bool `json:"requireNumbers,omitempty" tf:"require_numbers"`

	// +kubebuilder:validation:Optional
	RequireSymbols *bool `json:"requireSymbols,omitempty" tf:"require_symbols"`

	// +kubebuilder:validation:Optional
	RequireUppercaseCharacters *bool `json:"requireUppercaseCharacters,omitempty" tf:"require_uppercase_characters"`
}

// IamAccountPasswordPolicySpec defines the desired state of IamAccountPasswordPolicy
type IamAccountPasswordPolicySpec struct {
	xpv1.ResourceSpec `json:",inline"`
	ForProvider       IamAccountPasswordPolicyParameters `json:"forProvider"`
}

// IamAccountPasswordPolicyStatus defines the observed state of IamAccountPasswordPolicy.
type IamAccountPasswordPolicyStatus struct {
	xpv1.ResourceStatus `json:",inline"`
	AtProvider          IamAccountPasswordPolicyObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// IamAccountPasswordPolicy is the Schema for the IamAccountPasswordPolicys API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,tfaws}
type IamAccountPasswordPolicy struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              IamAccountPasswordPolicySpec   `json:"spec"`
	Status            IamAccountPasswordPolicyStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// IamAccountPasswordPolicyList contains a list of IamAccountPasswordPolicys
type IamAccountPasswordPolicyList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []IamAccountPasswordPolicy `json:"items"`
}

// Repository type metadata.
var (
	IamAccountPasswordPolicyKind             = "IamAccountPasswordPolicy"
	IamAccountPasswordPolicyGroupKind        = schema.GroupKind{Group: Group, Kind: IamAccountPasswordPolicyKind}.String()
	IamAccountPasswordPolicyKindAPIVersion   = IamAccountPasswordPolicyKind + "." + GroupVersion.String()
	IamAccountPasswordPolicyGroupVersionKind = GroupVersion.WithKind(IamAccountPasswordPolicyKind)
)

func init() {
	SchemeBuilder.Register(&IamAccountPasswordPolicy{}, &IamAccountPasswordPolicyList{})
}
