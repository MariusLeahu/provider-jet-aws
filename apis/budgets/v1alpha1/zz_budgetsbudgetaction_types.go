/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	xpv1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"
)

type ActionThresholdObservation struct {
}

type ActionThresholdParameters struct {

	// +kubebuilder:validation:Required
	ActionThresholdType string `json:"actionThresholdType" tf:"action_threshold_type"`

	// +kubebuilder:validation:Required
	ActionThresholdValue float64 `json:"actionThresholdValue" tf:"action_threshold_value"`
}

type BudgetsBudgetActionObservation struct {
	ActionID string `json:"actionId" tf:"action_id"`

	Arn string `json:"arn" tf:"arn"`

	Status string `json:"status" tf:"status"`
}

type BudgetsBudgetActionParameters struct {

	// +kubebuilder:validation:Optional
	AccountID *string `json:"accountId,omitempty" tf:"account_id"`

	// +kubebuilder:validation:Required
	ActionThreshold []ActionThresholdParameters `json:"actionThreshold" tf:"action_threshold"`

	// +kubebuilder:validation:Required
	ActionType string `json:"actionType" tf:"action_type"`

	// +kubebuilder:validation:Required
	ApprovalModel string `json:"approvalModel" tf:"approval_model"`

	// +kubebuilder:validation:Required
	BudgetName string `json:"budgetName" tf:"budget_name"`

	// +kubebuilder:validation:Required
	Definition []DefinitionParameters `json:"definition" tf:"definition"`

	// +kubebuilder:validation:Required
	ExecutionRoleArn string `json:"executionRoleArn" tf:"execution_role_arn"`

	// +kubebuilder:validation:Required
	NotificationType string `json:"notificationType" tf:"notification_type"`

	// Region is the region you'd like your resource to be created in.
	// +terrajet:crd:field:TFTag=-
	// +kubebuilder:validation:Required
	Region string `json:"region" tf:"-"`

	// +kubebuilder:validation:Required
	Subscriber []SubscriberParameters `json:"subscriber" tf:"subscriber"`
}

type DefinitionObservation struct {
}

type DefinitionParameters struct {

	// +kubebuilder:validation:Optional
	IamActionDefinition []IamActionDefinitionParameters `json:"iamActionDefinition,omitempty" tf:"iam_action_definition"`

	// +kubebuilder:validation:Optional
	ScpActionDefinition []ScpActionDefinitionParameters `json:"scpActionDefinition,omitempty" tf:"scp_action_definition"`

	// +kubebuilder:validation:Optional
	SsmActionDefinition []SsmActionDefinitionParameters `json:"ssmActionDefinition,omitempty" tf:"ssm_action_definition"`
}

type IamActionDefinitionObservation struct {
}

type IamActionDefinitionParameters struct {

	// +kubebuilder:validation:Optional
	Groups []string `json:"groups,omitempty" tf:"groups"`

	// +kubebuilder:validation:Required
	PolicyArn string `json:"policyArn" tf:"policy_arn"`

	// +kubebuilder:validation:Optional
	Roles []string `json:"roles,omitempty" tf:"roles"`

	// +kubebuilder:validation:Optional
	Users []string `json:"users,omitempty" tf:"users"`
}

type ScpActionDefinitionObservation struct {
}

type ScpActionDefinitionParameters struct {

	// +kubebuilder:validation:Required
	PolicyID string `json:"policyId" tf:"policy_id"`

	// +kubebuilder:validation:Required
	TargetIds []string `json:"targetIds" tf:"target_ids"`
}

type SsmActionDefinitionObservation struct {
}

type SsmActionDefinitionParameters struct {

	// +kubebuilder:validation:Required
	ActionSubType string `json:"actionSubType" tf:"action_sub_type"`

	// +kubebuilder:validation:Required
	InstanceIds []string `json:"instanceIds" tf:"instance_ids"`

	// +kubebuilder:validation:Required
	Region string `json:"region" tf:"region"`
}

type SubscriberObservation struct {
}

type SubscriberParameters struct {

	// +kubebuilder:validation:Required
	Address string `json:"address" tf:"address"`

	// +kubebuilder:validation:Required
	SubscriptionType string `json:"subscriptionType" tf:"subscription_type"`
}

// BudgetsBudgetActionSpec defines the desired state of BudgetsBudgetAction
type BudgetsBudgetActionSpec struct {
	xpv1.ResourceSpec `json:",inline"`
	ForProvider       BudgetsBudgetActionParameters `json:"forProvider"`
}

// BudgetsBudgetActionStatus defines the observed state of BudgetsBudgetAction.
type BudgetsBudgetActionStatus struct {
	xpv1.ResourceStatus `json:",inline"`
	AtProvider          BudgetsBudgetActionObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// BudgetsBudgetAction is the Schema for the BudgetsBudgetActions API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,tfaws}
type BudgetsBudgetAction struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              BudgetsBudgetActionSpec   `json:"spec"`
	Status            BudgetsBudgetActionStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// BudgetsBudgetActionList contains a list of BudgetsBudgetActions
type BudgetsBudgetActionList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []BudgetsBudgetAction `json:"items"`
}

// Repository type metadata.
var (
	BudgetsBudgetActionKind             = "BudgetsBudgetAction"
	BudgetsBudgetActionGroupKind        = schema.GroupKind{Group: Group, Kind: BudgetsBudgetActionKind}.String()
	BudgetsBudgetActionKindAPIVersion   = BudgetsBudgetActionKind + "." + GroupVersion.String()
	BudgetsBudgetActionGroupVersionKind = GroupVersion.WithKind(BudgetsBudgetActionKind)
)

func init() {
	SchemeBuilder.Register(&BudgetsBudgetAction{}, &BudgetsBudgetActionList{})
}
