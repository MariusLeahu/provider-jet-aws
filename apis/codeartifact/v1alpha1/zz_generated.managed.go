/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/
// Code generated by angryjet. DO NOT EDIT.

package v1alpha1

import xpv1 "github.com/crossplane/crossplane-runtime/apis/common/v1"

// GetCondition of this CodeartifactDomain.
func (mg *CodeartifactDomain) GetCondition(ct xpv1.ConditionType) xpv1.Condition {
	return mg.Status.GetCondition(ct)
}

// GetDeletionPolicy of this CodeartifactDomain.
func (mg *CodeartifactDomain) GetDeletionPolicy() xpv1.DeletionPolicy {
	return mg.Spec.DeletionPolicy
}

// GetProviderConfigReference of this CodeartifactDomain.
func (mg *CodeartifactDomain) GetProviderConfigReference() *xpv1.Reference {
	return mg.Spec.ProviderConfigReference
}

/*
GetProviderReference of this CodeartifactDomain.
Deprecated: Use GetProviderConfigReference.
*/
func (mg *CodeartifactDomain) GetProviderReference() *xpv1.Reference {
	return mg.Spec.ProviderReference
}

// GetWriteConnectionSecretToReference of this CodeartifactDomain.
func (mg *CodeartifactDomain) GetWriteConnectionSecretToReference() *xpv1.SecretReference {
	return mg.Spec.WriteConnectionSecretToReference
}

// SetConditions of this CodeartifactDomain.
func (mg *CodeartifactDomain) SetConditions(c ...xpv1.Condition) {
	mg.Status.SetConditions(c...)
}

// SetDeletionPolicy of this CodeartifactDomain.
func (mg *CodeartifactDomain) SetDeletionPolicy(r xpv1.DeletionPolicy) {
	mg.Spec.DeletionPolicy = r
}

// SetProviderConfigReference of this CodeartifactDomain.
func (mg *CodeartifactDomain) SetProviderConfigReference(r *xpv1.Reference) {
	mg.Spec.ProviderConfigReference = r
}

/*
SetProviderReference of this CodeartifactDomain.
Deprecated: Use SetProviderConfigReference.
*/
func (mg *CodeartifactDomain) SetProviderReference(r *xpv1.Reference) {
	mg.Spec.ProviderReference = r
}

// SetWriteConnectionSecretToReference of this CodeartifactDomain.
func (mg *CodeartifactDomain) SetWriteConnectionSecretToReference(r *xpv1.SecretReference) {
	mg.Spec.WriteConnectionSecretToReference = r
}

// GetCondition of this CodeartifactDomainPermissionsPolicy.
func (mg *CodeartifactDomainPermissionsPolicy) GetCondition(ct xpv1.ConditionType) xpv1.Condition {
	return mg.Status.GetCondition(ct)
}

// GetDeletionPolicy of this CodeartifactDomainPermissionsPolicy.
func (mg *CodeartifactDomainPermissionsPolicy) GetDeletionPolicy() xpv1.DeletionPolicy {
	return mg.Spec.DeletionPolicy
}

// GetProviderConfigReference of this CodeartifactDomainPermissionsPolicy.
func (mg *CodeartifactDomainPermissionsPolicy) GetProviderConfigReference() *xpv1.Reference {
	return mg.Spec.ProviderConfigReference
}

/*
GetProviderReference of this CodeartifactDomainPermissionsPolicy.
Deprecated: Use GetProviderConfigReference.
*/
func (mg *CodeartifactDomainPermissionsPolicy) GetProviderReference() *xpv1.Reference {
	return mg.Spec.ProviderReference
}

// GetWriteConnectionSecretToReference of this CodeartifactDomainPermissionsPolicy.
func (mg *CodeartifactDomainPermissionsPolicy) GetWriteConnectionSecretToReference() *xpv1.SecretReference {
	return mg.Spec.WriteConnectionSecretToReference
}

// SetConditions of this CodeartifactDomainPermissionsPolicy.
func (mg *CodeartifactDomainPermissionsPolicy) SetConditions(c ...xpv1.Condition) {
	mg.Status.SetConditions(c...)
}

// SetDeletionPolicy of this CodeartifactDomainPermissionsPolicy.
func (mg *CodeartifactDomainPermissionsPolicy) SetDeletionPolicy(r xpv1.DeletionPolicy) {
	mg.Spec.DeletionPolicy = r
}

// SetProviderConfigReference of this CodeartifactDomainPermissionsPolicy.
func (mg *CodeartifactDomainPermissionsPolicy) SetProviderConfigReference(r *xpv1.Reference) {
	mg.Spec.ProviderConfigReference = r
}

/*
SetProviderReference of this CodeartifactDomainPermissionsPolicy.
Deprecated: Use SetProviderConfigReference.
*/
func (mg *CodeartifactDomainPermissionsPolicy) SetProviderReference(r *xpv1.Reference) {
	mg.Spec.ProviderReference = r
}

// SetWriteConnectionSecretToReference of this CodeartifactDomainPermissionsPolicy.
func (mg *CodeartifactDomainPermissionsPolicy) SetWriteConnectionSecretToReference(r *xpv1.SecretReference) {
	mg.Spec.WriteConnectionSecretToReference = r
}

// GetCondition of this CodeartifactRepository.
func (mg *CodeartifactRepository) GetCondition(ct xpv1.ConditionType) xpv1.Condition {
	return mg.Status.GetCondition(ct)
}

// GetDeletionPolicy of this CodeartifactRepository.
func (mg *CodeartifactRepository) GetDeletionPolicy() xpv1.DeletionPolicy {
	return mg.Spec.DeletionPolicy
}

// GetProviderConfigReference of this CodeartifactRepository.
func (mg *CodeartifactRepository) GetProviderConfigReference() *xpv1.Reference {
	return mg.Spec.ProviderConfigReference
}

/*
GetProviderReference of this CodeartifactRepository.
Deprecated: Use GetProviderConfigReference.
*/
func (mg *CodeartifactRepository) GetProviderReference() *xpv1.Reference {
	return mg.Spec.ProviderReference
}

// GetWriteConnectionSecretToReference of this CodeartifactRepository.
func (mg *CodeartifactRepository) GetWriteConnectionSecretToReference() *xpv1.SecretReference {
	return mg.Spec.WriteConnectionSecretToReference
}

// SetConditions of this CodeartifactRepository.
func (mg *CodeartifactRepository) SetConditions(c ...xpv1.Condition) {
	mg.Status.SetConditions(c...)
}

// SetDeletionPolicy of this CodeartifactRepository.
func (mg *CodeartifactRepository) SetDeletionPolicy(r xpv1.DeletionPolicy) {
	mg.Spec.DeletionPolicy = r
}

// SetProviderConfigReference of this CodeartifactRepository.
func (mg *CodeartifactRepository) SetProviderConfigReference(r *xpv1.Reference) {
	mg.Spec.ProviderConfigReference = r
}

/*
SetProviderReference of this CodeartifactRepository.
Deprecated: Use SetProviderConfigReference.
*/
func (mg *CodeartifactRepository) SetProviderReference(r *xpv1.Reference) {
	mg.Spec.ProviderReference = r
}

// SetWriteConnectionSecretToReference of this CodeartifactRepository.
func (mg *CodeartifactRepository) SetWriteConnectionSecretToReference(r *xpv1.SecretReference) {
	mg.Spec.WriteConnectionSecretToReference = r
}

// GetCondition of this CodeartifactRepositoryPermissionsPolicy.
func (mg *CodeartifactRepositoryPermissionsPolicy) GetCondition(ct xpv1.ConditionType) xpv1.Condition {
	return mg.Status.GetCondition(ct)
}

// GetDeletionPolicy of this CodeartifactRepositoryPermissionsPolicy.
func (mg *CodeartifactRepositoryPermissionsPolicy) GetDeletionPolicy() xpv1.DeletionPolicy {
	return mg.Spec.DeletionPolicy
}

// GetProviderConfigReference of this CodeartifactRepositoryPermissionsPolicy.
func (mg *CodeartifactRepositoryPermissionsPolicy) GetProviderConfigReference() *xpv1.Reference {
	return mg.Spec.ProviderConfigReference
}

/*
GetProviderReference of this CodeartifactRepositoryPermissionsPolicy.
Deprecated: Use GetProviderConfigReference.
*/
func (mg *CodeartifactRepositoryPermissionsPolicy) GetProviderReference() *xpv1.Reference {
	return mg.Spec.ProviderReference
}

// GetWriteConnectionSecretToReference of this CodeartifactRepositoryPermissionsPolicy.
func (mg *CodeartifactRepositoryPermissionsPolicy) GetWriteConnectionSecretToReference() *xpv1.SecretReference {
	return mg.Spec.WriteConnectionSecretToReference
}

// SetConditions of this CodeartifactRepositoryPermissionsPolicy.
func (mg *CodeartifactRepositoryPermissionsPolicy) SetConditions(c ...xpv1.Condition) {
	mg.Status.SetConditions(c...)
}

// SetDeletionPolicy of this CodeartifactRepositoryPermissionsPolicy.
func (mg *CodeartifactRepositoryPermissionsPolicy) SetDeletionPolicy(r xpv1.DeletionPolicy) {
	mg.Spec.DeletionPolicy = r
}

// SetProviderConfigReference of this CodeartifactRepositoryPermissionsPolicy.
func (mg *CodeartifactRepositoryPermissionsPolicy) SetProviderConfigReference(r *xpv1.Reference) {
	mg.Spec.ProviderConfigReference = r
}

/*
SetProviderReference of this CodeartifactRepositoryPermissionsPolicy.
Deprecated: Use SetProviderConfigReference.
*/
func (mg *CodeartifactRepositoryPermissionsPolicy) SetProviderReference(r *xpv1.Reference) {
	mg.Spec.ProviderReference = r
}

// SetWriteConnectionSecretToReference of this CodeartifactRepositoryPermissionsPolicy.
func (mg *CodeartifactRepositoryPermissionsPolicy) SetWriteConnectionSecretToReference(r *xpv1.SecretReference) {
	mg.Spec.WriteConnectionSecretToReference = r
}
