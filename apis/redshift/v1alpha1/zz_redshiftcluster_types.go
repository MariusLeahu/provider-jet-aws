/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	xpv1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"
)

type LoggingObservation struct {
}

type LoggingParameters struct {

	// +kubebuilder:validation:Optional
	BucketName *string `json:"bucketName,omitempty" tf:"bucket_name"`

	// +kubebuilder:validation:Required
	Enable bool `json:"enable" tf:"enable"`

	// +kubebuilder:validation:Optional
	S3KeyPrefix *string `json:"s3KeyPrefix,omitempty" tf:"s3_key_prefix"`
}

type RedshiftClusterObservation struct {
	Arn string `json:"arn" tf:"arn"`

	DNSName string `json:"dnsName" tf:"dns_name"`
}

type RedshiftClusterParameters struct {

	// +kubebuilder:validation:Optional
	AllowVersionUpgrade *bool `json:"allowVersionUpgrade,omitempty" tf:"allow_version_upgrade"`

	// +kubebuilder:validation:Optional
	AutomatedSnapshotRetentionPeriod *int64 `json:"automatedSnapshotRetentionPeriod,omitempty" tf:"automated_snapshot_retention_period"`

	// +kubebuilder:validation:Optional
	AvailabilityZone *string `json:"availabilityZone,omitempty" tf:"availability_zone"`

	// +kubebuilder:validation:Required
	ClusterIdentifier string `json:"clusterIdentifier" tf:"cluster_identifier"`

	// +kubebuilder:validation:Optional
	ClusterParameterGroupName *string `json:"clusterParameterGroupName,omitempty" tf:"cluster_parameter_group_name"`

	// +kubebuilder:validation:Optional
	ClusterPublicKey *string `json:"clusterPublicKey,omitempty" tf:"cluster_public_key"`

	// +kubebuilder:validation:Optional
	ClusterRevisionNumber *string `json:"clusterRevisionNumber,omitempty" tf:"cluster_revision_number"`

	// +kubebuilder:validation:Optional
	ClusterSecurityGroups []string `json:"clusterSecurityGroups,omitempty" tf:"cluster_security_groups"`

	// +kubebuilder:validation:Optional
	ClusterSubnetGroupName *string `json:"clusterSubnetGroupName,omitempty" tf:"cluster_subnet_group_name"`

	// +kubebuilder:validation:Optional
	ClusterType *string `json:"clusterType,omitempty" tf:"cluster_type"`

	// +kubebuilder:validation:Optional
	ClusterVersion *string `json:"clusterVersion,omitempty" tf:"cluster_version"`

	// +kubebuilder:validation:Optional
	DatabaseName *string `json:"databaseName,omitempty" tf:"database_name"`

	// +kubebuilder:validation:Optional
	ElasticIP *string `json:"elasticIp,omitempty" tf:"elastic_ip"`

	// +kubebuilder:validation:Optional
	Encrypted *bool `json:"encrypted,omitempty" tf:"encrypted"`

	// +kubebuilder:validation:Optional
	Endpoint *string `json:"endpoint,omitempty" tf:"endpoint"`

	// +kubebuilder:validation:Optional
	EnhancedVpcRouting *bool `json:"enhancedVpcRouting,omitempty" tf:"enhanced_vpc_routing"`

	// +kubebuilder:validation:Optional
	FinalSnapshotIdentifier *string `json:"finalSnapshotIdentifier,omitempty" tf:"final_snapshot_identifier"`

	// +kubebuilder:validation:Optional
	IamRoles []string `json:"iamRoles,omitempty" tf:"iam_roles"`

	// +kubebuilder:validation:Optional
	KmsKeyID *string `json:"kmsKeyId,omitempty" tf:"kms_key_id"`

	// +kubebuilder:validation:Optional
	Logging []LoggingParameters `json:"logging,omitempty" tf:"logging"`

	// +kubebuilder:validation:Optional
	MasterPassword *string `json:"masterPassword,omitempty" tf:"master_password"`

	// +kubebuilder:validation:Optional
	MasterUsername *string `json:"masterUsername,omitempty" tf:"master_username"`

	// +kubebuilder:validation:Required
	NodeType string `json:"nodeType" tf:"node_type"`

	// +kubebuilder:validation:Optional
	NumberOfNodes *int64 `json:"numberOfNodes,omitempty" tf:"number_of_nodes"`

	// +kubebuilder:validation:Optional
	OwnerAccount *string `json:"ownerAccount,omitempty" tf:"owner_account"`

	// +kubebuilder:validation:Optional
	Port *int64 `json:"port,omitempty" tf:"port"`

	// +kubebuilder:validation:Optional
	PreferredMaintenanceWindow *string `json:"preferredMaintenanceWindow,omitempty" tf:"preferred_maintenance_window"`

	// +kubebuilder:validation:Optional
	PubliclyAccessible *bool `json:"publiclyAccessible,omitempty" tf:"publicly_accessible"`

	// Region is the region you'd like your resource to be created in.
	// +terrajet:crd:field:TFTag=-
	// +kubebuilder:validation:Required
	Region string `json:"region" tf:"-"`

	// +kubebuilder:validation:Optional
	SkipFinalSnapshot *bool `json:"skipFinalSnapshot,omitempty" tf:"skip_final_snapshot"`

	// +kubebuilder:validation:Optional
	SnapshotClusterIdentifier *string `json:"snapshotClusterIdentifier,omitempty" tf:"snapshot_cluster_identifier"`

	// +kubebuilder:validation:Optional
	SnapshotCopy []SnapshotCopyParameters `json:"snapshotCopy,omitempty" tf:"snapshot_copy"`

	// +kubebuilder:validation:Optional
	SnapshotIdentifier *string `json:"snapshotIdentifier,omitempty" tf:"snapshot_identifier"`

	// +kubebuilder:validation:Optional
	Tags map[string]string `json:"tags,omitempty" tf:"tags"`

	// +kubebuilder:validation:Optional
	TagsAll map[string]string `json:"tagsAll,omitempty" tf:"tags_all"`

	// +kubebuilder:validation:Optional
	VpcSecurityGroupIds []string `json:"vpcSecurityGroupIds,omitempty" tf:"vpc_security_group_ids"`
}

type SnapshotCopyObservation struct {
}

type SnapshotCopyParameters struct {

	// +kubebuilder:validation:Required
	DestinationRegion string `json:"destinationRegion" tf:"destination_region"`

	// +kubebuilder:validation:Optional
	GrantName *string `json:"grantName,omitempty" tf:"grant_name"`

	// +kubebuilder:validation:Optional
	RetentionPeriod *int64 `json:"retentionPeriod,omitempty" tf:"retention_period"`
}

// RedshiftClusterSpec defines the desired state of RedshiftCluster
type RedshiftClusterSpec struct {
	xpv1.ResourceSpec `json:",inline"`
	ForProvider       RedshiftClusterParameters `json:"forProvider"`
}

// RedshiftClusterStatus defines the observed state of RedshiftCluster.
type RedshiftClusterStatus struct {
	xpv1.ResourceStatus `json:",inline"`
	AtProvider          RedshiftClusterObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// RedshiftCluster is the Schema for the RedshiftClusters API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,tfaws}
type RedshiftCluster struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              RedshiftClusterSpec   `json:"spec"`
	Status            RedshiftClusterStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// RedshiftClusterList contains a list of RedshiftClusters
type RedshiftClusterList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []RedshiftCluster `json:"items"`
}

// Repository type metadata.
var (
	RedshiftClusterKind             = "RedshiftCluster"
	RedshiftClusterGroupKind        = schema.GroupKind{Group: Group, Kind: RedshiftClusterKind}.String()
	RedshiftClusterKindAPIVersion   = RedshiftClusterKind + "." + GroupVersion.String()
	RedshiftClusterGroupVersionKind = GroupVersion.WithKind(RedshiftClusterKind)
)

func init() {
	SchemeBuilder.Register(&RedshiftCluster{}, &RedshiftClusterList{})
}
