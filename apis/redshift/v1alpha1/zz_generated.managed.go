/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/
// Code generated by angryjet. DO NOT EDIT.

package v1alpha1

import xpv1 "github.com/crossplane/crossplane-runtime/apis/common/v1"

// GetCondition of this RedshiftCluster.
func (mg *RedshiftCluster) GetCondition(ct xpv1.ConditionType) xpv1.Condition {
	return mg.Status.GetCondition(ct)
}

// GetDeletionPolicy of this RedshiftCluster.
func (mg *RedshiftCluster) GetDeletionPolicy() xpv1.DeletionPolicy {
	return mg.Spec.DeletionPolicy
}

// GetProviderConfigReference of this RedshiftCluster.
func (mg *RedshiftCluster) GetProviderConfigReference() *xpv1.Reference {
	return mg.Spec.ProviderConfigReference
}

/*
GetProviderReference of this RedshiftCluster.
Deprecated: Use GetProviderConfigReference.
*/
func (mg *RedshiftCluster) GetProviderReference() *xpv1.Reference {
	return mg.Spec.ProviderReference
}

// GetWriteConnectionSecretToReference of this RedshiftCluster.
func (mg *RedshiftCluster) GetWriteConnectionSecretToReference() *xpv1.SecretReference {
	return mg.Spec.WriteConnectionSecretToReference
}

// SetConditions of this RedshiftCluster.
func (mg *RedshiftCluster) SetConditions(c ...xpv1.Condition) {
	mg.Status.SetConditions(c...)
}

// SetDeletionPolicy of this RedshiftCluster.
func (mg *RedshiftCluster) SetDeletionPolicy(r xpv1.DeletionPolicy) {
	mg.Spec.DeletionPolicy = r
}

// SetProviderConfigReference of this RedshiftCluster.
func (mg *RedshiftCluster) SetProviderConfigReference(r *xpv1.Reference) {
	mg.Spec.ProviderConfigReference = r
}

/*
SetProviderReference of this RedshiftCluster.
Deprecated: Use SetProviderConfigReference.
*/
func (mg *RedshiftCluster) SetProviderReference(r *xpv1.Reference) {
	mg.Spec.ProviderReference = r
}

// SetWriteConnectionSecretToReference of this RedshiftCluster.
func (mg *RedshiftCluster) SetWriteConnectionSecretToReference(r *xpv1.SecretReference) {
	mg.Spec.WriteConnectionSecretToReference = r
}

// GetCondition of this RedshiftEventSubscription.
func (mg *RedshiftEventSubscription) GetCondition(ct xpv1.ConditionType) xpv1.Condition {
	return mg.Status.GetCondition(ct)
}

// GetDeletionPolicy of this RedshiftEventSubscription.
func (mg *RedshiftEventSubscription) GetDeletionPolicy() xpv1.DeletionPolicy {
	return mg.Spec.DeletionPolicy
}

// GetProviderConfigReference of this RedshiftEventSubscription.
func (mg *RedshiftEventSubscription) GetProviderConfigReference() *xpv1.Reference {
	return mg.Spec.ProviderConfigReference
}

/*
GetProviderReference of this RedshiftEventSubscription.
Deprecated: Use GetProviderConfigReference.
*/
func (mg *RedshiftEventSubscription) GetProviderReference() *xpv1.Reference {
	return mg.Spec.ProviderReference
}

// GetWriteConnectionSecretToReference of this RedshiftEventSubscription.
func (mg *RedshiftEventSubscription) GetWriteConnectionSecretToReference() *xpv1.SecretReference {
	return mg.Spec.WriteConnectionSecretToReference
}

// SetConditions of this RedshiftEventSubscription.
func (mg *RedshiftEventSubscription) SetConditions(c ...xpv1.Condition) {
	mg.Status.SetConditions(c...)
}

// SetDeletionPolicy of this RedshiftEventSubscription.
func (mg *RedshiftEventSubscription) SetDeletionPolicy(r xpv1.DeletionPolicy) {
	mg.Spec.DeletionPolicy = r
}

// SetProviderConfigReference of this RedshiftEventSubscription.
func (mg *RedshiftEventSubscription) SetProviderConfigReference(r *xpv1.Reference) {
	mg.Spec.ProviderConfigReference = r
}

/*
SetProviderReference of this RedshiftEventSubscription.
Deprecated: Use SetProviderConfigReference.
*/
func (mg *RedshiftEventSubscription) SetProviderReference(r *xpv1.Reference) {
	mg.Spec.ProviderReference = r
}

// SetWriteConnectionSecretToReference of this RedshiftEventSubscription.
func (mg *RedshiftEventSubscription) SetWriteConnectionSecretToReference(r *xpv1.SecretReference) {
	mg.Spec.WriteConnectionSecretToReference = r
}

// GetCondition of this RedshiftParameterGroup.
func (mg *RedshiftParameterGroup) GetCondition(ct xpv1.ConditionType) xpv1.Condition {
	return mg.Status.GetCondition(ct)
}

// GetDeletionPolicy of this RedshiftParameterGroup.
func (mg *RedshiftParameterGroup) GetDeletionPolicy() xpv1.DeletionPolicy {
	return mg.Spec.DeletionPolicy
}

// GetProviderConfigReference of this RedshiftParameterGroup.
func (mg *RedshiftParameterGroup) GetProviderConfigReference() *xpv1.Reference {
	return mg.Spec.ProviderConfigReference
}

/*
GetProviderReference of this RedshiftParameterGroup.
Deprecated: Use GetProviderConfigReference.
*/
func (mg *RedshiftParameterGroup) GetProviderReference() *xpv1.Reference {
	return mg.Spec.ProviderReference
}

// GetWriteConnectionSecretToReference of this RedshiftParameterGroup.
func (mg *RedshiftParameterGroup) GetWriteConnectionSecretToReference() *xpv1.SecretReference {
	return mg.Spec.WriteConnectionSecretToReference
}

// SetConditions of this RedshiftParameterGroup.
func (mg *RedshiftParameterGroup) SetConditions(c ...xpv1.Condition) {
	mg.Status.SetConditions(c...)
}

// SetDeletionPolicy of this RedshiftParameterGroup.
func (mg *RedshiftParameterGroup) SetDeletionPolicy(r xpv1.DeletionPolicy) {
	mg.Spec.DeletionPolicy = r
}

// SetProviderConfigReference of this RedshiftParameterGroup.
func (mg *RedshiftParameterGroup) SetProviderConfigReference(r *xpv1.Reference) {
	mg.Spec.ProviderConfigReference = r
}

/*
SetProviderReference of this RedshiftParameterGroup.
Deprecated: Use SetProviderConfigReference.
*/
func (mg *RedshiftParameterGroup) SetProviderReference(r *xpv1.Reference) {
	mg.Spec.ProviderReference = r
}

// SetWriteConnectionSecretToReference of this RedshiftParameterGroup.
func (mg *RedshiftParameterGroup) SetWriteConnectionSecretToReference(r *xpv1.SecretReference) {
	mg.Spec.WriteConnectionSecretToReference = r
}

// GetCondition of this RedshiftSecurityGroup.
func (mg *RedshiftSecurityGroup) GetCondition(ct xpv1.ConditionType) xpv1.Condition {
	return mg.Status.GetCondition(ct)
}

// GetDeletionPolicy of this RedshiftSecurityGroup.
func (mg *RedshiftSecurityGroup) GetDeletionPolicy() xpv1.DeletionPolicy {
	return mg.Spec.DeletionPolicy
}

// GetProviderConfigReference of this RedshiftSecurityGroup.
func (mg *RedshiftSecurityGroup) GetProviderConfigReference() *xpv1.Reference {
	return mg.Spec.ProviderConfigReference
}

/*
GetProviderReference of this RedshiftSecurityGroup.
Deprecated: Use GetProviderConfigReference.
*/
func (mg *RedshiftSecurityGroup) GetProviderReference() *xpv1.Reference {
	return mg.Spec.ProviderReference
}

// GetWriteConnectionSecretToReference of this RedshiftSecurityGroup.
func (mg *RedshiftSecurityGroup) GetWriteConnectionSecretToReference() *xpv1.SecretReference {
	return mg.Spec.WriteConnectionSecretToReference
}

// SetConditions of this RedshiftSecurityGroup.
func (mg *RedshiftSecurityGroup) SetConditions(c ...xpv1.Condition) {
	mg.Status.SetConditions(c...)
}

// SetDeletionPolicy of this RedshiftSecurityGroup.
func (mg *RedshiftSecurityGroup) SetDeletionPolicy(r xpv1.DeletionPolicy) {
	mg.Spec.DeletionPolicy = r
}

// SetProviderConfigReference of this RedshiftSecurityGroup.
func (mg *RedshiftSecurityGroup) SetProviderConfigReference(r *xpv1.Reference) {
	mg.Spec.ProviderConfigReference = r
}

/*
SetProviderReference of this RedshiftSecurityGroup.
Deprecated: Use SetProviderConfigReference.
*/
func (mg *RedshiftSecurityGroup) SetProviderReference(r *xpv1.Reference) {
	mg.Spec.ProviderReference = r
}

// SetWriteConnectionSecretToReference of this RedshiftSecurityGroup.
func (mg *RedshiftSecurityGroup) SetWriteConnectionSecretToReference(r *xpv1.SecretReference) {
	mg.Spec.WriteConnectionSecretToReference = r
}

// GetCondition of this RedshiftSnapshotCopyGrant.
func (mg *RedshiftSnapshotCopyGrant) GetCondition(ct xpv1.ConditionType) xpv1.Condition {
	return mg.Status.GetCondition(ct)
}

// GetDeletionPolicy of this RedshiftSnapshotCopyGrant.
func (mg *RedshiftSnapshotCopyGrant) GetDeletionPolicy() xpv1.DeletionPolicy {
	return mg.Spec.DeletionPolicy
}

// GetProviderConfigReference of this RedshiftSnapshotCopyGrant.
func (mg *RedshiftSnapshotCopyGrant) GetProviderConfigReference() *xpv1.Reference {
	return mg.Spec.ProviderConfigReference
}

/*
GetProviderReference of this RedshiftSnapshotCopyGrant.
Deprecated: Use GetProviderConfigReference.
*/
func (mg *RedshiftSnapshotCopyGrant) GetProviderReference() *xpv1.Reference {
	return mg.Spec.ProviderReference
}

// GetWriteConnectionSecretToReference of this RedshiftSnapshotCopyGrant.
func (mg *RedshiftSnapshotCopyGrant) GetWriteConnectionSecretToReference() *xpv1.SecretReference {
	return mg.Spec.WriteConnectionSecretToReference
}

// SetConditions of this RedshiftSnapshotCopyGrant.
func (mg *RedshiftSnapshotCopyGrant) SetConditions(c ...xpv1.Condition) {
	mg.Status.SetConditions(c...)
}

// SetDeletionPolicy of this RedshiftSnapshotCopyGrant.
func (mg *RedshiftSnapshotCopyGrant) SetDeletionPolicy(r xpv1.DeletionPolicy) {
	mg.Spec.DeletionPolicy = r
}

// SetProviderConfigReference of this RedshiftSnapshotCopyGrant.
func (mg *RedshiftSnapshotCopyGrant) SetProviderConfigReference(r *xpv1.Reference) {
	mg.Spec.ProviderConfigReference = r
}

/*
SetProviderReference of this RedshiftSnapshotCopyGrant.
Deprecated: Use SetProviderConfigReference.
*/
func (mg *RedshiftSnapshotCopyGrant) SetProviderReference(r *xpv1.Reference) {
	mg.Spec.ProviderReference = r
}

// SetWriteConnectionSecretToReference of this RedshiftSnapshotCopyGrant.
func (mg *RedshiftSnapshotCopyGrant) SetWriteConnectionSecretToReference(r *xpv1.SecretReference) {
	mg.Spec.WriteConnectionSecretToReference = r
}

// GetCondition of this RedshiftSnapshotSchedule.
func (mg *RedshiftSnapshotSchedule) GetCondition(ct xpv1.ConditionType) xpv1.Condition {
	return mg.Status.GetCondition(ct)
}

// GetDeletionPolicy of this RedshiftSnapshotSchedule.
func (mg *RedshiftSnapshotSchedule) GetDeletionPolicy() xpv1.DeletionPolicy {
	return mg.Spec.DeletionPolicy
}

// GetProviderConfigReference of this RedshiftSnapshotSchedule.
func (mg *RedshiftSnapshotSchedule) GetProviderConfigReference() *xpv1.Reference {
	return mg.Spec.ProviderConfigReference
}

/*
GetProviderReference of this RedshiftSnapshotSchedule.
Deprecated: Use GetProviderConfigReference.
*/
func (mg *RedshiftSnapshotSchedule) GetProviderReference() *xpv1.Reference {
	return mg.Spec.ProviderReference
}

// GetWriteConnectionSecretToReference of this RedshiftSnapshotSchedule.
func (mg *RedshiftSnapshotSchedule) GetWriteConnectionSecretToReference() *xpv1.SecretReference {
	return mg.Spec.WriteConnectionSecretToReference
}

// SetConditions of this RedshiftSnapshotSchedule.
func (mg *RedshiftSnapshotSchedule) SetConditions(c ...xpv1.Condition) {
	mg.Status.SetConditions(c...)
}

// SetDeletionPolicy of this RedshiftSnapshotSchedule.
func (mg *RedshiftSnapshotSchedule) SetDeletionPolicy(r xpv1.DeletionPolicy) {
	mg.Spec.DeletionPolicy = r
}

// SetProviderConfigReference of this RedshiftSnapshotSchedule.
func (mg *RedshiftSnapshotSchedule) SetProviderConfigReference(r *xpv1.Reference) {
	mg.Spec.ProviderConfigReference = r
}

/*
SetProviderReference of this RedshiftSnapshotSchedule.
Deprecated: Use SetProviderConfigReference.
*/
func (mg *RedshiftSnapshotSchedule) SetProviderReference(r *xpv1.Reference) {
	mg.Spec.ProviderReference = r
}

// SetWriteConnectionSecretToReference of this RedshiftSnapshotSchedule.
func (mg *RedshiftSnapshotSchedule) SetWriteConnectionSecretToReference(r *xpv1.SecretReference) {
	mg.Spec.WriteConnectionSecretToReference = r
}

// GetCondition of this RedshiftSnapshotScheduleAssociation.
func (mg *RedshiftSnapshotScheduleAssociation) GetCondition(ct xpv1.ConditionType) xpv1.Condition {
	return mg.Status.GetCondition(ct)
}

// GetDeletionPolicy of this RedshiftSnapshotScheduleAssociation.
func (mg *RedshiftSnapshotScheduleAssociation) GetDeletionPolicy() xpv1.DeletionPolicy {
	return mg.Spec.DeletionPolicy
}

// GetProviderConfigReference of this RedshiftSnapshotScheduleAssociation.
func (mg *RedshiftSnapshotScheduleAssociation) GetProviderConfigReference() *xpv1.Reference {
	return mg.Spec.ProviderConfigReference
}

/*
GetProviderReference of this RedshiftSnapshotScheduleAssociation.
Deprecated: Use GetProviderConfigReference.
*/
func (mg *RedshiftSnapshotScheduleAssociation) GetProviderReference() *xpv1.Reference {
	return mg.Spec.ProviderReference
}

// GetWriteConnectionSecretToReference of this RedshiftSnapshotScheduleAssociation.
func (mg *RedshiftSnapshotScheduleAssociation) GetWriteConnectionSecretToReference() *xpv1.SecretReference {
	return mg.Spec.WriteConnectionSecretToReference
}

// SetConditions of this RedshiftSnapshotScheduleAssociation.
func (mg *RedshiftSnapshotScheduleAssociation) SetConditions(c ...xpv1.Condition) {
	mg.Status.SetConditions(c...)
}

// SetDeletionPolicy of this RedshiftSnapshotScheduleAssociation.
func (mg *RedshiftSnapshotScheduleAssociation) SetDeletionPolicy(r xpv1.DeletionPolicy) {
	mg.Spec.DeletionPolicy = r
}

// SetProviderConfigReference of this RedshiftSnapshotScheduleAssociation.
func (mg *RedshiftSnapshotScheduleAssociation) SetProviderConfigReference(r *xpv1.Reference) {
	mg.Spec.ProviderConfigReference = r
}

/*
SetProviderReference of this RedshiftSnapshotScheduleAssociation.
Deprecated: Use SetProviderConfigReference.
*/
func (mg *RedshiftSnapshotScheduleAssociation) SetProviderReference(r *xpv1.Reference) {
	mg.Spec.ProviderReference = r
}

// SetWriteConnectionSecretToReference of this RedshiftSnapshotScheduleAssociation.
func (mg *RedshiftSnapshotScheduleAssociation) SetWriteConnectionSecretToReference(r *xpv1.SecretReference) {
	mg.Spec.WriteConnectionSecretToReference = r
}

// GetCondition of this RedshiftSubnetGroup.
func (mg *RedshiftSubnetGroup) GetCondition(ct xpv1.ConditionType) xpv1.Condition {
	return mg.Status.GetCondition(ct)
}

// GetDeletionPolicy of this RedshiftSubnetGroup.
func (mg *RedshiftSubnetGroup) GetDeletionPolicy() xpv1.DeletionPolicy {
	return mg.Spec.DeletionPolicy
}

// GetProviderConfigReference of this RedshiftSubnetGroup.
func (mg *RedshiftSubnetGroup) GetProviderConfigReference() *xpv1.Reference {
	return mg.Spec.ProviderConfigReference
}

/*
GetProviderReference of this RedshiftSubnetGroup.
Deprecated: Use GetProviderConfigReference.
*/
func (mg *RedshiftSubnetGroup) GetProviderReference() *xpv1.Reference {
	return mg.Spec.ProviderReference
}

// GetWriteConnectionSecretToReference of this RedshiftSubnetGroup.
func (mg *RedshiftSubnetGroup) GetWriteConnectionSecretToReference() *xpv1.SecretReference {
	return mg.Spec.WriteConnectionSecretToReference
}

// SetConditions of this RedshiftSubnetGroup.
func (mg *RedshiftSubnetGroup) SetConditions(c ...xpv1.Condition) {
	mg.Status.SetConditions(c...)
}

// SetDeletionPolicy of this RedshiftSubnetGroup.
func (mg *RedshiftSubnetGroup) SetDeletionPolicy(r xpv1.DeletionPolicy) {
	mg.Spec.DeletionPolicy = r
}

// SetProviderConfigReference of this RedshiftSubnetGroup.
func (mg *RedshiftSubnetGroup) SetProviderConfigReference(r *xpv1.Reference) {
	mg.Spec.ProviderConfigReference = r
}

/*
SetProviderReference of this RedshiftSubnetGroup.
Deprecated: Use SetProviderConfigReference.
*/
func (mg *RedshiftSubnetGroup) SetProviderReference(r *xpv1.Reference) {
	mg.Spec.ProviderReference = r
}

// SetWriteConnectionSecretToReference of this RedshiftSubnetGroup.
func (mg *RedshiftSubnetGroup) SetWriteConnectionSecretToReference(r *xpv1.SecretReference) {
	mg.Spec.WriteConnectionSecretToReference = r
}
