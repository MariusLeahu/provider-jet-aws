/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	xpv1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"
)

type GlobalClusterMembersObservation struct {
	DBClusterArn string `json:"dbClusterArn,omitempty" tf:"db_cluster_arn"`

	IsWriter bool `json:"isWriter,omitempty" tf:"is_writer"`
}

type GlobalClusterMembersParameters struct {
}

type RdsGlobalClusterObservation struct {
	Arn string `json:"arn,omitempty" tf:"arn"`

	GlobalClusterMembers []GlobalClusterMembersObservation `json:"globalClusterMembers,omitempty" tf:"global_cluster_members"`

	GlobalClusterResourceID string `json:"globalClusterResourceId,omitempty" tf:"global_cluster_resource_id"`
}

type RdsGlobalClusterParameters struct {

	// +kubebuilder:validation:Optional
	DatabaseName *string `json:"databaseName,omitempty" tf:"database_name"`

	// +kubebuilder:validation:Optional
	DeletionProtection *bool `json:"deletionProtection,omitempty" tf:"deletion_protection"`

	// +kubebuilder:validation:Optional
	Engine *string `json:"engine,omitempty" tf:"engine"`

	// +kubebuilder:validation:Optional
	EngineVersion *string `json:"engineVersion,omitempty" tf:"engine_version"`

	// +kubebuilder:validation:Optional
	ForceDestroy *bool `json:"forceDestroy,omitempty" tf:"force_destroy"`

	// +kubebuilder:validation:Required
	GlobalClusterIdentifier string `json:"globalClusterIdentifier" tf:"global_cluster_identifier"`

	// Region is the region you'd like your resource to be created in.
	// +terrajet:crd:field:TFTag=-
	// +kubebuilder:validation:Required
	Region string `json:"region" tf:"-"`

	// +kubebuilder:validation:Optional
	SourceDBClusterIdentifier *string `json:"sourceDbClusterIdentifier,omitempty" tf:"source_db_cluster_identifier"`

	// +kubebuilder:validation:Optional
	StorageEncrypted *bool `json:"storageEncrypted,omitempty" tf:"storage_encrypted"`
}

// RdsGlobalClusterSpec defines the desired state of RdsGlobalCluster
type RdsGlobalClusterSpec struct {
	xpv1.ResourceSpec `json:",inline"`
	ForProvider       RdsGlobalClusterParameters `json:"forProvider"`
}

// RdsGlobalClusterStatus defines the observed state of RdsGlobalCluster.
type RdsGlobalClusterStatus struct {
	xpv1.ResourceStatus `json:",inline"`
	AtProvider          RdsGlobalClusterObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// RdsGlobalCluster is the Schema for the RdsGlobalClusters API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,tfaws}
type RdsGlobalCluster struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              RdsGlobalClusterSpec   `json:"spec"`
	Status            RdsGlobalClusterStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// RdsGlobalClusterList contains a list of RdsGlobalClusters
type RdsGlobalClusterList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []RdsGlobalCluster `json:"items"`
}

// Repository type metadata.
var (
	RdsGlobalClusterKind             = "RdsGlobalCluster"
	RdsGlobalClusterGroupKind        = schema.GroupKind{Group: Group, Kind: RdsGlobalClusterKind}.String()
	RdsGlobalClusterKindAPIVersion   = RdsGlobalClusterKind + "." + GroupVersion.String()
	RdsGlobalClusterGroupVersionKind = GroupVersion.WithKind(RdsGlobalClusterKind)
)

func init() {
	SchemeBuilder.Register(&RdsGlobalCluster{}, &RdsGlobalClusterList{})
}
