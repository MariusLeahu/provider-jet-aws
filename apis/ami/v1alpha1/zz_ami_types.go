/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	xpv1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"
)

type AmiObservation struct {
	Arn string `json:"arn" tf:"arn"`

	Hypervisor string `json:"hypervisor" tf:"hypervisor"`

	ImageOwnerAlias string `json:"imageOwnerAlias" tf:"image_owner_alias"`

	ImageType string `json:"imageType" tf:"image_type"`

	ManageEbsSnapshots bool `json:"manageEbsSnapshots" tf:"manage_ebs_snapshots"`

	OwnerID string `json:"ownerId" tf:"owner_id"`

	Platform string `json:"platform" tf:"platform"`

	PlatformDetails string `json:"platformDetails" tf:"platform_details"`

	Public bool `json:"public" tf:"public"`

	RootSnapshotID string `json:"rootSnapshotId" tf:"root_snapshot_id"`

	UsageOperation string `json:"usageOperation" tf:"usage_operation"`
}

type AmiParameters struct {

	// +kubebuilder:validation:Optional
	Architecture *string `json:"architecture,omitempty" tf:"architecture"`

	// +kubebuilder:validation:Optional
	Description *string `json:"description,omitempty" tf:"description"`

	// +kubebuilder:validation:Optional
	EbsBlockDevice []EbsBlockDeviceParameters `json:"ebsBlockDevice,omitempty" tf:"ebs_block_device"`

	// +kubebuilder:validation:Optional
	EnaSupport *bool `json:"enaSupport,omitempty" tf:"ena_support"`

	// +kubebuilder:validation:Optional
	EphemeralBlockDevice []EphemeralBlockDeviceParameters `json:"ephemeralBlockDevice,omitempty" tf:"ephemeral_block_device"`

	// +kubebuilder:validation:Optional
	ImageLocation *string `json:"imageLocation,omitempty" tf:"image_location"`

	// +kubebuilder:validation:Optional
	KernelID *string `json:"kernelId,omitempty" tf:"kernel_id"`

	// +kubebuilder:validation:Required
	Name string `json:"name" tf:"name"`

	// +kubebuilder:validation:Optional
	RamdiskID *string `json:"ramdiskId,omitempty" tf:"ramdisk_id"`

	// Region is the region you'd like your resource to be created in.
	// +terrajet:crd:field:TFTag=-
	// +kubebuilder:validation:Required
	Region string `json:"region" tf:"-"`

	// +kubebuilder:validation:Optional
	RootDeviceName *string `json:"rootDeviceName,omitempty" tf:"root_device_name"`

	// +kubebuilder:validation:Optional
	SriovNetSupport *string `json:"sriovNetSupport,omitempty" tf:"sriov_net_support"`

	// +kubebuilder:validation:Optional
	Tags map[string]string `json:"tags,omitempty" tf:"tags"`

	// +kubebuilder:validation:Optional
	TagsAll map[string]string `json:"tagsAll,omitempty" tf:"tags_all"`

	// +kubebuilder:validation:Optional
	VirtualizationType *string `json:"virtualizationType,omitempty" tf:"virtualization_type"`
}

type EbsBlockDeviceObservation struct {
}

type EbsBlockDeviceParameters struct {

	// +kubebuilder:validation:Optional
	DeleteOnTermination *bool `json:"deleteOnTermination,omitempty" tf:"delete_on_termination"`

	// +kubebuilder:validation:Required
	DeviceName string `json:"deviceName" tf:"device_name"`

	// +kubebuilder:validation:Optional
	Encrypted *bool `json:"encrypted,omitempty" tf:"encrypted"`

	// +kubebuilder:validation:Optional
	Iops *int64 `json:"iops,omitempty" tf:"iops"`

	// +kubebuilder:validation:Optional
	SnapshotID *string `json:"snapshotId,omitempty" tf:"snapshot_id"`

	// +kubebuilder:validation:Optional
	Throughput *int64 `json:"throughput,omitempty" tf:"throughput"`

	// +kubebuilder:validation:Optional
	VolumeSize *int64 `json:"volumeSize,omitempty" tf:"volume_size"`

	// +kubebuilder:validation:Optional
	VolumeType *string `json:"volumeType,omitempty" tf:"volume_type"`
}

type EphemeralBlockDeviceObservation struct {
}

type EphemeralBlockDeviceParameters struct {

	// +kubebuilder:validation:Required
	DeviceName string `json:"deviceName" tf:"device_name"`

	// +kubebuilder:validation:Required
	VirtualName string `json:"virtualName" tf:"virtual_name"`
}

// AmiSpec defines the desired state of Ami
type AmiSpec struct {
	xpv1.ResourceSpec `json:",inline"`
	ForProvider       AmiParameters `json:"forProvider"`
}

// AmiStatus defines the observed state of Ami.
type AmiStatus struct {
	xpv1.ResourceStatus `json:",inline"`
	AtProvider          AmiObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// Ami is the Schema for the Amis API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,tfaws}
type Ami struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              AmiSpec   `json:"spec"`
	Status            AmiStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// AmiList contains a list of Amis
type AmiList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []Ami `json:"items"`
}

// Repository type metadata.
var (
	AmiKind             = "Ami"
	AmiGroupKind        = schema.GroupKind{Group: Group, Kind: AmiKind}.String()
	AmiKindAPIVersion   = AmiKind + "." + GroupVersion.String()
	AmiGroupVersionKind = GroupVersion.WithKind(AmiKind)
)

func init() {
	SchemeBuilder.Register(&Ami{}, &AmiList{})
}
