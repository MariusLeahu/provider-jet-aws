/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	xpv1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"
)

type CreateRuleObservation struct {
}

type CreateRuleParameters struct {

	// +kubebuilder:validation:Required
	Interval int64 `json:"interval" tf:"interval"`

	// +kubebuilder:validation:Optional
	IntervalUnit *string `json:"intervalUnit,omitempty" tf:"interval_unit"`

	// +kubebuilder:validation:Optional
	Times []string `json:"times,omitempty" tf:"times"`
}

type DlmLifecyclePolicyObservation struct {
	Arn string `json:"arn" tf:"arn"`
}

type DlmLifecyclePolicyParameters struct {

	// +kubebuilder:validation:Required
	Description string `json:"description" tf:"description"`

	// +kubebuilder:validation:Required
	ExecutionRoleArn string `json:"executionRoleArn" tf:"execution_role_arn"`

	// +kubebuilder:validation:Required
	PolicyDetails []PolicyDetailsParameters `json:"policyDetails" tf:"policy_details"`

	// Region is the region you'd like your resource to be created in.
	// +terrajet:crd:field:TFTag=-
	// +kubebuilder:validation:Required
	Region string `json:"region" tf:"-"`

	// +kubebuilder:validation:Optional
	State *string `json:"state,omitempty" tf:"state"`

	// +kubebuilder:validation:Optional
	Tags map[string]string `json:"tags,omitempty" tf:"tags"`

	// +kubebuilder:validation:Optional
	TagsAll map[string]string `json:"tagsAll,omitempty" tf:"tags_all"`
}

type PolicyDetailsObservation struct {
}

type PolicyDetailsParameters struct {

	// +kubebuilder:validation:Required
	ResourceTypes []string `json:"resourceTypes" tf:"resource_types"`

	// +kubebuilder:validation:Required
	Schedule []ScheduleParameters `json:"schedule" tf:"schedule"`

	// +kubebuilder:validation:Required
	TargetTags map[string]string `json:"targetTags" tf:"target_tags"`
}

type RetainRuleObservation struct {
}

type RetainRuleParameters struct {

	// +kubebuilder:validation:Required
	Count int64 `json:"count" tf:"count"`
}

type ScheduleObservation struct {
}

type ScheduleParameters struct {

	// +kubebuilder:validation:Optional
	CopyTags *bool `json:"copyTags,omitempty" tf:"copy_tags"`

	// +kubebuilder:validation:Required
	CreateRule []CreateRuleParameters `json:"createRule" tf:"create_rule"`

	// +kubebuilder:validation:Required
	Name string `json:"name" tf:"name"`

	// +kubebuilder:validation:Required
	RetainRule []RetainRuleParameters `json:"retainRule" tf:"retain_rule"`

	// +kubebuilder:validation:Optional
	TagsToAdd map[string]string `json:"tagsToAdd,omitempty" tf:"tags_to_add"`
}

// DlmLifecyclePolicySpec defines the desired state of DlmLifecyclePolicy
type DlmLifecyclePolicySpec struct {
	xpv1.ResourceSpec `json:",inline"`
	ForProvider       DlmLifecyclePolicyParameters `json:"forProvider"`
}

// DlmLifecyclePolicyStatus defines the observed state of DlmLifecyclePolicy.
type DlmLifecyclePolicyStatus struct {
	xpv1.ResourceStatus `json:",inline"`
	AtProvider          DlmLifecyclePolicyObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// DlmLifecyclePolicy is the Schema for the DlmLifecyclePolicys API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,tfaws}
type DlmLifecyclePolicy struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              DlmLifecyclePolicySpec   `json:"spec"`
	Status            DlmLifecyclePolicyStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// DlmLifecyclePolicyList contains a list of DlmLifecyclePolicys
type DlmLifecyclePolicyList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []DlmLifecyclePolicy `json:"items"`
}

// Repository type metadata.
var (
	DlmLifecyclePolicyKind             = "DlmLifecyclePolicy"
	DlmLifecyclePolicyGroupKind        = schema.GroupKind{Group: Group, Kind: DlmLifecyclePolicyKind}.String()
	DlmLifecyclePolicyKindAPIVersion   = DlmLifecyclePolicyKind + "." + GroupVersion.String()
	DlmLifecyclePolicyGroupVersionKind = GroupVersion.WithKind(DlmLifecyclePolicyKind)
)

func init() {
	SchemeBuilder.Register(&DlmLifecyclePolicy{}, &DlmLifecyclePolicyList{})
}
