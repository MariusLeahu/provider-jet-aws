/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	xpv1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"
)

type AmiDistributionConfigurationObservation struct {
}

type AmiDistributionConfigurationParameters struct {

	// +kubebuilder:validation:Optional
	AmiTags map[string]string `json:"amiTags,omitempty" tf:"ami_tags"`

	// +kubebuilder:validation:Optional
	Description *string `json:"description,omitempty" tf:"description"`

	// +kubebuilder:validation:Optional
	KmsKeyID *string `json:"kmsKeyId,omitempty" tf:"kms_key_id"`

	// +kubebuilder:validation:Optional
	LaunchPermission []LaunchPermissionParameters `json:"launchPermission,omitempty" tf:"launch_permission"`

	// +kubebuilder:validation:Optional
	Name *string `json:"name,omitempty" tf:"name"`

	// +kubebuilder:validation:Optional
	TargetAccountIds []string `json:"targetAccountIds,omitempty" tf:"target_account_ids"`
}

type DistributionObservation struct {
}

type DistributionParameters struct {

	// +kubebuilder:validation:Optional
	AmiDistributionConfiguration []AmiDistributionConfigurationParameters `json:"amiDistributionConfiguration,omitempty" tf:"ami_distribution_configuration"`

	// +kubebuilder:validation:Optional
	LicenseConfigurationArns []string `json:"licenseConfigurationArns,omitempty" tf:"license_configuration_arns"`

	// +kubebuilder:validation:Required
	Region string `json:"region" tf:"region"`
}

type ImagebuilderDistributionConfigurationObservation struct {
	Arn string `json:"arn" tf:"arn"`

	DateCreated string `json:"dateCreated" tf:"date_created"`

	DateUpdated string `json:"dateUpdated" tf:"date_updated"`
}

type ImagebuilderDistributionConfigurationParameters struct {

	// +kubebuilder:validation:Optional
	Description *string `json:"description,omitempty" tf:"description"`

	// +kubebuilder:validation:Required
	Distribution []DistributionParameters `json:"distribution" tf:"distribution"`

	// +kubebuilder:validation:Required
	Name string `json:"name" tf:"name"`

	// Region is the region you'd like your resource to be created in.
	// +terrajet:crd:field:TFTag=-
	// +kubebuilder:validation:Required
	Region string `json:"region" tf:"-"`

	// +kubebuilder:validation:Optional
	Tags map[string]string `json:"tags,omitempty" tf:"tags"`

	// +kubebuilder:validation:Optional
	TagsAll map[string]string `json:"tagsAll,omitempty" tf:"tags_all"`
}

type LaunchPermissionObservation struct {
}

type LaunchPermissionParameters struct {

	// +kubebuilder:validation:Optional
	UserGroups []string `json:"userGroups,omitempty" tf:"user_groups"`

	// +kubebuilder:validation:Optional
	UserIds []string `json:"userIds,omitempty" tf:"user_ids"`
}

// ImagebuilderDistributionConfigurationSpec defines the desired state of ImagebuilderDistributionConfiguration
type ImagebuilderDistributionConfigurationSpec struct {
	xpv1.ResourceSpec `json:",inline"`
	ForProvider       ImagebuilderDistributionConfigurationParameters `json:"forProvider"`
}

// ImagebuilderDistributionConfigurationStatus defines the observed state of ImagebuilderDistributionConfiguration.
type ImagebuilderDistributionConfigurationStatus struct {
	xpv1.ResourceStatus `json:",inline"`
	AtProvider          ImagebuilderDistributionConfigurationObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// ImagebuilderDistributionConfiguration is the Schema for the ImagebuilderDistributionConfigurations API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,tfaws}
type ImagebuilderDistributionConfiguration struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              ImagebuilderDistributionConfigurationSpec   `json:"spec"`
	Status            ImagebuilderDistributionConfigurationStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// ImagebuilderDistributionConfigurationList contains a list of ImagebuilderDistributionConfigurations
type ImagebuilderDistributionConfigurationList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []ImagebuilderDistributionConfiguration `json:"items"`
}

// Repository type metadata.
var (
	ImagebuilderDistributionConfigurationKind             = "ImagebuilderDistributionConfiguration"
	ImagebuilderDistributionConfigurationGroupKind        = schema.GroupKind{Group: Group, Kind: ImagebuilderDistributionConfigurationKind}.String()
	ImagebuilderDistributionConfigurationKindAPIVersion   = ImagebuilderDistributionConfigurationKind + "." + GroupVersion.String()
	ImagebuilderDistributionConfigurationGroupVersionKind = GroupVersion.WithKind(ImagebuilderDistributionConfigurationKind)
)

func init() {
	SchemeBuilder.Register(&ImagebuilderDistributionConfiguration{}, &ImagebuilderDistributionConfigurationList{})
}
