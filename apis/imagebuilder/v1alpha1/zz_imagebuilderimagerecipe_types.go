/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	xpv1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"
)

type BlockDeviceMappingObservation struct {
}

type BlockDeviceMappingParameters struct {

	// +kubebuilder:validation:Optional
	DeviceName *string `json:"deviceName,omitempty" tf:"device_name"`

	// +kubebuilder:validation:Optional
	Ebs []EbsParameters `json:"ebs,omitempty" tf:"ebs"`

	// +kubebuilder:validation:Optional
	NoDevice *bool `json:"noDevice,omitempty" tf:"no_device"`

	// +kubebuilder:validation:Optional
	VirtualName *string `json:"virtualName,omitempty" tf:"virtual_name"`
}

type ComponentObservation struct {
}

type ComponentParameters struct {

	// +kubebuilder:validation:Required
	ComponentArn string `json:"componentArn" tf:"component_arn"`
}

type EbsObservation struct {
}

type EbsParameters struct {

	// +kubebuilder:validation:Optional
	DeleteOnTermination *string `json:"deleteOnTermination,omitempty" tf:"delete_on_termination"`

	// +kubebuilder:validation:Optional
	Encrypted *string `json:"encrypted,omitempty" tf:"encrypted"`

	// +kubebuilder:validation:Optional
	Iops *int64 `json:"iops,omitempty" tf:"iops"`

	// +kubebuilder:validation:Optional
	KmsKeyID *string `json:"kmsKeyId,omitempty" tf:"kms_key_id"`

	// +kubebuilder:validation:Optional
	SnapshotID *string `json:"snapshotId,omitempty" tf:"snapshot_id"`

	// +kubebuilder:validation:Optional
	VolumeSize *int64 `json:"volumeSize,omitempty" tf:"volume_size"`

	// +kubebuilder:validation:Optional
	VolumeType *string `json:"volumeType,omitempty" tf:"volume_type"`
}

type ImagebuilderImageRecipeObservation struct {
	Arn string `json:"arn" tf:"arn"`

	DateCreated string `json:"dateCreated" tf:"date_created"`

	Owner string `json:"owner" tf:"owner"`

	Platform string `json:"platform" tf:"platform"`
}

type ImagebuilderImageRecipeParameters struct {

	// +kubebuilder:validation:Optional
	BlockDeviceMapping []BlockDeviceMappingParameters `json:"blockDeviceMapping,omitempty" tf:"block_device_mapping"`

	// +kubebuilder:validation:Required
	Component []ComponentParameters `json:"component" tf:"component"`

	// +kubebuilder:validation:Optional
	Description *string `json:"description,omitempty" tf:"description"`

	// +kubebuilder:validation:Required
	Name string `json:"name" tf:"name"`

	// +kubebuilder:validation:Required
	ParentImage string `json:"parentImage" tf:"parent_image"`

	// Region is the region you'd like your resource to be created in.
	// +terrajet:crd:field:TFTag=-
	// +kubebuilder:validation:Required
	Region string `json:"region" tf:"-"`

	// +kubebuilder:validation:Optional
	Tags map[string]string `json:"tags,omitempty" tf:"tags"`

	// +kubebuilder:validation:Optional
	TagsAll map[string]string `json:"tagsAll,omitempty" tf:"tags_all"`

	// +kubebuilder:validation:Required
	Version string `json:"version" tf:"version"`

	// +kubebuilder:validation:Optional
	WorkingDirectory *string `json:"workingDirectory,omitempty" tf:"working_directory"`
}

// ImagebuilderImageRecipeSpec defines the desired state of ImagebuilderImageRecipe
type ImagebuilderImageRecipeSpec struct {
	xpv1.ResourceSpec `json:",inline"`
	ForProvider       ImagebuilderImageRecipeParameters `json:"forProvider"`
}

// ImagebuilderImageRecipeStatus defines the observed state of ImagebuilderImageRecipe.
type ImagebuilderImageRecipeStatus struct {
	xpv1.ResourceStatus `json:",inline"`
	AtProvider          ImagebuilderImageRecipeObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// ImagebuilderImageRecipe is the Schema for the ImagebuilderImageRecipes API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,tfaws}
type ImagebuilderImageRecipe struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              ImagebuilderImageRecipeSpec   `json:"spec"`
	Status            ImagebuilderImageRecipeStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// ImagebuilderImageRecipeList contains a list of ImagebuilderImageRecipes
type ImagebuilderImageRecipeList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []ImagebuilderImageRecipe `json:"items"`
}

// Repository type metadata.
var (
	ImagebuilderImageRecipeKind             = "ImagebuilderImageRecipe"
	ImagebuilderImageRecipeGroupKind        = schema.GroupKind{Group: Group, Kind: ImagebuilderImageRecipeKind}.String()
	ImagebuilderImageRecipeKindAPIVersion   = ImagebuilderImageRecipeKind + "." + GroupVersion.String()
	ImagebuilderImageRecipeGroupVersionKind = GroupVersion.WithKind(ImagebuilderImageRecipeKind)
)

func init() {
	SchemeBuilder.Register(&ImagebuilderImageRecipe{}, &ImagebuilderImageRecipeList{})
}
