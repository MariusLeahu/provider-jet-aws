/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/
// Code generated by angryjet. DO NOT EDIT.

package v1alpha1

import xpv1 "github.com/crossplane/crossplane-runtime/apis/common/v1"

// GetCondition of this ImagebuilderComponent.
func (mg *ImagebuilderComponent) GetCondition(ct xpv1.ConditionType) xpv1.Condition {
	return mg.Status.GetCondition(ct)
}

// GetDeletionPolicy of this ImagebuilderComponent.
func (mg *ImagebuilderComponent) GetDeletionPolicy() xpv1.DeletionPolicy {
	return mg.Spec.DeletionPolicy
}

// GetProviderConfigReference of this ImagebuilderComponent.
func (mg *ImagebuilderComponent) GetProviderConfigReference() *xpv1.Reference {
	return mg.Spec.ProviderConfigReference
}

/*
GetProviderReference of this ImagebuilderComponent.
Deprecated: Use GetProviderConfigReference.
*/
func (mg *ImagebuilderComponent) GetProviderReference() *xpv1.Reference {
	return mg.Spec.ProviderReference
}

// GetWriteConnectionSecretToReference of this ImagebuilderComponent.
func (mg *ImagebuilderComponent) GetWriteConnectionSecretToReference() *xpv1.SecretReference {
	return mg.Spec.WriteConnectionSecretToReference
}

// SetConditions of this ImagebuilderComponent.
func (mg *ImagebuilderComponent) SetConditions(c ...xpv1.Condition) {
	mg.Status.SetConditions(c...)
}

// SetDeletionPolicy of this ImagebuilderComponent.
func (mg *ImagebuilderComponent) SetDeletionPolicy(r xpv1.DeletionPolicy) {
	mg.Spec.DeletionPolicy = r
}

// SetProviderConfigReference of this ImagebuilderComponent.
func (mg *ImagebuilderComponent) SetProviderConfigReference(r *xpv1.Reference) {
	mg.Spec.ProviderConfigReference = r
}

/*
SetProviderReference of this ImagebuilderComponent.
Deprecated: Use SetProviderConfigReference.
*/
func (mg *ImagebuilderComponent) SetProviderReference(r *xpv1.Reference) {
	mg.Spec.ProviderReference = r
}

// SetWriteConnectionSecretToReference of this ImagebuilderComponent.
func (mg *ImagebuilderComponent) SetWriteConnectionSecretToReference(r *xpv1.SecretReference) {
	mg.Spec.WriteConnectionSecretToReference = r
}

// GetCondition of this ImagebuilderDistributionConfiguration.
func (mg *ImagebuilderDistributionConfiguration) GetCondition(ct xpv1.ConditionType) xpv1.Condition {
	return mg.Status.GetCondition(ct)
}

// GetDeletionPolicy of this ImagebuilderDistributionConfiguration.
func (mg *ImagebuilderDistributionConfiguration) GetDeletionPolicy() xpv1.DeletionPolicy {
	return mg.Spec.DeletionPolicy
}

// GetProviderConfigReference of this ImagebuilderDistributionConfiguration.
func (mg *ImagebuilderDistributionConfiguration) GetProviderConfigReference() *xpv1.Reference {
	return mg.Spec.ProviderConfigReference
}

/*
GetProviderReference of this ImagebuilderDistributionConfiguration.
Deprecated: Use GetProviderConfigReference.
*/
func (mg *ImagebuilderDistributionConfiguration) GetProviderReference() *xpv1.Reference {
	return mg.Spec.ProviderReference
}

// GetWriteConnectionSecretToReference of this ImagebuilderDistributionConfiguration.
func (mg *ImagebuilderDistributionConfiguration) GetWriteConnectionSecretToReference() *xpv1.SecretReference {
	return mg.Spec.WriteConnectionSecretToReference
}

// SetConditions of this ImagebuilderDistributionConfiguration.
func (mg *ImagebuilderDistributionConfiguration) SetConditions(c ...xpv1.Condition) {
	mg.Status.SetConditions(c...)
}

// SetDeletionPolicy of this ImagebuilderDistributionConfiguration.
func (mg *ImagebuilderDistributionConfiguration) SetDeletionPolicy(r xpv1.DeletionPolicy) {
	mg.Spec.DeletionPolicy = r
}

// SetProviderConfigReference of this ImagebuilderDistributionConfiguration.
func (mg *ImagebuilderDistributionConfiguration) SetProviderConfigReference(r *xpv1.Reference) {
	mg.Spec.ProviderConfigReference = r
}

/*
SetProviderReference of this ImagebuilderDistributionConfiguration.
Deprecated: Use SetProviderConfigReference.
*/
func (mg *ImagebuilderDistributionConfiguration) SetProviderReference(r *xpv1.Reference) {
	mg.Spec.ProviderReference = r
}

// SetWriteConnectionSecretToReference of this ImagebuilderDistributionConfiguration.
func (mg *ImagebuilderDistributionConfiguration) SetWriteConnectionSecretToReference(r *xpv1.SecretReference) {
	mg.Spec.WriteConnectionSecretToReference = r
}

// GetCondition of this ImagebuilderImage.
func (mg *ImagebuilderImage) GetCondition(ct xpv1.ConditionType) xpv1.Condition {
	return mg.Status.GetCondition(ct)
}

// GetDeletionPolicy of this ImagebuilderImage.
func (mg *ImagebuilderImage) GetDeletionPolicy() xpv1.DeletionPolicy {
	return mg.Spec.DeletionPolicy
}

// GetProviderConfigReference of this ImagebuilderImage.
func (mg *ImagebuilderImage) GetProviderConfigReference() *xpv1.Reference {
	return mg.Spec.ProviderConfigReference
}

/*
GetProviderReference of this ImagebuilderImage.
Deprecated: Use GetProviderConfigReference.
*/
func (mg *ImagebuilderImage) GetProviderReference() *xpv1.Reference {
	return mg.Spec.ProviderReference
}

// GetWriteConnectionSecretToReference of this ImagebuilderImage.
func (mg *ImagebuilderImage) GetWriteConnectionSecretToReference() *xpv1.SecretReference {
	return mg.Spec.WriteConnectionSecretToReference
}

// SetConditions of this ImagebuilderImage.
func (mg *ImagebuilderImage) SetConditions(c ...xpv1.Condition) {
	mg.Status.SetConditions(c...)
}

// SetDeletionPolicy of this ImagebuilderImage.
func (mg *ImagebuilderImage) SetDeletionPolicy(r xpv1.DeletionPolicy) {
	mg.Spec.DeletionPolicy = r
}

// SetProviderConfigReference of this ImagebuilderImage.
func (mg *ImagebuilderImage) SetProviderConfigReference(r *xpv1.Reference) {
	mg.Spec.ProviderConfigReference = r
}

/*
SetProviderReference of this ImagebuilderImage.
Deprecated: Use SetProviderConfigReference.
*/
func (mg *ImagebuilderImage) SetProviderReference(r *xpv1.Reference) {
	mg.Spec.ProviderReference = r
}

// SetWriteConnectionSecretToReference of this ImagebuilderImage.
func (mg *ImagebuilderImage) SetWriteConnectionSecretToReference(r *xpv1.SecretReference) {
	mg.Spec.WriteConnectionSecretToReference = r
}

// GetCondition of this ImagebuilderImagePipeline.
func (mg *ImagebuilderImagePipeline) GetCondition(ct xpv1.ConditionType) xpv1.Condition {
	return mg.Status.GetCondition(ct)
}

// GetDeletionPolicy of this ImagebuilderImagePipeline.
func (mg *ImagebuilderImagePipeline) GetDeletionPolicy() xpv1.DeletionPolicy {
	return mg.Spec.DeletionPolicy
}

// GetProviderConfigReference of this ImagebuilderImagePipeline.
func (mg *ImagebuilderImagePipeline) GetProviderConfigReference() *xpv1.Reference {
	return mg.Spec.ProviderConfigReference
}

/*
GetProviderReference of this ImagebuilderImagePipeline.
Deprecated: Use GetProviderConfigReference.
*/
func (mg *ImagebuilderImagePipeline) GetProviderReference() *xpv1.Reference {
	return mg.Spec.ProviderReference
}

// GetWriteConnectionSecretToReference of this ImagebuilderImagePipeline.
func (mg *ImagebuilderImagePipeline) GetWriteConnectionSecretToReference() *xpv1.SecretReference {
	return mg.Spec.WriteConnectionSecretToReference
}

// SetConditions of this ImagebuilderImagePipeline.
func (mg *ImagebuilderImagePipeline) SetConditions(c ...xpv1.Condition) {
	mg.Status.SetConditions(c...)
}

// SetDeletionPolicy of this ImagebuilderImagePipeline.
func (mg *ImagebuilderImagePipeline) SetDeletionPolicy(r xpv1.DeletionPolicy) {
	mg.Spec.DeletionPolicy = r
}

// SetProviderConfigReference of this ImagebuilderImagePipeline.
func (mg *ImagebuilderImagePipeline) SetProviderConfigReference(r *xpv1.Reference) {
	mg.Spec.ProviderConfigReference = r
}

/*
SetProviderReference of this ImagebuilderImagePipeline.
Deprecated: Use SetProviderConfigReference.
*/
func (mg *ImagebuilderImagePipeline) SetProviderReference(r *xpv1.Reference) {
	mg.Spec.ProviderReference = r
}

// SetWriteConnectionSecretToReference of this ImagebuilderImagePipeline.
func (mg *ImagebuilderImagePipeline) SetWriteConnectionSecretToReference(r *xpv1.SecretReference) {
	mg.Spec.WriteConnectionSecretToReference = r
}

// GetCondition of this ImagebuilderImageRecipe.
func (mg *ImagebuilderImageRecipe) GetCondition(ct xpv1.ConditionType) xpv1.Condition {
	return mg.Status.GetCondition(ct)
}

// GetDeletionPolicy of this ImagebuilderImageRecipe.
func (mg *ImagebuilderImageRecipe) GetDeletionPolicy() xpv1.DeletionPolicy {
	return mg.Spec.DeletionPolicy
}

// GetProviderConfigReference of this ImagebuilderImageRecipe.
func (mg *ImagebuilderImageRecipe) GetProviderConfigReference() *xpv1.Reference {
	return mg.Spec.ProviderConfigReference
}

/*
GetProviderReference of this ImagebuilderImageRecipe.
Deprecated: Use GetProviderConfigReference.
*/
func (mg *ImagebuilderImageRecipe) GetProviderReference() *xpv1.Reference {
	return mg.Spec.ProviderReference
}

// GetWriteConnectionSecretToReference of this ImagebuilderImageRecipe.
func (mg *ImagebuilderImageRecipe) GetWriteConnectionSecretToReference() *xpv1.SecretReference {
	return mg.Spec.WriteConnectionSecretToReference
}

// SetConditions of this ImagebuilderImageRecipe.
func (mg *ImagebuilderImageRecipe) SetConditions(c ...xpv1.Condition) {
	mg.Status.SetConditions(c...)
}

// SetDeletionPolicy of this ImagebuilderImageRecipe.
func (mg *ImagebuilderImageRecipe) SetDeletionPolicy(r xpv1.DeletionPolicy) {
	mg.Spec.DeletionPolicy = r
}

// SetProviderConfigReference of this ImagebuilderImageRecipe.
func (mg *ImagebuilderImageRecipe) SetProviderConfigReference(r *xpv1.Reference) {
	mg.Spec.ProviderConfigReference = r
}

/*
SetProviderReference of this ImagebuilderImageRecipe.
Deprecated: Use SetProviderConfigReference.
*/
func (mg *ImagebuilderImageRecipe) SetProviderReference(r *xpv1.Reference) {
	mg.Spec.ProviderReference = r
}

// SetWriteConnectionSecretToReference of this ImagebuilderImageRecipe.
func (mg *ImagebuilderImageRecipe) SetWriteConnectionSecretToReference(r *xpv1.SecretReference) {
	mg.Spec.WriteConnectionSecretToReference = r
}

// GetCondition of this ImagebuilderInfrastructureConfiguration.
func (mg *ImagebuilderInfrastructureConfiguration) GetCondition(ct xpv1.ConditionType) xpv1.Condition {
	return mg.Status.GetCondition(ct)
}

// GetDeletionPolicy of this ImagebuilderInfrastructureConfiguration.
func (mg *ImagebuilderInfrastructureConfiguration) GetDeletionPolicy() xpv1.DeletionPolicy {
	return mg.Spec.DeletionPolicy
}

// GetProviderConfigReference of this ImagebuilderInfrastructureConfiguration.
func (mg *ImagebuilderInfrastructureConfiguration) GetProviderConfigReference() *xpv1.Reference {
	return mg.Spec.ProviderConfigReference
}

/*
GetProviderReference of this ImagebuilderInfrastructureConfiguration.
Deprecated: Use GetProviderConfigReference.
*/
func (mg *ImagebuilderInfrastructureConfiguration) GetProviderReference() *xpv1.Reference {
	return mg.Spec.ProviderReference
}

// GetWriteConnectionSecretToReference of this ImagebuilderInfrastructureConfiguration.
func (mg *ImagebuilderInfrastructureConfiguration) GetWriteConnectionSecretToReference() *xpv1.SecretReference {
	return mg.Spec.WriteConnectionSecretToReference
}

// SetConditions of this ImagebuilderInfrastructureConfiguration.
func (mg *ImagebuilderInfrastructureConfiguration) SetConditions(c ...xpv1.Condition) {
	mg.Status.SetConditions(c...)
}

// SetDeletionPolicy of this ImagebuilderInfrastructureConfiguration.
func (mg *ImagebuilderInfrastructureConfiguration) SetDeletionPolicy(r xpv1.DeletionPolicy) {
	mg.Spec.DeletionPolicy = r
}

// SetProviderConfigReference of this ImagebuilderInfrastructureConfiguration.
func (mg *ImagebuilderInfrastructureConfiguration) SetProviderConfigReference(r *xpv1.Reference) {
	mg.Spec.ProviderConfigReference = r
}

/*
SetProviderReference of this ImagebuilderInfrastructureConfiguration.
Deprecated: Use SetProviderConfigReference.
*/
func (mg *ImagebuilderInfrastructureConfiguration) SetProviderReference(r *xpv1.Reference) {
	mg.Spec.ProviderReference = r
}

// SetWriteConnectionSecretToReference of this ImagebuilderInfrastructureConfiguration.
func (mg *ImagebuilderInfrastructureConfiguration) SetWriteConnectionSecretToReference(r *xpv1.SecretReference) {
	mg.Spec.WriteConnectionSecretToReference = r
}
