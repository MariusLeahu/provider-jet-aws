/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	xpv1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"
)

type AthenaWorkgroupObservation struct {
	Arn string `json:"arn" tf:"arn"`
}

type AthenaWorkgroupParameters struct {

	// +kubebuilder:validation:Optional
	Configuration []ConfigurationParameters `json:"configuration,omitempty" tf:"configuration"`

	// +kubebuilder:validation:Optional
	Description *string `json:"description,omitempty" tf:"description"`

	// +kubebuilder:validation:Optional
	ForceDestroy *bool `json:"forceDestroy,omitempty" tf:"force_destroy"`

	// +kubebuilder:validation:Required
	Name string `json:"name" tf:"name"`

	// Region is the region you'd like your resource to be created in.
	// +terrajet:crd:field:TFTag=-
	// +kubebuilder:validation:Required
	Region string `json:"region" tf:"-"`

	// +kubebuilder:validation:Optional
	State *string `json:"state,omitempty" tf:"state"`

	// +kubebuilder:validation:Optional
	Tags map[string]string `json:"tags,omitempty" tf:"tags"`

	// +kubebuilder:validation:Optional
	TagsAll map[string]string `json:"tagsAll,omitempty" tf:"tags_all"`
}

type ConfigurationObservation struct {
}

type ConfigurationParameters struct {

	// +kubebuilder:validation:Optional
	BytesScannedCutoffPerQuery *int64 `json:"bytesScannedCutoffPerQuery,omitempty" tf:"bytes_scanned_cutoff_per_query"`

	// +kubebuilder:validation:Optional
	EnforceWorkgroupConfiguration *bool `json:"enforceWorkgroupConfiguration,omitempty" tf:"enforce_workgroup_configuration"`

	// +kubebuilder:validation:Optional
	PublishCloudwatchMetricsEnabled *bool `json:"publishCloudwatchMetricsEnabled,omitempty" tf:"publish_cloudwatch_metrics_enabled"`

	// +kubebuilder:validation:Optional
	RequesterPaysEnabled *bool `json:"requesterPaysEnabled,omitempty" tf:"requester_pays_enabled"`

	// +kubebuilder:validation:Optional
	ResultConfiguration []ResultConfigurationParameters `json:"resultConfiguration,omitempty" tf:"result_configuration"`
}

type ResultConfigurationEncryptionConfigurationObservation struct {
}

type ResultConfigurationEncryptionConfigurationParameters struct {

	// +kubebuilder:validation:Optional
	EncryptionOption *string `json:"encryptionOption,omitempty" tf:"encryption_option"`

	// +kubebuilder:validation:Optional
	KmsKeyArn *string `json:"kmsKeyArn,omitempty" tf:"kms_key_arn"`
}

type ResultConfigurationObservation struct {
}

type ResultConfigurationParameters struct {

	// +kubebuilder:validation:Optional
	EncryptionConfiguration []ResultConfigurationEncryptionConfigurationParameters `json:"encryptionConfiguration,omitempty" tf:"encryption_configuration"`

	// +kubebuilder:validation:Optional
	OutputLocation *string `json:"outputLocation,omitempty" tf:"output_location"`
}

// AthenaWorkgroupSpec defines the desired state of AthenaWorkgroup
type AthenaWorkgroupSpec struct {
	xpv1.ResourceSpec `json:",inline"`
	ForProvider       AthenaWorkgroupParameters `json:"forProvider"`
}

// AthenaWorkgroupStatus defines the observed state of AthenaWorkgroup.
type AthenaWorkgroupStatus struct {
	xpv1.ResourceStatus `json:",inline"`
	AtProvider          AthenaWorkgroupObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// AthenaWorkgroup is the Schema for the AthenaWorkgroups API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,tfaws}
type AthenaWorkgroup struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              AthenaWorkgroupSpec   `json:"spec"`
	Status            AthenaWorkgroupStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// AthenaWorkgroupList contains a list of AthenaWorkgroups
type AthenaWorkgroupList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []AthenaWorkgroup `json:"items"`
}

// Repository type metadata.
var (
	AthenaWorkgroupKind             = "AthenaWorkgroup"
	AthenaWorkgroupGroupKind        = schema.GroupKind{Group: Group, Kind: AthenaWorkgroupKind}.String()
	AthenaWorkgroupKindAPIVersion   = AthenaWorkgroupKind + "." + GroupVersion.String()
	AthenaWorkgroupGroupVersionKind = GroupVersion.WithKind(AthenaWorkgroupKind)
)

func init() {
	SchemeBuilder.Register(&AthenaWorkgroup{}, &AthenaWorkgroupList{})
}
