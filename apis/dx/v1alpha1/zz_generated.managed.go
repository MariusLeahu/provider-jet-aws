/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/
// Code generated by angryjet. DO NOT EDIT.

package v1alpha1

import xpv1 "github.com/crossplane/crossplane-runtime/apis/common/v1"

// GetCondition of this DxBgpPeer.
func (mg *DxBgpPeer) GetCondition(ct xpv1.ConditionType) xpv1.Condition {
	return mg.Status.GetCondition(ct)
}

// GetDeletionPolicy of this DxBgpPeer.
func (mg *DxBgpPeer) GetDeletionPolicy() xpv1.DeletionPolicy {
	return mg.Spec.DeletionPolicy
}

// GetProviderConfigReference of this DxBgpPeer.
func (mg *DxBgpPeer) GetProviderConfigReference() *xpv1.Reference {
	return mg.Spec.ProviderConfigReference
}

/*
GetProviderReference of this DxBgpPeer.
Deprecated: Use GetProviderConfigReference.
*/
func (mg *DxBgpPeer) GetProviderReference() *xpv1.Reference {
	return mg.Spec.ProviderReference
}

// GetWriteConnectionSecretToReference of this DxBgpPeer.
func (mg *DxBgpPeer) GetWriteConnectionSecretToReference() *xpv1.SecretReference {
	return mg.Spec.WriteConnectionSecretToReference
}

// SetConditions of this DxBgpPeer.
func (mg *DxBgpPeer) SetConditions(c ...xpv1.Condition) {
	mg.Status.SetConditions(c...)
}

// SetDeletionPolicy of this DxBgpPeer.
func (mg *DxBgpPeer) SetDeletionPolicy(r xpv1.DeletionPolicy) {
	mg.Spec.DeletionPolicy = r
}

// SetProviderConfigReference of this DxBgpPeer.
func (mg *DxBgpPeer) SetProviderConfigReference(r *xpv1.Reference) {
	mg.Spec.ProviderConfigReference = r
}

/*
SetProviderReference of this DxBgpPeer.
Deprecated: Use SetProviderConfigReference.
*/
func (mg *DxBgpPeer) SetProviderReference(r *xpv1.Reference) {
	mg.Spec.ProviderReference = r
}

// SetWriteConnectionSecretToReference of this DxBgpPeer.
func (mg *DxBgpPeer) SetWriteConnectionSecretToReference(r *xpv1.SecretReference) {
	mg.Spec.WriteConnectionSecretToReference = r
}

// GetCondition of this DxConnection.
func (mg *DxConnection) GetCondition(ct xpv1.ConditionType) xpv1.Condition {
	return mg.Status.GetCondition(ct)
}

// GetDeletionPolicy of this DxConnection.
func (mg *DxConnection) GetDeletionPolicy() xpv1.DeletionPolicy {
	return mg.Spec.DeletionPolicy
}

// GetProviderConfigReference of this DxConnection.
func (mg *DxConnection) GetProviderConfigReference() *xpv1.Reference {
	return mg.Spec.ProviderConfigReference
}

/*
GetProviderReference of this DxConnection.
Deprecated: Use GetProviderConfigReference.
*/
func (mg *DxConnection) GetProviderReference() *xpv1.Reference {
	return mg.Spec.ProviderReference
}

// GetWriteConnectionSecretToReference of this DxConnection.
func (mg *DxConnection) GetWriteConnectionSecretToReference() *xpv1.SecretReference {
	return mg.Spec.WriteConnectionSecretToReference
}

// SetConditions of this DxConnection.
func (mg *DxConnection) SetConditions(c ...xpv1.Condition) {
	mg.Status.SetConditions(c...)
}

// SetDeletionPolicy of this DxConnection.
func (mg *DxConnection) SetDeletionPolicy(r xpv1.DeletionPolicy) {
	mg.Spec.DeletionPolicy = r
}

// SetProviderConfigReference of this DxConnection.
func (mg *DxConnection) SetProviderConfigReference(r *xpv1.Reference) {
	mg.Spec.ProviderConfigReference = r
}

/*
SetProviderReference of this DxConnection.
Deprecated: Use SetProviderConfigReference.
*/
func (mg *DxConnection) SetProviderReference(r *xpv1.Reference) {
	mg.Spec.ProviderReference = r
}

// SetWriteConnectionSecretToReference of this DxConnection.
func (mg *DxConnection) SetWriteConnectionSecretToReference(r *xpv1.SecretReference) {
	mg.Spec.WriteConnectionSecretToReference = r
}

// GetCondition of this DxConnectionAssociation.
func (mg *DxConnectionAssociation) GetCondition(ct xpv1.ConditionType) xpv1.Condition {
	return mg.Status.GetCondition(ct)
}

// GetDeletionPolicy of this DxConnectionAssociation.
func (mg *DxConnectionAssociation) GetDeletionPolicy() xpv1.DeletionPolicy {
	return mg.Spec.DeletionPolicy
}

// GetProviderConfigReference of this DxConnectionAssociation.
func (mg *DxConnectionAssociation) GetProviderConfigReference() *xpv1.Reference {
	return mg.Spec.ProviderConfigReference
}

/*
GetProviderReference of this DxConnectionAssociation.
Deprecated: Use GetProviderConfigReference.
*/
func (mg *DxConnectionAssociation) GetProviderReference() *xpv1.Reference {
	return mg.Spec.ProviderReference
}

// GetWriteConnectionSecretToReference of this DxConnectionAssociation.
func (mg *DxConnectionAssociation) GetWriteConnectionSecretToReference() *xpv1.SecretReference {
	return mg.Spec.WriteConnectionSecretToReference
}

// SetConditions of this DxConnectionAssociation.
func (mg *DxConnectionAssociation) SetConditions(c ...xpv1.Condition) {
	mg.Status.SetConditions(c...)
}

// SetDeletionPolicy of this DxConnectionAssociation.
func (mg *DxConnectionAssociation) SetDeletionPolicy(r xpv1.DeletionPolicy) {
	mg.Spec.DeletionPolicy = r
}

// SetProviderConfigReference of this DxConnectionAssociation.
func (mg *DxConnectionAssociation) SetProviderConfigReference(r *xpv1.Reference) {
	mg.Spec.ProviderConfigReference = r
}

/*
SetProviderReference of this DxConnectionAssociation.
Deprecated: Use SetProviderConfigReference.
*/
func (mg *DxConnectionAssociation) SetProviderReference(r *xpv1.Reference) {
	mg.Spec.ProviderReference = r
}

// SetWriteConnectionSecretToReference of this DxConnectionAssociation.
func (mg *DxConnectionAssociation) SetWriteConnectionSecretToReference(r *xpv1.SecretReference) {
	mg.Spec.WriteConnectionSecretToReference = r
}

// GetCondition of this DxGateway.
func (mg *DxGateway) GetCondition(ct xpv1.ConditionType) xpv1.Condition {
	return mg.Status.GetCondition(ct)
}

// GetDeletionPolicy of this DxGateway.
func (mg *DxGateway) GetDeletionPolicy() xpv1.DeletionPolicy {
	return mg.Spec.DeletionPolicy
}

// GetProviderConfigReference of this DxGateway.
func (mg *DxGateway) GetProviderConfigReference() *xpv1.Reference {
	return mg.Spec.ProviderConfigReference
}

/*
GetProviderReference of this DxGateway.
Deprecated: Use GetProviderConfigReference.
*/
func (mg *DxGateway) GetProviderReference() *xpv1.Reference {
	return mg.Spec.ProviderReference
}

// GetWriteConnectionSecretToReference of this DxGateway.
func (mg *DxGateway) GetWriteConnectionSecretToReference() *xpv1.SecretReference {
	return mg.Spec.WriteConnectionSecretToReference
}

// SetConditions of this DxGateway.
func (mg *DxGateway) SetConditions(c ...xpv1.Condition) {
	mg.Status.SetConditions(c...)
}

// SetDeletionPolicy of this DxGateway.
func (mg *DxGateway) SetDeletionPolicy(r xpv1.DeletionPolicy) {
	mg.Spec.DeletionPolicy = r
}

// SetProviderConfigReference of this DxGateway.
func (mg *DxGateway) SetProviderConfigReference(r *xpv1.Reference) {
	mg.Spec.ProviderConfigReference = r
}

/*
SetProviderReference of this DxGateway.
Deprecated: Use SetProviderConfigReference.
*/
func (mg *DxGateway) SetProviderReference(r *xpv1.Reference) {
	mg.Spec.ProviderReference = r
}

// SetWriteConnectionSecretToReference of this DxGateway.
func (mg *DxGateway) SetWriteConnectionSecretToReference(r *xpv1.SecretReference) {
	mg.Spec.WriteConnectionSecretToReference = r
}

// GetCondition of this DxGatewayAssociation.
func (mg *DxGatewayAssociation) GetCondition(ct xpv1.ConditionType) xpv1.Condition {
	return mg.Status.GetCondition(ct)
}

// GetDeletionPolicy of this DxGatewayAssociation.
func (mg *DxGatewayAssociation) GetDeletionPolicy() xpv1.DeletionPolicy {
	return mg.Spec.DeletionPolicy
}

// GetProviderConfigReference of this DxGatewayAssociation.
func (mg *DxGatewayAssociation) GetProviderConfigReference() *xpv1.Reference {
	return mg.Spec.ProviderConfigReference
}

/*
GetProviderReference of this DxGatewayAssociation.
Deprecated: Use GetProviderConfigReference.
*/
func (mg *DxGatewayAssociation) GetProviderReference() *xpv1.Reference {
	return mg.Spec.ProviderReference
}

// GetWriteConnectionSecretToReference of this DxGatewayAssociation.
func (mg *DxGatewayAssociation) GetWriteConnectionSecretToReference() *xpv1.SecretReference {
	return mg.Spec.WriteConnectionSecretToReference
}

// SetConditions of this DxGatewayAssociation.
func (mg *DxGatewayAssociation) SetConditions(c ...xpv1.Condition) {
	mg.Status.SetConditions(c...)
}

// SetDeletionPolicy of this DxGatewayAssociation.
func (mg *DxGatewayAssociation) SetDeletionPolicy(r xpv1.DeletionPolicy) {
	mg.Spec.DeletionPolicy = r
}

// SetProviderConfigReference of this DxGatewayAssociation.
func (mg *DxGatewayAssociation) SetProviderConfigReference(r *xpv1.Reference) {
	mg.Spec.ProviderConfigReference = r
}

/*
SetProviderReference of this DxGatewayAssociation.
Deprecated: Use SetProviderConfigReference.
*/
func (mg *DxGatewayAssociation) SetProviderReference(r *xpv1.Reference) {
	mg.Spec.ProviderReference = r
}

// SetWriteConnectionSecretToReference of this DxGatewayAssociation.
func (mg *DxGatewayAssociation) SetWriteConnectionSecretToReference(r *xpv1.SecretReference) {
	mg.Spec.WriteConnectionSecretToReference = r
}

// GetCondition of this DxGatewayAssociationProposal.
func (mg *DxGatewayAssociationProposal) GetCondition(ct xpv1.ConditionType) xpv1.Condition {
	return mg.Status.GetCondition(ct)
}

// GetDeletionPolicy of this DxGatewayAssociationProposal.
func (mg *DxGatewayAssociationProposal) GetDeletionPolicy() xpv1.DeletionPolicy {
	return mg.Spec.DeletionPolicy
}

// GetProviderConfigReference of this DxGatewayAssociationProposal.
func (mg *DxGatewayAssociationProposal) GetProviderConfigReference() *xpv1.Reference {
	return mg.Spec.ProviderConfigReference
}

/*
GetProviderReference of this DxGatewayAssociationProposal.
Deprecated: Use GetProviderConfigReference.
*/
func (mg *DxGatewayAssociationProposal) GetProviderReference() *xpv1.Reference {
	return mg.Spec.ProviderReference
}

// GetWriteConnectionSecretToReference of this DxGatewayAssociationProposal.
func (mg *DxGatewayAssociationProposal) GetWriteConnectionSecretToReference() *xpv1.SecretReference {
	return mg.Spec.WriteConnectionSecretToReference
}

// SetConditions of this DxGatewayAssociationProposal.
func (mg *DxGatewayAssociationProposal) SetConditions(c ...xpv1.Condition) {
	mg.Status.SetConditions(c...)
}

// SetDeletionPolicy of this DxGatewayAssociationProposal.
func (mg *DxGatewayAssociationProposal) SetDeletionPolicy(r xpv1.DeletionPolicy) {
	mg.Spec.DeletionPolicy = r
}

// SetProviderConfigReference of this DxGatewayAssociationProposal.
func (mg *DxGatewayAssociationProposal) SetProviderConfigReference(r *xpv1.Reference) {
	mg.Spec.ProviderConfigReference = r
}

/*
SetProviderReference of this DxGatewayAssociationProposal.
Deprecated: Use SetProviderConfigReference.
*/
func (mg *DxGatewayAssociationProposal) SetProviderReference(r *xpv1.Reference) {
	mg.Spec.ProviderReference = r
}

// SetWriteConnectionSecretToReference of this DxGatewayAssociationProposal.
func (mg *DxGatewayAssociationProposal) SetWriteConnectionSecretToReference(r *xpv1.SecretReference) {
	mg.Spec.WriteConnectionSecretToReference = r
}

// GetCondition of this DxHostedPrivateVirtualInterface.
func (mg *DxHostedPrivateVirtualInterface) GetCondition(ct xpv1.ConditionType) xpv1.Condition {
	return mg.Status.GetCondition(ct)
}

// GetDeletionPolicy of this DxHostedPrivateVirtualInterface.
func (mg *DxHostedPrivateVirtualInterface) GetDeletionPolicy() xpv1.DeletionPolicy {
	return mg.Spec.DeletionPolicy
}

// GetProviderConfigReference of this DxHostedPrivateVirtualInterface.
func (mg *DxHostedPrivateVirtualInterface) GetProviderConfigReference() *xpv1.Reference {
	return mg.Spec.ProviderConfigReference
}

/*
GetProviderReference of this DxHostedPrivateVirtualInterface.
Deprecated: Use GetProviderConfigReference.
*/
func (mg *DxHostedPrivateVirtualInterface) GetProviderReference() *xpv1.Reference {
	return mg.Spec.ProviderReference
}

// GetWriteConnectionSecretToReference of this DxHostedPrivateVirtualInterface.
func (mg *DxHostedPrivateVirtualInterface) GetWriteConnectionSecretToReference() *xpv1.SecretReference {
	return mg.Spec.WriteConnectionSecretToReference
}

// SetConditions of this DxHostedPrivateVirtualInterface.
func (mg *DxHostedPrivateVirtualInterface) SetConditions(c ...xpv1.Condition) {
	mg.Status.SetConditions(c...)
}

// SetDeletionPolicy of this DxHostedPrivateVirtualInterface.
func (mg *DxHostedPrivateVirtualInterface) SetDeletionPolicy(r xpv1.DeletionPolicy) {
	mg.Spec.DeletionPolicy = r
}

// SetProviderConfigReference of this DxHostedPrivateVirtualInterface.
func (mg *DxHostedPrivateVirtualInterface) SetProviderConfigReference(r *xpv1.Reference) {
	mg.Spec.ProviderConfigReference = r
}

/*
SetProviderReference of this DxHostedPrivateVirtualInterface.
Deprecated: Use SetProviderConfigReference.
*/
func (mg *DxHostedPrivateVirtualInterface) SetProviderReference(r *xpv1.Reference) {
	mg.Spec.ProviderReference = r
}

// SetWriteConnectionSecretToReference of this DxHostedPrivateVirtualInterface.
func (mg *DxHostedPrivateVirtualInterface) SetWriteConnectionSecretToReference(r *xpv1.SecretReference) {
	mg.Spec.WriteConnectionSecretToReference = r
}

// GetCondition of this DxHostedPrivateVirtualInterfaceAccepter.
func (mg *DxHostedPrivateVirtualInterfaceAccepter) GetCondition(ct xpv1.ConditionType) xpv1.Condition {
	return mg.Status.GetCondition(ct)
}

// GetDeletionPolicy of this DxHostedPrivateVirtualInterfaceAccepter.
func (mg *DxHostedPrivateVirtualInterfaceAccepter) GetDeletionPolicy() xpv1.DeletionPolicy {
	return mg.Spec.DeletionPolicy
}

// GetProviderConfigReference of this DxHostedPrivateVirtualInterfaceAccepter.
func (mg *DxHostedPrivateVirtualInterfaceAccepter) GetProviderConfigReference() *xpv1.Reference {
	return mg.Spec.ProviderConfigReference
}

/*
GetProviderReference of this DxHostedPrivateVirtualInterfaceAccepter.
Deprecated: Use GetProviderConfigReference.
*/
func (mg *DxHostedPrivateVirtualInterfaceAccepter) GetProviderReference() *xpv1.Reference {
	return mg.Spec.ProviderReference
}

// GetWriteConnectionSecretToReference of this DxHostedPrivateVirtualInterfaceAccepter.
func (mg *DxHostedPrivateVirtualInterfaceAccepter) GetWriteConnectionSecretToReference() *xpv1.SecretReference {
	return mg.Spec.WriteConnectionSecretToReference
}

// SetConditions of this DxHostedPrivateVirtualInterfaceAccepter.
func (mg *DxHostedPrivateVirtualInterfaceAccepter) SetConditions(c ...xpv1.Condition) {
	mg.Status.SetConditions(c...)
}

// SetDeletionPolicy of this DxHostedPrivateVirtualInterfaceAccepter.
func (mg *DxHostedPrivateVirtualInterfaceAccepter) SetDeletionPolicy(r xpv1.DeletionPolicy) {
	mg.Spec.DeletionPolicy = r
}

// SetProviderConfigReference of this DxHostedPrivateVirtualInterfaceAccepter.
func (mg *DxHostedPrivateVirtualInterfaceAccepter) SetProviderConfigReference(r *xpv1.Reference) {
	mg.Spec.ProviderConfigReference = r
}

/*
SetProviderReference of this DxHostedPrivateVirtualInterfaceAccepter.
Deprecated: Use SetProviderConfigReference.
*/
func (mg *DxHostedPrivateVirtualInterfaceAccepter) SetProviderReference(r *xpv1.Reference) {
	mg.Spec.ProviderReference = r
}

// SetWriteConnectionSecretToReference of this DxHostedPrivateVirtualInterfaceAccepter.
func (mg *DxHostedPrivateVirtualInterfaceAccepter) SetWriteConnectionSecretToReference(r *xpv1.SecretReference) {
	mg.Spec.WriteConnectionSecretToReference = r
}

// GetCondition of this DxHostedPublicVirtualInterface.
func (mg *DxHostedPublicVirtualInterface) GetCondition(ct xpv1.ConditionType) xpv1.Condition {
	return mg.Status.GetCondition(ct)
}

// GetDeletionPolicy of this DxHostedPublicVirtualInterface.
func (mg *DxHostedPublicVirtualInterface) GetDeletionPolicy() xpv1.DeletionPolicy {
	return mg.Spec.DeletionPolicy
}

// GetProviderConfigReference of this DxHostedPublicVirtualInterface.
func (mg *DxHostedPublicVirtualInterface) GetProviderConfigReference() *xpv1.Reference {
	return mg.Spec.ProviderConfigReference
}

/*
GetProviderReference of this DxHostedPublicVirtualInterface.
Deprecated: Use GetProviderConfigReference.
*/
func (mg *DxHostedPublicVirtualInterface) GetProviderReference() *xpv1.Reference {
	return mg.Spec.ProviderReference
}

// GetWriteConnectionSecretToReference of this DxHostedPublicVirtualInterface.
func (mg *DxHostedPublicVirtualInterface) GetWriteConnectionSecretToReference() *xpv1.SecretReference {
	return mg.Spec.WriteConnectionSecretToReference
}

// SetConditions of this DxHostedPublicVirtualInterface.
func (mg *DxHostedPublicVirtualInterface) SetConditions(c ...xpv1.Condition) {
	mg.Status.SetConditions(c...)
}

// SetDeletionPolicy of this DxHostedPublicVirtualInterface.
func (mg *DxHostedPublicVirtualInterface) SetDeletionPolicy(r xpv1.DeletionPolicy) {
	mg.Spec.DeletionPolicy = r
}

// SetProviderConfigReference of this DxHostedPublicVirtualInterface.
func (mg *DxHostedPublicVirtualInterface) SetProviderConfigReference(r *xpv1.Reference) {
	mg.Spec.ProviderConfigReference = r
}

/*
SetProviderReference of this DxHostedPublicVirtualInterface.
Deprecated: Use SetProviderConfigReference.
*/
func (mg *DxHostedPublicVirtualInterface) SetProviderReference(r *xpv1.Reference) {
	mg.Spec.ProviderReference = r
}

// SetWriteConnectionSecretToReference of this DxHostedPublicVirtualInterface.
func (mg *DxHostedPublicVirtualInterface) SetWriteConnectionSecretToReference(r *xpv1.SecretReference) {
	mg.Spec.WriteConnectionSecretToReference = r
}

// GetCondition of this DxHostedPublicVirtualInterfaceAccepter.
func (mg *DxHostedPublicVirtualInterfaceAccepter) GetCondition(ct xpv1.ConditionType) xpv1.Condition {
	return mg.Status.GetCondition(ct)
}

// GetDeletionPolicy of this DxHostedPublicVirtualInterfaceAccepter.
func (mg *DxHostedPublicVirtualInterfaceAccepter) GetDeletionPolicy() xpv1.DeletionPolicy {
	return mg.Spec.DeletionPolicy
}

// GetProviderConfigReference of this DxHostedPublicVirtualInterfaceAccepter.
func (mg *DxHostedPublicVirtualInterfaceAccepter) GetProviderConfigReference() *xpv1.Reference {
	return mg.Spec.ProviderConfigReference
}

/*
GetProviderReference of this DxHostedPublicVirtualInterfaceAccepter.
Deprecated: Use GetProviderConfigReference.
*/
func (mg *DxHostedPublicVirtualInterfaceAccepter) GetProviderReference() *xpv1.Reference {
	return mg.Spec.ProviderReference
}

// GetWriteConnectionSecretToReference of this DxHostedPublicVirtualInterfaceAccepter.
func (mg *DxHostedPublicVirtualInterfaceAccepter) GetWriteConnectionSecretToReference() *xpv1.SecretReference {
	return mg.Spec.WriteConnectionSecretToReference
}

// SetConditions of this DxHostedPublicVirtualInterfaceAccepter.
func (mg *DxHostedPublicVirtualInterfaceAccepter) SetConditions(c ...xpv1.Condition) {
	mg.Status.SetConditions(c...)
}

// SetDeletionPolicy of this DxHostedPublicVirtualInterfaceAccepter.
func (mg *DxHostedPublicVirtualInterfaceAccepter) SetDeletionPolicy(r xpv1.DeletionPolicy) {
	mg.Spec.DeletionPolicy = r
}

// SetProviderConfigReference of this DxHostedPublicVirtualInterfaceAccepter.
func (mg *DxHostedPublicVirtualInterfaceAccepter) SetProviderConfigReference(r *xpv1.Reference) {
	mg.Spec.ProviderConfigReference = r
}

/*
SetProviderReference of this DxHostedPublicVirtualInterfaceAccepter.
Deprecated: Use SetProviderConfigReference.
*/
func (mg *DxHostedPublicVirtualInterfaceAccepter) SetProviderReference(r *xpv1.Reference) {
	mg.Spec.ProviderReference = r
}

// SetWriteConnectionSecretToReference of this DxHostedPublicVirtualInterfaceAccepter.
func (mg *DxHostedPublicVirtualInterfaceAccepter) SetWriteConnectionSecretToReference(r *xpv1.SecretReference) {
	mg.Spec.WriteConnectionSecretToReference = r
}

// GetCondition of this DxHostedTransitVirtualInterface.
func (mg *DxHostedTransitVirtualInterface) GetCondition(ct xpv1.ConditionType) xpv1.Condition {
	return mg.Status.GetCondition(ct)
}

// GetDeletionPolicy of this DxHostedTransitVirtualInterface.
func (mg *DxHostedTransitVirtualInterface) GetDeletionPolicy() xpv1.DeletionPolicy {
	return mg.Spec.DeletionPolicy
}

// GetProviderConfigReference of this DxHostedTransitVirtualInterface.
func (mg *DxHostedTransitVirtualInterface) GetProviderConfigReference() *xpv1.Reference {
	return mg.Spec.ProviderConfigReference
}

/*
GetProviderReference of this DxHostedTransitVirtualInterface.
Deprecated: Use GetProviderConfigReference.
*/
func (mg *DxHostedTransitVirtualInterface) GetProviderReference() *xpv1.Reference {
	return mg.Spec.ProviderReference
}

// GetWriteConnectionSecretToReference of this DxHostedTransitVirtualInterface.
func (mg *DxHostedTransitVirtualInterface) GetWriteConnectionSecretToReference() *xpv1.SecretReference {
	return mg.Spec.WriteConnectionSecretToReference
}

// SetConditions of this DxHostedTransitVirtualInterface.
func (mg *DxHostedTransitVirtualInterface) SetConditions(c ...xpv1.Condition) {
	mg.Status.SetConditions(c...)
}

// SetDeletionPolicy of this DxHostedTransitVirtualInterface.
func (mg *DxHostedTransitVirtualInterface) SetDeletionPolicy(r xpv1.DeletionPolicy) {
	mg.Spec.DeletionPolicy = r
}

// SetProviderConfigReference of this DxHostedTransitVirtualInterface.
func (mg *DxHostedTransitVirtualInterface) SetProviderConfigReference(r *xpv1.Reference) {
	mg.Spec.ProviderConfigReference = r
}

/*
SetProviderReference of this DxHostedTransitVirtualInterface.
Deprecated: Use SetProviderConfigReference.
*/
func (mg *DxHostedTransitVirtualInterface) SetProviderReference(r *xpv1.Reference) {
	mg.Spec.ProviderReference = r
}

// SetWriteConnectionSecretToReference of this DxHostedTransitVirtualInterface.
func (mg *DxHostedTransitVirtualInterface) SetWriteConnectionSecretToReference(r *xpv1.SecretReference) {
	mg.Spec.WriteConnectionSecretToReference = r
}

// GetCondition of this DxHostedTransitVirtualInterfaceAccepter.
func (mg *DxHostedTransitVirtualInterfaceAccepter) GetCondition(ct xpv1.ConditionType) xpv1.Condition {
	return mg.Status.GetCondition(ct)
}

// GetDeletionPolicy of this DxHostedTransitVirtualInterfaceAccepter.
func (mg *DxHostedTransitVirtualInterfaceAccepter) GetDeletionPolicy() xpv1.DeletionPolicy {
	return mg.Spec.DeletionPolicy
}

// GetProviderConfigReference of this DxHostedTransitVirtualInterfaceAccepter.
func (mg *DxHostedTransitVirtualInterfaceAccepter) GetProviderConfigReference() *xpv1.Reference {
	return mg.Spec.ProviderConfigReference
}

/*
GetProviderReference of this DxHostedTransitVirtualInterfaceAccepter.
Deprecated: Use GetProviderConfigReference.
*/
func (mg *DxHostedTransitVirtualInterfaceAccepter) GetProviderReference() *xpv1.Reference {
	return mg.Spec.ProviderReference
}

// GetWriteConnectionSecretToReference of this DxHostedTransitVirtualInterfaceAccepter.
func (mg *DxHostedTransitVirtualInterfaceAccepter) GetWriteConnectionSecretToReference() *xpv1.SecretReference {
	return mg.Spec.WriteConnectionSecretToReference
}

// SetConditions of this DxHostedTransitVirtualInterfaceAccepter.
func (mg *DxHostedTransitVirtualInterfaceAccepter) SetConditions(c ...xpv1.Condition) {
	mg.Status.SetConditions(c...)
}

// SetDeletionPolicy of this DxHostedTransitVirtualInterfaceAccepter.
func (mg *DxHostedTransitVirtualInterfaceAccepter) SetDeletionPolicy(r xpv1.DeletionPolicy) {
	mg.Spec.DeletionPolicy = r
}

// SetProviderConfigReference of this DxHostedTransitVirtualInterfaceAccepter.
func (mg *DxHostedTransitVirtualInterfaceAccepter) SetProviderConfigReference(r *xpv1.Reference) {
	mg.Spec.ProviderConfigReference = r
}

/*
SetProviderReference of this DxHostedTransitVirtualInterfaceAccepter.
Deprecated: Use SetProviderConfigReference.
*/
func (mg *DxHostedTransitVirtualInterfaceAccepter) SetProviderReference(r *xpv1.Reference) {
	mg.Spec.ProviderReference = r
}

// SetWriteConnectionSecretToReference of this DxHostedTransitVirtualInterfaceAccepter.
func (mg *DxHostedTransitVirtualInterfaceAccepter) SetWriteConnectionSecretToReference(r *xpv1.SecretReference) {
	mg.Spec.WriteConnectionSecretToReference = r
}

// GetCondition of this DxLag.
func (mg *DxLag) GetCondition(ct xpv1.ConditionType) xpv1.Condition {
	return mg.Status.GetCondition(ct)
}

// GetDeletionPolicy of this DxLag.
func (mg *DxLag) GetDeletionPolicy() xpv1.DeletionPolicy {
	return mg.Spec.DeletionPolicy
}

// GetProviderConfigReference of this DxLag.
func (mg *DxLag) GetProviderConfigReference() *xpv1.Reference {
	return mg.Spec.ProviderConfigReference
}

/*
GetProviderReference of this DxLag.
Deprecated: Use GetProviderConfigReference.
*/
func (mg *DxLag) GetProviderReference() *xpv1.Reference {
	return mg.Spec.ProviderReference
}

// GetWriteConnectionSecretToReference of this DxLag.
func (mg *DxLag) GetWriteConnectionSecretToReference() *xpv1.SecretReference {
	return mg.Spec.WriteConnectionSecretToReference
}

// SetConditions of this DxLag.
func (mg *DxLag) SetConditions(c ...xpv1.Condition) {
	mg.Status.SetConditions(c...)
}

// SetDeletionPolicy of this DxLag.
func (mg *DxLag) SetDeletionPolicy(r xpv1.DeletionPolicy) {
	mg.Spec.DeletionPolicy = r
}

// SetProviderConfigReference of this DxLag.
func (mg *DxLag) SetProviderConfigReference(r *xpv1.Reference) {
	mg.Spec.ProviderConfigReference = r
}

/*
SetProviderReference of this DxLag.
Deprecated: Use SetProviderConfigReference.
*/
func (mg *DxLag) SetProviderReference(r *xpv1.Reference) {
	mg.Spec.ProviderReference = r
}

// SetWriteConnectionSecretToReference of this DxLag.
func (mg *DxLag) SetWriteConnectionSecretToReference(r *xpv1.SecretReference) {
	mg.Spec.WriteConnectionSecretToReference = r
}

// GetCondition of this DxPrivateVirtualInterface.
func (mg *DxPrivateVirtualInterface) GetCondition(ct xpv1.ConditionType) xpv1.Condition {
	return mg.Status.GetCondition(ct)
}

// GetDeletionPolicy of this DxPrivateVirtualInterface.
func (mg *DxPrivateVirtualInterface) GetDeletionPolicy() xpv1.DeletionPolicy {
	return mg.Spec.DeletionPolicy
}

// GetProviderConfigReference of this DxPrivateVirtualInterface.
func (mg *DxPrivateVirtualInterface) GetProviderConfigReference() *xpv1.Reference {
	return mg.Spec.ProviderConfigReference
}

/*
GetProviderReference of this DxPrivateVirtualInterface.
Deprecated: Use GetProviderConfigReference.
*/
func (mg *DxPrivateVirtualInterface) GetProviderReference() *xpv1.Reference {
	return mg.Spec.ProviderReference
}

// GetWriteConnectionSecretToReference of this DxPrivateVirtualInterface.
func (mg *DxPrivateVirtualInterface) GetWriteConnectionSecretToReference() *xpv1.SecretReference {
	return mg.Spec.WriteConnectionSecretToReference
}

// SetConditions of this DxPrivateVirtualInterface.
func (mg *DxPrivateVirtualInterface) SetConditions(c ...xpv1.Condition) {
	mg.Status.SetConditions(c...)
}

// SetDeletionPolicy of this DxPrivateVirtualInterface.
func (mg *DxPrivateVirtualInterface) SetDeletionPolicy(r xpv1.DeletionPolicy) {
	mg.Spec.DeletionPolicy = r
}

// SetProviderConfigReference of this DxPrivateVirtualInterface.
func (mg *DxPrivateVirtualInterface) SetProviderConfigReference(r *xpv1.Reference) {
	mg.Spec.ProviderConfigReference = r
}

/*
SetProviderReference of this DxPrivateVirtualInterface.
Deprecated: Use SetProviderConfigReference.
*/
func (mg *DxPrivateVirtualInterface) SetProviderReference(r *xpv1.Reference) {
	mg.Spec.ProviderReference = r
}

// SetWriteConnectionSecretToReference of this DxPrivateVirtualInterface.
func (mg *DxPrivateVirtualInterface) SetWriteConnectionSecretToReference(r *xpv1.SecretReference) {
	mg.Spec.WriteConnectionSecretToReference = r
}

// GetCondition of this DxPublicVirtualInterface.
func (mg *DxPublicVirtualInterface) GetCondition(ct xpv1.ConditionType) xpv1.Condition {
	return mg.Status.GetCondition(ct)
}

// GetDeletionPolicy of this DxPublicVirtualInterface.
func (mg *DxPublicVirtualInterface) GetDeletionPolicy() xpv1.DeletionPolicy {
	return mg.Spec.DeletionPolicy
}

// GetProviderConfigReference of this DxPublicVirtualInterface.
func (mg *DxPublicVirtualInterface) GetProviderConfigReference() *xpv1.Reference {
	return mg.Spec.ProviderConfigReference
}

/*
GetProviderReference of this DxPublicVirtualInterface.
Deprecated: Use GetProviderConfigReference.
*/
func (mg *DxPublicVirtualInterface) GetProviderReference() *xpv1.Reference {
	return mg.Spec.ProviderReference
}

// GetWriteConnectionSecretToReference of this DxPublicVirtualInterface.
func (mg *DxPublicVirtualInterface) GetWriteConnectionSecretToReference() *xpv1.SecretReference {
	return mg.Spec.WriteConnectionSecretToReference
}

// SetConditions of this DxPublicVirtualInterface.
func (mg *DxPublicVirtualInterface) SetConditions(c ...xpv1.Condition) {
	mg.Status.SetConditions(c...)
}

// SetDeletionPolicy of this DxPublicVirtualInterface.
func (mg *DxPublicVirtualInterface) SetDeletionPolicy(r xpv1.DeletionPolicy) {
	mg.Spec.DeletionPolicy = r
}

// SetProviderConfigReference of this DxPublicVirtualInterface.
func (mg *DxPublicVirtualInterface) SetProviderConfigReference(r *xpv1.Reference) {
	mg.Spec.ProviderConfigReference = r
}

/*
SetProviderReference of this DxPublicVirtualInterface.
Deprecated: Use SetProviderConfigReference.
*/
func (mg *DxPublicVirtualInterface) SetProviderReference(r *xpv1.Reference) {
	mg.Spec.ProviderReference = r
}

// SetWriteConnectionSecretToReference of this DxPublicVirtualInterface.
func (mg *DxPublicVirtualInterface) SetWriteConnectionSecretToReference(r *xpv1.SecretReference) {
	mg.Spec.WriteConnectionSecretToReference = r
}

// GetCondition of this DxTransitVirtualInterface.
func (mg *DxTransitVirtualInterface) GetCondition(ct xpv1.ConditionType) xpv1.Condition {
	return mg.Status.GetCondition(ct)
}

// GetDeletionPolicy of this DxTransitVirtualInterface.
func (mg *DxTransitVirtualInterface) GetDeletionPolicy() xpv1.DeletionPolicy {
	return mg.Spec.DeletionPolicy
}

// GetProviderConfigReference of this DxTransitVirtualInterface.
func (mg *DxTransitVirtualInterface) GetProviderConfigReference() *xpv1.Reference {
	return mg.Spec.ProviderConfigReference
}

/*
GetProviderReference of this DxTransitVirtualInterface.
Deprecated: Use GetProviderConfigReference.
*/
func (mg *DxTransitVirtualInterface) GetProviderReference() *xpv1.Reference {
	return mg.Spec.ProviderReference
}

// GetWriteConnectionSecretToReference of this DxTransitVirtualInterface.
func (mg *DxTransitVirtualInterface) GetWriteConnectionSecretToReference() *xpv1.SecretReference {
	return mg.Spec.WriteConnectionSecretToReference
}

// SetConditions of this DxTransitVirtualInterface.
func (mg *DxTransitVirtualInterface) SetConditions(c ...xpv1.Condition) {
	mg.Status.SetConditions(c...)
}

// SetDeletionPolicy of this DxTransitVirtualInterface.
func (mg *DxTransitVirtualInterface) SetDeletionPolicy(r xpv1.DeletionPolicy) {
	mg.Spec.DeletionPolicy = r
}

// SetProviderConfigReference of this DxTransitVirtualInterface.
func (mg *DxTransitVirtualInterface) SetProviderConfigReference(r *xpv1.Reference) {
	mg.Spec.ProviderConfigReference = r
}

/*
SetProviderReference of this DxTransitVirtualInterface.
Deprecated: Use SetProviderConfigReference.
*/
func (mg *DxTransitVirtualInterface) SetProviderReference(r *xpv1.Reference) {
	mg.Spec.ProviderReference = r
}

// SetWriteConnectionSecretToReference of this DxTransitVirtualInterface.
func (mg *DxTransitVirtualInterface) SetWriteConnectionSecretToReference(r *xpv1.SecretReference) {
	mg.Spec.WriteConnectionSecretToReference = r
}
