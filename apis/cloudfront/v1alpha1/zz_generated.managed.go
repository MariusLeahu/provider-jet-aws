/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/
// Code generated by angryjet. DO NOT EDIT.

package v1alpha1

import xpv1 "github.com/crossplane/crossplane-runtime/apis/common/v1"

// GetCondition of this CloudfrontCachePolicy.
func (mg *CloudfrontCachePolicy) GetCondition(ct xpv1.ConditionType) xpv1.Condition {
	return mg.Status.GetCondition(ct)
}

// GetDeletionPolicy of this CloudfrontCachePolicy.
func (mg *CloudfrontCachePolicy) GetDeletionPolicy() xpv1.DeletionPolicy {
	return mg.Spec.DeletionPolicy
}

// GetProviderConfigReference of this CloudfrontCachePolicy.
func (mg *CloudfrontCachePolicy) GetProviderConfigReference() *xpv1.Reference {
	return mg.Spec.ProviderConfigReference
}

/*
GetProviderReference of this CloudfrontCachePolicy.
Deprecated: Use GetProviderConfigReference.
*/
func (mg *CloudfrontCachePolicy) GetProviderReference() *xpv1.Reference {
	return mg.Spec.ProviderReference
}

// GetWriteConnectionSecretToReference of this CloudfrontCachePolicy.
func (mg *CloudfrontCachePolicy) GetWriteConnectionSecretToReference() *xpv1.SecretReference {
	return mg.Spec.WriteConnectionSecretToReference
}

// SetConditions of this CloudfrontCachePolicy.
func (mg *CloudfrontCachePolicy) SetConditions(c ...xpv1.Condition) {
	mg.Status.SetConditions(c...)
}

// SetDeletionPolicy of this CloudfrontCachePolicy.
func (mg *CloudfrontCachePolicy) SetDeletionPolicy(r xpv1.DeletionPolicy) {
	mg.Spec.DeletionPolicy = r
}

// SetProviderConfigReference of this CloudfrontCachePolicy.
func (mg *CloudfrontCachePolicy) SetProviderConfigReference(r *xpv1.Reference) {
	mg.Spec.ProviderConfigReference = r
}

/*
SetProviderReference of this CloudfrontCachePolicy.
Deprecated: Use SetProviderConfigReference.
*/
func (mg *CloudfrontCachePolicy) SetProviderReference(r *xpv1.Reference) {
	mg.Spec.ProviderReference = r
}

// SetWriteConnectionSecretToReference of this CloudfrontCachePolicy.
func (mg *CloudfrontCachePolicy) SetWriteConnectionSecretToReference(r *xpv1.SecretReference) {
	mg.Spec.WriteConnectionSecretToReference = r
}

// GetCondition of this CloudfrontDistribution.
func (mg *CloudfrontDistribution) GetCondition(ct xpv1.ConditionType) xpv1.Condition {
	return mg.Status.GetCondition(ct)
}

// GetDeletionPolicy of this CloudfrontDistribution.
func (mg *CloudfrontDistribution) GetDeletionPolicy() xpv1.DeletionPolicy {
	return mg.Spec.DeletionPolicy
}

// GetProviderConfigReference of this CloudfrontDistribution.
func (mg *CloudfrontDistribution) GetProviderConfigReference() *xpv1.Reference {
	return mg.Spec.ProviderConfigReference
}

/*
GetProviderReference of this CloudfrontDistribution.
Deprecated: Use GetProviderConfigReference.
*/
func (mg *CloudfrontDistribution) GetProviderReference() *xpv1.Reference {
	return mg.Spec.ProviderReference
}

// GetWriteConnectionSecretToReference of this CloudfrontDistribution.
func (mg *CloudfrontDistribution) GetWriteConnectionSecretToReference() *xpv1.SecretReference {
	return mg.Spec.WriteConnectionSecretToReference
}

// SetConditions of this CloudfrontDistribution.
func (mg *CloudfrontDistribution) SetConditions(c ...xpv1.Condition) {
	mg.Status.SetConditions(c...)
}

// SetDeletionPolicy of this CloudfrontDistribution.
func (mg *CloudfrontDistribution) SetDeletionPolicy(r xpv1.DeletionPolicy) {
	mg.Spec.DeletionPolicy = r
}

// SetProviderConfigReference of this CloudfrontDistribution.
func (mg *CloudfrontDistribution) SetProviderConfigReference(r *xpv1.Reference) {
	mg.Spec.ProviderConfigReference = r
}

/*
SetProviderReference of this CloudfrontDistribution.
Deprecated: Use SetProviderConfigReference.
*/
func (mg *CloudfrontDistribution) SetProviderReference(r *xpv1.Reference) {
	mg.Spec.ProviderReference = r
}

// SetWriteConnectionSecretToReference of this CloudfrontDistribution.
func (mg *CloudfrontDistribution) SetWriteConnectionSecretToReference(r *xpv1.SecretReference) {
	mg.Spec.WriteConnectionSecretToReference = r
}

// GetCondition of this CloudfrontFunction.
func (mg *CloudfrontFunction) GetCondition(ct xpv1.ConditionType) xpv1.Condition {
	return mg.Status.GetCondition(ct)
}

// GetDeletionPolicy of this CloudfrontFunction.
func (mg *CloudfrontFunction) GetDeletionPolicy() xpv1.DeletionPolicy {
	return mg.Spec.DeletionPolicy
}

// GetProviderConfigReference of this CloudfrontFunction.
func (mg *CloudfrontFunction) GetProviderConfigReference() *xpv1.Reference {
	return mg.Spec.ProviderConfigReference
}

/*
GetProviderReference of this CloudfrontFunction.
Deprecated: Use GetProviderConfigReference.
*/
func (mg *CloudfrontFunction) GetProviderReference() *xpv1.Reference {
	return mg.Spec.ProviderReference
}

// GetWriteConnectionSecretToReference of this CloudfrontFunction.
func (mg *CloudfrontFunction) GetWriteConnectionSecretToReference() *xpv1.SecretReference {
	return mg.Spec.WriteConnectionSecretToReference
}

// SetConditions of this CloudfrontFunction.
func (mg *CloudfrontFunction) SetConditions(c ...xpv1.Condition) {
	mg.Status.SetConditions(c...)
}

// SetDeletionPolicy of this CloudfrontFunction.
func (mg *CloudfrontFunction) SetDeletionPolicy(r xpv1.DeletionPolicy) {
	mg.Spec.DeletionPolicy = r
}

// SetProviderConfigReference of this CloudfrontFunction.
func (mg *CloudfrontFunction) SetProviderConfigReference(r *xpv1.Reference) {
	mg.Spec.ProviderConfigReference = r
}

/*
SetProviderReference of this CloudfrontFunction.
Deprecated: Use SetProviderConfigReference.
*/
func (mg *CloudfrontFunction) SetProviderReference(r *xpv1.Reference) {
	mg.Spec.ProviderReference = r
}

// SetWriteConnectionSecretToReference of this CloudfrontFunction.
func (mg *CloudfrontFunction) SetWriteConnectionSecretToReference(r *xpv1.SecretReference) {
	mg.Spec.WriteConnectionSecretToReference = r
}

// GetCondition of this CloudfrontKeyGroup.
func (mg *CloudfrontKeyGroup) GetCondition(ct xpv1.ConditionType) xpv1.Condition {
	return mg.Status.GetCondition(ct)
}

// GetDeletionPolicy of this CloudfrontKeyGroup.
func (mg *CloudfrontKeyGroup) GetDeletionPolicy() xpv1.DeletionPolicy {
	return mg.Spec.DeletionPolicy
}

// GetProviderConfigReference of this CloudfrontKeyGroup.
func (mg *CloudfrontKeyGroup) GetProviderConfigReference() *xpv1.Reference {
	return mg.Spec.ProviderConfigReference
}

/*
GetProviderReference of this CloudfrontKeyGroup.
Deprecated: Use GetProviderConfigReference.
*/
func (mg *CloudfrontKeyGroup) GetProviderReference() *xpv1.Reference {
	return mg.Spec.ProviderReference
}

// GetWriteConnectionSecretToReference of this CloudfrontKeyGroup.
func (mg *CloudfrontKeyGroup) GetWriteConnectionSecretToReference() *xpv1.SecretReference {
	return mg.Spec.WriteConnectionSecretToReference
}

// SetConditions of this CloudfrontKeyGroup.
func (mg *CloudfrontKeyGroup) SetConditions(c ...xpv1.Condition) {
	mg.Status.SetConditions(c...)
}

// SetDeletionPolicy of this CloudfrontKeyGroup.
func (mg *CloudfrontKeyGroup) SetDeletionPolicy(r xpv1.DeletionPolicy) {
	mg.Spec.DeletionPolicy = r
}

// SetProviderConfigReference of this CloudfrontKeyGroup.
func (mg *CloudfrontKeyGroup) SetProviderConfigReference(r *xpv1.Reference) {
	mg.Spec.ProviderConfigReference = r
}

/*
SetProviderReference of this CloudfrontKeyGroup.
Deprecated: Use SetProviderConfigReference.
*/
func (mg *CloudfrontKeyGroup) SetProviderReference(r *xpv1.Reference) {
	mg.Spec.ProviderReference = r
}

// SetWriteConnectionSecretToReference of this CloudfrontKeyGroup.
func (mg *CloudfrontKeyGroup) SetWriteConnectionSecretToReference(r *xpv1.SecretReference) {
	mg.Spec.WriteConnectionSecretToReference = r
}

// GetCondition of this CloudfrontMonitoringSubscription.
func (mg *CloudfrontMonitoringSubscription) GetCondition(ct xpv1.ConditionType) xpv1.Condition {
	return mg.Status.GetCondition(ct)
}

// GetDeletionPolicy of this CloudfrontMonitoringSubscription.
func (mg *CloudfrontMonitoringSubscription) GetDeletionPolicy() xpv1.DeletionPolicy {
	return mg.Spec.DeletionPolicy
}

// GetProviderConfigReference of this CloudfrontMonitoringSubscription.
func (mg *CloudfrontMonitoringSubscription) GetProviderConfigReference() *xpv1.Reference {
	return mg.Spec.ProviderConfigReference
}

/*
GetProviderReference of this CloudfrontMonitoringSubscription.
Deprecated: Use GetProviderConfigReference.
*/
func (mg *CloudfrontMonitoringSubscription) GetProviderReference() *xpv1.Reference {
	return mg.Spec.ProviderReference
}

// GetWriteConnectionSecretToReference of this CloudfrontMonitoringSubscription.
func (mg *CloudfrontMonitoringSubscription) GetWriteConnectionSecretToReference() *xpv1.SecretReference {
	return mg.Spec.WriteConnectionSecretToReference
}

// SetConditions of this CloudfrontMonitoringSubscription.
func (mg *CloudfrontMonitoringSubscription) SetConditions(c ...xpv1.Condition) {
	mg.Status.SetConditions(c...)
}

// SetDeletionPolicy of this CloudfrontMonitoringSubscription.
func (mg *CloudfrontMonitoringSubscription) SetDeletionPolicy(r xpv1.DeletionPolicy) {
	mg.Spec.DeletionPolicy = r
}

// SetProviderConfigReference of this CloudfrontMonitoringSubscription.
func (mg *CloudfrontMonitoringSubscription) SetProviderConfigReference(r *xpv1.Reference) {
	mg.Spec.ProviderConfigReference = r
}

/*
SetProviderReference of this CloudfrontMonitoringSubscription.
Deprecated: Use SetProviderConfigReference.
*/
func (mg *CloudfrontMonitoringSubscription) SetProviderReference(r *xpv1.Reference) {
	mg.Spec.ProviderReference = r
}

// SetWriteConnectionSecretToReference of this CloudfrontMonitoringSubscription.
func (mg *CloudfrontMonitoringSubscription) SetWriteConnectionSecretToReference(r *xpv1.SecretReference) {
	mg.Spec.WriteConnectionSecretToReference = r
}

// GetCondition of this CloudfrontOriginAccessIdentity.
func (mg *CloudfrontOriginAccessIdentity) GetCondition(ct xpv1.ConditionType) xpv1.Condition {
	return mg.Status.GetCondition(ct)
}

// GetDeletionPolicy of this CloudfrontOriginAccessIdentity.
func (mg *CloudfrontOriginAccessIdentity) GetDeletionPolicy() xpv1.DeletionPolicy {
	return mg.Spec.DeletionPolicy
}

// GetProviderConfigReference of this CloudfrontOriginAccessIdentity.
func (mg *CloudfrontOriginAccessIdentity) GetProviderConfigReference() *xpv1.Reference {
	return mg.Spec.ProviderConfigReference
}

/*
GetProviderReference of this CloudfrontOriginAccessIdentity.
Deprecated: Use GetProviderConfigReference.
*/
func (mg *CloudfrontOriginAccessIdentity) GetProviderReference() *xpv1.Reference {
	return mg.Spec.ProviderReference
}

// GetWriteConnectionSecretToReference of this CloudfrontOriginAccessIdentity.
func (mg *CloudfrontOriginAccessIdentity) GetWriteConnectionSecretToReference() *xpv1.SecretReference {
	return mg.Spec.WriteConnectionSecretToReference
}

// SetConditions of this CloudfrontOriginAccessIdentity.
func (mg *CloudfrontOriginAccessIdentity) SetConditions(c ...xpv1.Condition) {
	mg.Status.SetConditions(c...)
}

// SetDeletionPolicy of this CloudfrontOriginAccessIdentity.
func (mg *CloudfrontOriginAccessIdentity) SetDeletionPolicy(r xpv1.DeletionPolicy) {
	mg.Spec.DeletionPolicy = r
}

// SetProviderConfigReference of this CloudfrontOriginAccessIdentity.
func (mg *CloudfrontOriginAccessIdentity) SetProviderConfigReference(r *xpv1.Reference) {
	mg.Spec.ProviderConfigReference = r
}

/*
SetProviderReference of this CloudfrontOriginAccessIdentity.
Deprecated: Use SetProviderConfigReference.
*/
func (mg *CloudfrontOriginAccessIdentity) SetProviderReference(r *xpv1.Reference) {
	mg.Spec.ProviderReference = r
}

// SetWriteConnectionSecretToReference of this CloudfrontOriginAccessIdentity.
func (mg *CloudfrontOriginAccessIdentity) SetWriteConnectionSecretToReference(r *xpv1.SecretReference) {
	mg.Spec.WriteConnectionSecretToReference = r
}

// GetCondition of this CloudfrontOriginRequestPolicy.
func (mg *CloudfrontOriginRequestPolicy) GetCondition(ct xpv1.ConditionType) xpv1.Condition {
	return mg.Status.GetCondition(ct)
}

// GetDeletionPolicy of this CloudfrontOriginRequestPolicy.
func (mg *CloudfrontOriginRequestPolicy) GetDeletionPolicy() xpv1.DeletionPolicy {
	return mg.Spec.DeletionPolicy
}

// GetProviderConfigReference of this CloudfrontOriginRequestPolicy.
func (mg *CloudfrontOriginRequestPolicy) GetProviderConfigReference() *xpv1.Reference {
	return mg.Spec.ProviderConfigReference
}

/*
GetProviderReference of this CloudfrontOriginRequestPolicy.
Deprecated: Use GetProviderConfigReference.
*/
func (mg *CloudfrontOriginRequestPolicy) GetProviderReference() *xpv1.Reference {
	return mg.Spec.ProviderReference
}

// GetWriteConnectionSecretToReference of this CloudfrontOriginRequestPolicy.
func (mg *CloudfrontOriginRequestPolicy) GetWriteConnectionSecretToReference() *xpv1.SecretReference {
	return mg.Spec.WriteConnectionSecretToReference
}

// SetConditions of this CloudfrontOriginRequestPolicy.
func (mg *CloudfrontOriginRequestPolicy) SetConditions(c ...xpv1.Condition) {
	mg.Status.SetConditions(c...)
}

// SetDeletionPolicy of this CloudfrontOriginRequestPolicy.
func (mg *CloudfrontOriginRequestPolicy) SetDeletionPolicy(r xpv1.DeletionPolicy) {
	mg.Spec.DeletionPolicy = r
}

// SetProviderConfigReference of this CloudfrontOriginRequestPolicy.
func (mg *CloudfrontOriginRequestPolicy) SetProviderConfigReference(r *xpv1.Reference) {
	mg.Spec.ProviderConfigReference = r
}

/*
SetProviderReference of this CloudfrontOriginRequestPolicy.
Deprecated: Use SetProviderConfigReference.
*/
func (mg *CloudfrontOriginRequestPolicy) SetProviderReference(r *xpv1.Reference) {
	mg.Spec.ProviderReference = r
}

// SetWriteConnectionSecretToReference of this CloudfrontOriginRequestPolicy.
func (mg *CloudfrontOriginRequestPolicy) SetWriteConnectionSecretToReference(r *xpv1.SecretReference) {
	mg.Spec.WriteConnectionSecretToReference = r
}

// GetCondition of this CloudfrontPublicKey.
func (mg *CloudfrontPublicKey) GetCondition(ct xpv1.ConditionType) xpv1.Condition {
	return mg.Status.GetCondition(ct)
}

// GetDeletionPolicy of this CloudfrontPublicKey.
func (mg *CloudfrontPublicKey) GetDeletionPolicy() xpv1.DeletionPolicy {
	return mg.Spec.DeletionPolicy
}

// GetProviderConfigReference of this CloudfrontPublicKey.
func (mg *CloudfrontPublicKey) GetProviderConfigReference() *xpv1.Reference {
	return mg.Spec.ProviderConfigReference
}

/*
GetProviderReference of this CloudfrontPublicKey.
Deprecated: Use GetProviderConfigReference.
*/
func (mg *CloudfrontPublicKey) GetProviderReference() *xpv1.Reference {
	return mg.Spec.ProviderReference
}

// GetWriteConnectionSecretToReference of this CloudfrontPublicKey.
func (mg *CloudfrontPublicKey) GetWriteConnectionSecretToReference() *xpv1.SecretReference {
	return mg.Spec.WriteConnectionSecretToReference
}

// SetConditions of this CloudfrontPublicKey.
func (mg *CloudfrontPublicKey) SetConditions(c ...xpv1.Condition) {
	mg.Status.SetConditions(c...)
}

// SetDeletionPolicy of this CloudfrontPublicKey.
func (mg *CloudfrontPublicKey) SetDeletionPolicy(r xpv1.DeletionPolicy) {
	mg.Spec.DeletionPolicy = r
}

// SetProviderConfigReference of this CloudfrontPublicKey.
func (mg *CloudfrontPublicKey) SetProviderConfigReference(r *xpv1.Reference) {
	mg.Spec.ProviderConfigReference = r
}

/*
SetProviderReference of this CloudfrontPublicKey.
Deprecated: Use SetProviderConfigReference.
*/
func (mg *CloudfrontPublicKey) SetProviderReference(r *xpv1.Reference) {
	mg.Spec.ProviderReference = r
}

// SetWriteConnectionSecretToReference of this CloudfrontPublicKey.
func (mg *CloudfrontPublicKey) SetWriteConnectionSecretToReference(r *xpv1.SecretReference) {
	mg.Spec.WriteConnectionSecretToReference = r
}

// GetCondition of this CloudfrontRealtimeLogConfig.
func (mg *CloudfrontRealtimeLogConfig) GetCondition(ct xpv1.ConditionType) xpv1.Condition {
	return mg.Status.GetCondition(ct)
}

// GetDeletionPolicy of this CloudfrontRealtimeLogConfig.
func (mg *CloudfrontRealtimeLogConfig) GetDeletionPolicy() xpv1.DeletionPolicy {
	return mg.Spec.DeletionPolicy
}

// GetProviderConfigReference of this CloudfrontRealtimeLogConfig.
func (mg *CloudfrontRealtimeLogConfig) GetProviderConfigReference() *xpv1.Reference {
	return mg.Spec.ProviderConfigReference
}

/*
GetProviderReference of this CloudfrontRealtimeLogConfig.
Deprecated: Use GetProviderConfigReference.
*/
func (mg *CloudfrontRealtimeLogConfig) GetProviderReference() *xpv1.Reference {
	return mg.Spec.ProviderReference
}

// GetWriteConnectionSecretToReference of this CloudfrontRealtimeLogConfig.
func (mg *CloudfrontRealtimeLogConfig) GetWriteConnectionSecretToReference() *xpv1.SecretReference {
	return mg.Spec.WriteConnectionSecretToReference
}

// SetConditions of this CloudfrontRealtimeLogConfig.
func (mg *CloudfrontRealtimeLogConfig) SetConditions(c ...xpv1.Condition) {
	mg.Status.SetConditions(c...)
}

// SetDeletionPolicy of this CloudfrontRealtimeLogConfig.
func (mg *CloudfrontRealtimeLogConfig) SetDeletionPolicy(r xpv1.DeletionPolicy) {
	mg.Spec.DeletionPolicy = r
}

// SetProviderConfigReference of this CloudfrontRealtimeLogConfig.
func (mg *CloudfrontRealtimeLogConfig) SetProviderConfigReference(r *xpv1.Reference) {
	mg.Spec.ProviderConfigReference = r
}

/*
SetProviderReference of this CloudfrontRealtimeLogConfig.
Deprecated: Use SetProviderConfigReference.
*/
func (mg *CloudfrontRealtimeLogConfig) SetProviderReference(r *xpv1.Reference) {
	mg.Spec.ProviderReference = r
}

// SetWriteConnectionSecretToReference of this CloudfrontRealtimeLogConfig.
func (mg *CloudfrontRealtimeLogConfig) SetWriteConnectionSecretToReference(r *xpv1.SecretReference) {
	mg.Spec.WriteConnectionSecretToReference = r
}
