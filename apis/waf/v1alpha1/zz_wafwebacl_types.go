/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	xpv1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"
)

type ActionObservation struct {
}

type ActionParameters struct {

	// +kubebuilder:validation:Required
	Type string `json:"type" tf:"type"`
}

type DefaultActionObservation struct {
}

type DefaultActionParameters struct {

	// +kubebuilder:validation:Required
	Type string `json:"type" tf:"type"`
}

type LoggingConfigurationObservation struct {
}

type LoggingConfigurationParameters struct {

	// +kubebuilder:validation:Required
	LogDestination string `json:"logDestination" tf:"log_destination"`

	// +kubebuilder:validation:Optional
	RedactedFields []RedactedFieldsParameters `json:"redactedFields,omitempty" tf:"redacted_fields"`
}

type OverrideActionObservation struct {
}

type OverrideActionParameters struct {

	// +kubebuilder:validation:Required
	Type string `json:"type" tf:"type"`
}

type RedactedFieldsFieldToMatchObservation struct {
}

type RedactedFieldsFieldToMatchParameters struct {

	// +kubebuilder:validation:Optional
	Data *string `json:"data,omitempty" tf:"data"`

	// +kubebuilder:validation:Required
	Type string `json:"type" tf:"type"`
}

type RedactedFieldsObservation struct {
}

type RedactedFieldsParameters struct {

	// +kubebuilder:validation:Required
	FieldToMatch []RedactedFieldsFieldToMatchParameters `json:"fieldToMatch" tf:"field_to_match"`
}

type RulesObservation struct {
}

type RulesParameters struct {

	// +kubebuilder:validation:Optional
	Action []ActionParameters `json:"action,omitempty" tf:"action"`

	// +kubebuilder:validation:Optional
	OverrideAction []OverrideActionParameters `json:"overrideAction,omitempty" tf:"override_action"`

	// +kubebuilder:validation:Required
	Priority int64 `json:"priority" tf:"priority"`

	// +kubebuilder:validation:Required
	RuleID string `json:"ruleId" tf:"rule_id"`

	// +kubebuilder:validation:Optional
	Type *string `json:"type,omitempty" tf:"type"`
}

type WafWebAclObservation struct {
	Arn string `json:"arn" tf:"arn"`
}

type WafWebAclParameters struct {

	// +kubebuilder:validation:Required
	DefaultAction []DefaultActionParameters `json:"defaultAction" tf:"default_action"`

	// +kubebuilder:validation:Optional
	LoggingConfiguration []LoggingConfigurationParameters `json:"loggingConfiguration,omitempty" tf:"logging_configuration"`

	// +kubebuilder:validation:Required
	MetricName string `json:"metricName" tf:"metric_name"`

	// +kubebuilder:validation:Required
	Name string `json:"name" tf:"name"`

	// Region is the region you'd like your resource to be created in.
	// +terrajet:crd:field:TFTag=-
	// +kubebuilder:validation:Required
	Region string `json:"region" tf:"-"`

	// +kubebuilder:validation:Optional
	Rules []RulesParameters `json:"rules,omitempty" tf:"rules"`

	// +kubebuilder:validation:Optional
	Tags map[string]string `json:"tags,omitempty" tf:"tags"`

	// +kubebuilder:validation:Optional
	TagsAll map[string]string `json:"tagsAll,omitempty" tf:"tags_all"`
}

// WafWebAclSpec defines the desired state of WafWebAcl
type WafWebAclSpec struct {
	xpv1.ResourceSpec `json:",inline"`
	ForProvider       WafWebAclParameters `json:"forProvider"`
}

// WafWebAclStatus defines the observed state of WafWebAcl.
type WafWebAclStatus struct {
	xpv1.ResourceStatus `json:",inline"`
	AtProvider          WafWebAclObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// WafWebAcl is the Schema for the WafWebAcls API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,tfaws}
type WafWebAcl struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              WafWebAclSpec   `json:"spec"`
	Status            WafWebAclStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// WafWebAclList contains a list of WafWebAcls
type WafWebAclList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []WafWebAcl `json:"items"`
}

// Repository type metadata.
var (
	WafWebAclKind             = "WafWebAcl"
	WafWebAclGroupKind        = schema.GroupKind{Group: Group, Kind: WafWebAclKind}.String()
	WafWebAclKindAPIVersion   = WafWebAclKind + "." + GroupVersion.String()
	WafWebAclGroupVersionKind = GroupVersion.WithKind(WafWebAclKind)
)

func init() {
	SchemeBuilder.Register(&WafWebAcl{}, &WafWebAclList{})
}
