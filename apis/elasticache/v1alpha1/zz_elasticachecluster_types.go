/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	xpv1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"
)

type CacheNodesObservation struct {
	Address string `json:"address" tf:"address"`

	AvailabilityZone string `json:"availabilityZone" tf:"availability_zone"`

	ID string `json:"id" tf:"id"`

	Port int64 `json:"port" tf:"port"`
}

type CacheNodesParameters struct {
}

type ElasticacheClusterObservation struct {
	Arn string `json:"arn" tf:"arn"`

	CacheNodes []CacheNodesObservation `json:"cacheNodes" tf:"cache_nodes"`

	ClusterAddress string `json:"clusterAddress" tf:"cluster_address"`

	ConfigurationEndpoint string `json:"configurationEndpoint" tf:"configuration_endpoint"`

	EngineVersionActual string `json:"engineVersionActual" tf:"engine_version_actual"`
}

type ElasticacheClusterParameters struct {

	// +kubebuilder:validation:Optional
	ApplyImmediately *bool `json:"applyImmediately,omitempty" tf:"apply_immediately"`

	// +kubebuilder:validation:Optional
	AvailabilityZone *string `json:"availabilityZone,omitempty" tf:"availability_zone"`

	// +kubebuilder:validation:Optional
	AzMode *string `json:"azMode,omitempty" tf:"az_mode"`

	// +kubebuilder:validation:Required
	ClusterID string `json:"clusterId" tf:"cluster_id"`

	// +kubebuilder:validation:Optional
	Engine *string `json:"engine,omitempty" tf:"engine"`

	// +kubebuilder:validation:Optional
	EngineVersion *string `json:"engineVersion,omitempty" tf:"engine_version"`

	// +kubebuilder:validation:Optional
	FinalSnapshotIdentifier *string `json:"finalSnapshotIdentifier,omitempty" tf:"final_snapshot_identifier"`

	// +kubebuilder:validation:Optional
	MaintenanceWindow *string `json:"maintenanceWindow,omitempty" tf:"maintenance_window"`

	// +kubebuilder:validation:Optional
	NodeType *string `json:"nodeType,omitempty" tf:"node_type"`

	// +kubebuilder:validation:Optional
	NotificationTopicArn *string `json:"notificationTopicArn,omitempty" tf:"notification_topic_arn"`

	// +kubebuilder:validation:Optional
	NumCacheNodes *int64 `json:"numCacheNodes,omitempty" tf:"num_cache_nodes"`

	// +kubebuilder:validation:Optional
	ParameterGroupName *string `json:"parameterGroupName,omitempty" tf:"parameter_group_name"`

	// +kubebuilder:validation:Optional
	Port *int64 `json:"port,omitempty" tf:"port"`

	// +kubebuilder:validation:Optional
	PreferredAvailabilityZones []string `json:"preferredAvailabilityZones,omitempty" tf:"preferred_availability_zones"`

	// Region is the region you'd like your resource to be created in.
	// +terrajet:crd:field:TFTag=-
	// +kubebuilder:validation:Required
	Region string `json:"region" tf:"-"`

	// +kubebuilder:validation:Optional
	ReplicationGroupID *string `json:"replicationGroupId,omitempty" tf:"replication_group_id"`

	// +kubebuilder:validation:Optional
	SecurityGroupIds []string `json:"securityGroupIds,omitempty" tf:"security_group_ids"`

	// +kubebuilder:validation:Optional
	SecurityGroupNames []string `json:"securityGroupNames,omitempty" tf:"security_group_names"`

	// +kubebuilder:validation:Optional
	SnapshotArns []string `json:"snapshotArns,omitempty" tf:"snapshot_arns"`

	// +kubebuilder:validation:Optional
	SnapshotName *string `json:"snapshotName,omitempty" tf:"snapshot_name"`

	// +kubebuilder:validation:Optional
	SnapshotRetentionLimit *int64 `json:"snapshotRetentionLimit,omitempty" tf:"snapshot_retention_limit"`

	// +kubebuilder:validation:Optional
	SnapshotWindow *string `json:"snapshotWindow,omitempty" tf:"snapshot_window"`

	// +kubebuilder:validation:Optional
	SubnetGroupName *string `json:"subnetGroupName,omitempty" tf:"subnet_group_name"`

	// +kubebuilder:validation:Optional
	Tags map[string]string `json:"tags,omitempty" tf:"tags"`

	// +kubebuilder:validation:Optional
	TagsAll map[string]string `json:"tagsAll,omitempty" tf:"tags_all"`
}

// ElasticacheClusterSpec defines the desired state of ElasticacheCluster
type ElasticacheClusterSpec struct {
	xpv1.ResourceSpec `json:",inline"`
	ForProvider       ElasticacheClusterParameters `json:"forProvider"`
}

// ElasticacheClusterStatus defines the observed state of ElasticacheCluster.
type ElasticacheClusterStatus struct {
	xpv1.ResourceStatus `json:",inline"`
	AtProvider          ElasticacheClusterObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// ElasticacheCluster is the Schema for the ElasticacheClusters API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,tfaws}
type ElasticacheCluster struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              ElasticacheClusterSpec   `json:"spec"`
	Status            ElasticacheClusterStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// ElasticacheClusterList contains a list of ElasticacheClusters
type ElasticacheClusterList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []ElasticacheCluster `json:"items"`
}

// Repository type metadata.
var (
	ElasticacheClusterKind             = "ElasticacheCluster"
	ElasticacheClusterGroupKind        = schema.GroupKind{Group: Group, Kind: ElasticacheClusterKind}.String()
	ElasticacheClusterKindAPIVersion   = ElasticacheClusterKind + "." + GroupVersion.String()
	ElasticacheClusterGroupVersionKind = GroupVersion.WithKind(ElasticacheClusterKind)
)

func init() {
	SchemeBuilder.Register(&ElasticacheCluster{}, &ElasticacheClusterList{})
}
