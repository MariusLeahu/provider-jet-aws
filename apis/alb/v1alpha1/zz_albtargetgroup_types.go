/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	xpv1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"
)

type AlbTargetGroupObservation struct {
	Arn string `json:"arn" tf:"arn"`

	ArnSuffix string `json:"arnSuffix" tf:"arn_suffix"`
}

type AlbTargetGroupParameters struct {

	// +kubebuilder:validation:Optional
	DeregistrationDelay *int64 `json:"deregistrationDelay,omitempty" tf:"deregistration_delay"`

	// +kubebuilder:validation:Optional
	HealthCheck []HealthCheckParameters `json:"healthCheck,omitempty" tf:"health_check"`

	// +kubebuilder:validation:Optional
	LambdaMultiValueHeadersEnabled *bool `json:"lambdaMultiValueHeadersEnabled,omitempty" tf:"lambda_multi_value_headers_enabled"`

	// +kubebuilder:validation:Optional
	LoadBalancingAlgorithmType *string `json:"loadBalancingAlgorithmType,omitempty" tf:"load_balancing_algorithm_type"`

	// +kubebuilder:validation:Optional
	Name *string `json:"name,omitempty" tf:"name"`

	// +kubebuilder:validation:Optional
	NamePrefix *string `json:"namePrefix,omitempty" tf:"name_prefix"`

	// +kubebuilder:validation:Optional
	Port *int64 `json:"port,omitempty" tf:"port"`

	// +kubebuilder:validation:Optional
	PreserveClientIP *string `json:"preserveClientIp,omitempty" tf:"preserve_client_ip"`

	// +kubebuilder:validation:Optional
	Protocol *string `json:"protocol,omitempty" tf:"protocol"`

	// +kubebuilder:validation:Optional
	ProtocolVersion *string `json:"protocolVersion,omitempty" tf:"protocol_version"`

	// +kubebuilder:validation:Optional
	ProxyProtocolV2 *bool `json:"proxyProtocolV2,omitempty" tf:"proxy_protocol_v2"`

	// Region is the region you'd like your resource to be created in.
	// +terrajet:crd:field:TFTag=-
	// +kubebuilder:validation:Required
	Region string `json:"region" tf:"-"`

	// +kubebuilder:validation:Optional
	SlowStart *int64 `json:"slowStart,omitempty" tf:"slow_start"`

	// +kubebuilder:validation:Optional
	Stickiness []AlbTargetGroupStickinessParameters `json:"stickiness,omitempty" tf:"stickiness"`

	// +kubebuilder:validation:Optional
	Tags map[string]string `json:"tags,omitempty" tf:"tags"`

	// +kubebuilder:validation:Optional
	TagsAll map[string]string `json:"tagsAll,omitempty" tf:"tags_all"`

	// +kubebuilder:validation:Optional
	TargetType *string `json:"targetType,omitempty" tf:"target_type"`

	// +kubebuilder:validation:Optional
	VpcID *string `json:"vpcId,omitempty" tf:"vpc_id"`
}

type AlbTargetGroupStickinessObservation struct {
}

type AlbTargetGroupStickinessParameters struct {

	// +kubebuilder:validation:Optional
	CookieDuration *int64 `json:"cookieDuration,omitempty" tf:"cookie_duration"`

	// +kubebuilder:validation:Optional
	CookieName *string `json:"cookieName,omitempty" tf:"cookie_name"`

	// +kubebuilder:validation:Optional
	Enabled *bool `json:"enabled,omitempty" tf:"enabled"`

	// +kubebuilder:validation:Required
	Type string `json:"type" tf:"type"`
}

type HealthCheckObservation struct {
}

type HealthCheckParameters struct {

	// +kubebuilder:validation:Optional
	Enabled *bool `json:"enabled,omitempty" tf:"enabled"`

	// +kubebuilder:validation:Optional
	HealthyThreshold *int64 `json:"healthyThreshold,omitempty" tf:"healthy_threshold"`

	// +kubebuilder:validation:Optional
	Interval *int64 `json:"interval,omitempty" tf:"interval"`

	// +kubebuilder:validation:Optional
	Matcher *string `json:"matcher,omitempty" tf:"matcher"`

	// +kubebuilder:validation:Optional
	Path *string `json:"path,omitempty" tf:"path"`

	// +kubebuilder:validation:Optional
	Port *string `json:"port,omitempty" tf:"port"`

	// +kubebuilder:validation:Optional
	Protocol *string `json:"protocol,omitempty" tf:"protocol"`

	// +kubebuilder:validation:Optional
	Timeout *int64 `json:"timeout,omitempty" tf:"timeout"`

	// +kubebuilder:validation:Optional
	UnhealthyThreshold *int64 `json:"unhealthyThreshold,omitempty" tf:"unhealthy_threshold"`
}

// AlbTargetGroupSpec defines the desired state of AlbTargetGroup
type AlbTargetGroupSpec struct {
	xpv1.ResourceSpec `json:",inline"`
	ForProvider       AlbTargetGroupParameters `json:"forProvider"`
}

// AlbTargetGroupStatus defines the observed state of AlbTargetGroup.
type AlbTargetGroupStatus struct {
	xpv1.ResourceStatus `json:",inline"`
	AtProvider          AlbTargetGroupObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// AlbTargetGroup is the Schema for the AlbTargetGroups API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,tfaws}
type AlbTargetGroup struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              AlbTargetGroupSpec   `json:"spec"`
	Status            AlbTargetGroupStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// AlbTargetGroupList contains a list of AlbTargetGroups
type AlbTargetGroupList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []AlbTargetGroup `json:"items"`
}

// Repository type metadata.
var (
	AlbTargetGroupKind             = "AlbTargetGroup"
	AlbTargetGroupGroupKind        = schema.GroupKind{Group: Group, Kind: AlbTargetGroupKind}.String()
	AlbTargetGroupKindAPIVersion   = AlbTargetGroupKind + "." + GroupVersion.String()
	AlbTargetGroupGroupVersionKind = GroupVersion.WithKind(AlbTargetGroupKind)
)

func init() {
	SchemeBuilder.Register(&AlbTargetGroup{}, &AlbTargetGroupList{})
}
