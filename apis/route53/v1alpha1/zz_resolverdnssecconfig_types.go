/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type ResolverDNSSECConfigObservation struct {
	Arn *string `json:"arn,omitempty" tf:"arn,omitempty"`

	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	OwnerID *string `json:"ownerId,omitempty" tf:"owner_id,omitempty"`

	ValidationStatus *string `json:"validationStatus,omitempty" tf:"validation_status,omitempty"`
}

type ResolverDNSSECConfigParameters struct {

	// Region is the region you'd like your resource to be created in.
	// +terrajet:crd:field:TFTag=-
	// +kubebuilder:validation:Required
	Region *string `json:"region" tf:"-"`

	// +kubebuilder:validation:Required
	ResourceID *string `json:"resourceId" tf:"resource_id,omitempty"`
}

// ResolverDNSSECConfigSpec defines the desired state of ResolverDNSSECConfig
type ResolverDNSSECConfigSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     ResolverDNSSECConfigParameters `json:"forProvider"`
}

// ResolverDNSSECConfigStatus defines the observed state of ResolverDNSSECConfig.
type ResolverDNSSECConfigStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        ResolverDNSSECConfigObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// ResolverDNSSECConfig is the Schema for the ResolverDNSSECConfigs API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,awsjet}
type ResolverDNSSECConfig struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              ResolverDNSSECConfigSpec   `json:"spec"`
	Status            ResolverDNSSECConfigStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// ResolverDNSSECConfigList contains a list of ResolverDNSSECConfigs
type ResolverDNSSECConfigList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []ResolverDNSSECConfig `json:"items"`
}

// Repository type metadata.
var (
	ResolverDNSSECConfig_Kind             = "ResolverDNSSECConfig"
	ResolverDNSSECConfig_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: ResolverDNSSECConfig_Kind}.String()
	ResolverDNSSECConfig_KindAPIVersion   = ResolverDNSSECConfig_Kind + "." + CRDGroupVersion.String()
	ResolverDNSSECConfig_GroupVersionKind = CRDGroupVersion.WithKind(ResolverDNSSECConfig_Kind)
)

func init() {
	SchemeBuilder.Register(&ResolverDNSSECConfig{}, &ResolverDNSSECConfigList{})
}
