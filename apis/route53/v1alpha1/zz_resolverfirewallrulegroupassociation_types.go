/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type ResolverFirewallRuleGroupAssociationObservation struct {
	Arn *string `json:"arn,omitempty" tf:"arn,omitempty"`

	TagsAll map[string]*string `json:"tagsAll,omitempty" tf:"tags_all,omitempty"`
}

type ResolverFirewallRuleGroupAssociationParameters struct {

	// +kubebuilder:validation:Required
	FirewallRuleGroupID *string `json:"firewallRuleGroupId" tf:"firewall_rule_group_id,omitempty"`

	// +kubebuilder:validation:Optional
	MutationProtection *string `json:"mutationProtection,omitempty" tf:"mutation_protection,omitempty"`

	// +kubebuilder:validation:Required
	Priority *int64 `json:"priority" tf:"priority,omitempty"`

	// Region is the region you'd like your resource to be created in.
	// +terrajet:crd:field:TFTag=-
	// +kubebuilder:validation:Required
	Region *string `json:"region" tf:"-"`

	// +kubebuilder:validation:Optional
	Tags map[string]*string `json:"tags,omitempty" tf:"tags,omitempty"`

	// +kubebuilder:validation:Required
	VpcID *string `json:"vpcId" tf:"vpc_id,omitempty"`
}

// ResolverFirewallRuleGroupAssociationSpec defines the desired state of ResolverFirewallRuleGroupAssociation
type ResolverFirewallRuleGroupAssociationSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     ResolverFirewallRuleGroupAssociationParameters `json:"forProvider"`
}

// ResolverFirewallRuleGroupAssociationStatus defines the observed state of ResolverFirewallRuleGroupAssociation.
type ResolverFirewallRuleGroupAssociationStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        ResolverFirewallRuleGroupAssociationObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// ResolverFirewallRuleGroupAssociation is the Schema for the ResolverFirewallRuleGroupAssociations API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,awsjet}
type ResolverFirewallRuleGroupAssociation struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              ResolverFirewallRuleGroupAssociationSpec   `json:"spec"`
	Status            ResolverFirewallRuleGroupAssociationStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// ResolverFirewallRuleGroupAssociationList contains a list of ResolverFirewallRuleGroupAssociations
type ResolverFirewallRuleGroupAssociationList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []ResolverFirewallRuleGroupAssociation `json:"items"`
}

// Repository type metadata.
var (
	ResolverFirewallRuleGroupAssociation_Kind             = "ResolverFirewallRuleGroupAssociation"
	ResolverFirewallRuleGroupAssociation_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: ResolverFirewallRuleGroupAssociation_Kind}.String()
	ResolverFirewallRuleGroupAssociation_KindAPIVersion   = ResolverFirewallRuleGroupAssociation_Kind + "." + CRDGroupVersion.String()
	ResolverFirewallRuleGroupAssociation_GroupVersionKind = CRDGroupVersion.WithKind(ResolverFirewallRuleGroupAssociation_Kind)
)

func init() {
	SchemeBuilder.Register(&ResolverFirewallRuleGroupAssociation{}, &ResolverFirewallRuleGroupAssociationList{})
}
