/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type ResolverQueryLogConfigObservation struct {
	Arn *string `json:"arn,omitempty" tf:"arn,omitempty"`

	OwnerID *string `json:"ownerId,omitempty" tf:"owner_id,omitempty"`

	ShareStatus *string `json:"shareStatus,omitempty" tf:"share_status,omitempty"`

	TagsAll map[string]*string `json:"tagsAll,omitempty" tf:"tags_all,omitempty"`
}

type ResolverQueryLogConfigParameters struct {

	// +kubebuilder:validation:Required
	DestinationArn *string `json:"destinationArn" tf:"destination_arn,omitempty"`

	// +kubebuilder:validation:Required
	Name *string `json:"name" tf:"name,omitempty"`

	// Region is the region you'd like your resource to be created in.
	// +terrajet:crd:field:TFTag=-
	// +kubebuilder:validation:Required
	Region *string `json:"region" tf:"-"`

	// +kubebuilder:validation:Optional
	Tags map[string]*string `json:"tags,omitempty" tf:"tags,omitempty"`
}

// ResolverQueryLogConfigSpec defines the desired state of ResolverQueryLogConfig
type ResolverQueryLogConfigSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     ResolverQueryLogConfigParameters `json:"forProvider"`
}

// ResolverQueryLogConfigStatus defines the observed state of ResolverQueryLogConfig.
type ResolverQueryLogConfigStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        ResolverQueryLogConfigObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// ResolverQueryLogConfig is the Schema for the ResolverQueryLogConfigs API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,awsjet}
type ResolverQueryLogConfig struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              ResolverQueryLogConfigSpec   `json:"spec"`
	Status            ResolverQueryLogConfigStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// ResolverQueryLogConfigList contains a list of ResolverQueryLogConfigs
type ResolverQueryLogConfigList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []ResolverQueryLogConfig `json:"items"`
}

// Repository type metadata.
var (
	ResolverQueryLogConfig_Kind             = "ResolverQueryLogConfig"
	ResolverQueryLogConfig_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: ResolverQueryLogConfig_Kind}.String()
	ResolverQueryLogConfig_KindAPIVersion   = ResolverQueryLogConfig_Kind + "." + CRDGroupVersion.String()
	ResolverQueryLogConfig_GroupVersionKind = CRDGroupVersion.WithKind(ResolverQueryLogConfig_Kind)
)

func init() {
	SchemeBuilder.Register(&ResolverQueryLogConfig{}, &ResolverQueryLogConfigList{})
}
