/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	xpv1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"
)

type AliasObservation struct {
}

type AliasParameters struct {

	// +kubebuilder:validation:Required
	EvaluateTargetHealth bool `json:"evaluateTargetHealth" tf:"evaluate_target_health"`

	// +kubebuilder:validation:Required
	Name string `json:"name" tf:"name"`

	// +kubebuilder:validation:Required
	ZoneID string `json:"zoneId" tf:"zone_id"`
}

type FailoverRoutingPolicyObservation struct {
}

type FailoverRoutingPolicyParameters struct {

	// +kubebuilder:validation:Required
	Type string `json:"type" tf:"type"`
}

type GeolocationRoutingPolicyObservation struct {
}

type GeolocationRoutingPolicyParameters struct {

	// +kubebuilder:validation:Optional
	Continent *string `json:"continent,omitempty" tf:"continent"`

	// +kubebuilder:validation:Optional
	Country *string `json:"country,omitempty" tf:"country"`

	// +kubebuilder:validation:Optional
	Subdivision *string `json:"subdivision,omitempty" tf:"subdivision"`
}

type LatencyRoutingPolicyObservation struct {
}

type LatencyRoutingPolicyParameters struct {

	// +kubebuilder:validation:Required
	Region string `json:"region" tf:"region"`
}

type Route53RecordObservation struct {
	Fqdn string `json:"fqdn" tf:"fqdn"`
}

type Route53RecordParameters struct {

	// +kubebuilder:validation:Optional
	Alias []AliasParameters `json:"alias,omitempty" tf:"alias"`

	// +kubebuilder:validation:Optional
	AllowOverwrite *bool `json:"allowOverwrite,omitempty" tf:"allow_overwrite"`

	// +kubebuilder:validation:Optional
	FailoverRoutingPolicy []FailoverRoutingPolicyParameters `json:"failoverRoutingPolicy,omitempty" tf:"failover_routing_policy"`

	// +kubebuilder:validation:Optional
	GeolocationRoutingPolicy []GeolocationRoutingPolicyParameters `json:"geolocationRoutingPolicy,omitempty" tf:"geolocation_routing_policy"`

	// +kubebuilder:validation:Optional
	HealthCheckID *string `json:"healthCheckId,omitempty" tf:"health_check_id"`

	// +kubebuilder:validation:Optional
	LatencyRoutingPolicy []LatencyRoutingPolicyParameters `json:"latencyRoutingPolicy,omitempty" tf:"latency_routing_policy"`

	// +kubebuilder:validation:Optional
	MultivalueAnswerRoutingPolicy *bool `json:"multivalueAnswerRoutingPolicy,omitempty" tf:"multivalue_answer_routing_policy"`

	// +kubebuilder:validation:Required
	Name string `json:"name" tf:"name"`

	// +kubebuilder:validation:Optional
	Records []string `json:"records,omitempty" tf:"records"`

	// Region is the region you'd like your resource to be created in.
	// +terrajet:crd:field:TFTag=-
	// +kubebuilder:validation:Required
	Region string `json:"region" tf:"-"`

	// +kubebuilder:validation:Optional
	SetIdentifier *string `json:"setIdentifier,omitempty" tf:"set_identifier"`

	// +kubebuilder:validation:Optional
	TTL *int64 `json:"ttl,omitempty" tf:"ttl"`

	// +kubebuilder:validation:Required
	Type string `json:"type" tf:"type"`

	// +kubebuilder:validation:Optional
	WeightedRoutingPolicy []WeightedRoutingPolicyParameters `json:"weightedRoutingPolicy,omitempty" tf:"weighted_routing_policy"`

	// +kubebuilder:validation:Required
	ZoneID string `json:"zoneId" tf:"zone_id"`
}

type WeightedRoutingPolicyObservation struct {
}

type WeightedRoutingPolicyParameters struct {

	// +kubebuilder:validation:Required
	Weight int64 `json:"weight" tf:"weight"`
}

// Route53RecordSpec defines the desired state of Route53Record
type Route53RecordSpec struct {
	xpv1.ResourceSpec `json:",inline"`
	ForProvider       Route53RecordParameters `json:"forProvider"`
}

// Route53RecordStatus defines the observed state of Route53Record.
type Route53RecordStatus struct {
	xpv1.ResourceStatus `json:",inline"`
	AtProvider          Route53RecordObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// Route53Record is the Schema for the Route53Records API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,tfaws}
type Route53Record struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              Route53RecordSpec   `json:"spec"`
	Status            Route53RecordStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// Route53RecordList contains a list of Route53Records
type Route53RecordList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []Route53Record `json:"items"`
}

// Repository type metadata.
var (
	Route53RecordKind             = "Route53Record"
	Route53RecordGroupKind        = schema.GroupKind{Group: Group, Kind: Route53RecordKind}.String()
	Route53RecordKindAPIVersion   = Route53RecordKind + "." + GroupVersion.String()
	Route53RecordGroupVersionKind = GroupVersion.WithKind(Route53RecordKind)
)

func init() {
	SchemeBuilder.Register(&Route53Record{}, &Route53RecordList{})
}
