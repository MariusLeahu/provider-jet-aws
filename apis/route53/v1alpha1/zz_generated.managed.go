/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/
// Code generated by angryjet. DO NOT EDIT.

package v1alpha1

import xpv1 "github.com/crossplane/crossplane-runtime/apis/common/v1"

// GetCondition of this Route53DelegationSet.
func (mg *Route53DelegationSet) GetCondition(ct xpv1.ConditionType) xpv1.Condition {
	return mg.Status.GetCondition(ct)
}

// GetDeletionPolicy of this Route53DelegationSet.
func (mg *Route53DelegationSet) GetDeletionPolicy() xpv1.DeletionPolicy {
	return mg.Spec.DeletionPolicy
}

// GetProviderConfigReference of this Route53DelegationSet.
func (mg *Route53DelegationSet) GetProviderConfigReference() *xpv1.Reference {
	return mg.Spec.ProviderConfigReference
}

/*
GetProviderReference of this Route53DelegationSet.
Deprecated: Use GetProviderConfigReference.
*/
func (mg *Route53DelegationSet) GetProviderReference() *xpv1.Reference {
	return mg.Spec.ProviderReference
}

// GetWriteConnectionSecretToReference of this Route53DelegationSet.
func (mg *Route53DelegationSet) GetWriteConnectionSecretToReference() *xpv1.SecretReference {
	return mg.Spec.WriteConnectionSecretToReference
}

// SetConditions of this Route53DelegationSet.
func (mg *Route53DelegationSet) SetConditions(c ...xpv1.Condition) {
	mg.Status.SetConditions(c...)
}

// SetDeletionPolicy of this Route53DelegationSet.
func (mg *Route53DelegationSet) SetDeletionPolicy(r xpv1.DeletionPolicy) {
	mg.Spec.DeletionPolicy = r
}

// SetProviderConfigReference of this Route53DelegationSet.
func (mg *Route53DelegationSet) SetProviderConfigReference(r *xpv1.Reference) {
	mg.Spec.ProviderConfigReference = r
}

/*
SetProviderReference of this Route53DelegationSet.
Deprecated: Use SetProviderConfigReference.
*/
func (mg *Route53DelegationSet) SetProviderReference(r *xpv1.Reference) {
	mg.Spec.ProviderReference = r
}

// SetWriteConnectionSecretToReference of this Route53DelegationSet.
func (mg *Route53DelegationSet) SetWriteConnectionSecretToReference(r *xpv1.SecretReference) {
	mg.Spec.WriteConnectionSecretToReference = r
}

// GetCondition of this Route53HealthCheck.
func (mg *Route53HealthCheck) GetCondition(ct xpv1.ConditionType) xpv1.Condition {
	return mg.Status.GetCondition(ct)
}

// GetDeletionPolicy of this Route53HealthCheck.
func (mg *Route53HealthCheck) GetDeletionPolicy() xpv1.DeletionPolicy {
	return mg.Spec.DeletionPolicy
}

// GetProviderConfigReference of this Route53HealthCheck.
func (mg *Route53HealthCheck) GetProviderConfigReference() *xpv1.Reference {
	return mg.Spec.ProviderConfigReference
}

/*
GetProviderReference of this Route53HealthCheck.
Deprecated: Use GetProviderConfigReference.
*/
func (mg *Route53HealthCheck) GetProviderReference() *xpv1.Reference {
	return mg.Spec.ProviderReference
}

// GetWriteConnectionSecretToReference of this Route53HealthCheck.
func (mg *Route53HealthCheck) GetWriteConnectionSecretToReference() *xpv1.SecretReference {
	return mg.Spec.WriteConnectionSecretToReference
}

// SetConditions of this Route53HealthCheck.
func (mg *Route53HealthCheck) SetConditions(c ...xpv1.Condition) {
	mg.Status.SetConditions(c...)
}

// SetDeletionPolicy of this Route53HealthCheck.
func (mg *Route53HealthCheck) SetDeletionPolicy(r xpv1.DeletionPolicy) {
	mg.Spec.DeletionPolicy = r
}

// SetProviderConfigReference of this Route53HealthCheck.
func (mg *Route53HealthCheck) SetProviderConfigReference(r *xpv1.Reference) {
	mg.Spec.ProviderConfigReference = r
}

/*
SetProviderReference of this Route53HealthCheck.
Deprecated: Use SetProviderConfigReference.
*/
func (mg *Route53HealthCheck) SetProviderReference(r *xpv1.Reference) {
	mg.Spec.ProviderReference = r
}

// SetWriteConnectionSecretToReference of this Route53HealthCheck.
func (mg *Route53HealthCheck) SetWriteConnectionSecretToReference(r *xpv1.SecretReference) {
	mg.Spec.WriteConnectionSecretToReference = r
}

// GetCondition of this Route53HostedZoneDnssec.
func (mg *Route53HostedZoneDnssec) GetCondition(ct xpv1.ConditionType) xpv1.Condition {
	return mg.Status.GetCondition(ct)
}

// GetDeletionPolicy of this Route53HostedZoneDnssec.
func (mg *Route53HostedZoneDnssec) GetDeletionPolicy() xpv1.DeletionPolicy {
	return mg.Spec.DeletionPolicy
}

// GetProviderConfigReference of this Route53HostedZoneDnssec.
func (mg *Route53HostedZoneDnssec) GetProviderConfigReference() *xpv1.Reference {
	return mg.Spec.ProviderConfigReference
}

/*
GetProviderReference of this Route53HostedZoneDnssec.
Deprecated: Use GetProviderConfigReference.
*/
func (mg *Route53HostedZoneDnssec) GetProviderReference() *xpv1.Reference {
	return mg.Spec.ProviderReference
}

// GetWriteConnectionSecretToReference of this Route53HostedZoneDnssec.
func (mg *Route53HostedZoneDnssec) GetWriteConnectionSecretToReference() *xpv1.SecretReference {
	return mg.Spec.WriteConnectionSecretToReference
}

// SetConditions of this Route53HostedZoneDnssec.
func (mg *Route53HostedZoneDnssec) SetConditions(c ...xpv1.Condition) {
	mg.Status.SetConditions(c...)
}

// SetDeletionPolicy of this Route53HostedZoneDnssec.
func (mg *Route53HostedZoneDnssec) SetDeletionPolicy(r xpv1.DeletionPolicy) {
	mg.Spec.DeletionPolicy = r
}

// SetProviderConfigReference of this Route53HostedZoneDnssec.
func (mg *Route53HostedZoneDnssec) SetProviderConfigReference(r *xpv1.Reference) {
	mg.Spec.ProviderConfigReference = r
}

/*
SetProviderReference of this Route53HostedZoneDnssec.
Deprecated: Use SetProviderConfigReference.
*/
func (mg *Route53HostedZoneDnssec) SetProviderReference(r *xpv1.Reference) {
	mg.Spec.ProviderReference = r
}

// SetWriteConnectionSecretToReference of this Route53HostedZoneDnssec.
func (mg *Route53HostedZoneDnssec) SetWriteConnectionSecretToReference(r *xpv1.SecretReference) {
	mg.Spec.WriteConnectionSecretToReference = r
}

// GetCondition of this Route53KeySigningKey.
func (mg *Route53KeySigningKey) GetCondition(ct xpv1.ConditionType) xpv1.Condition {
	return mg.Status.GetCondition(ct)
}

// GetDeletionPolicy of this Route53KeySigningKey.
func (mg *Route53KeySigningKey) GetDeletionPolicy() xpv1.DeletionPolicy {
	return mg.Spec.DeletionPolicy
}

// GetProviderConfigReference of this Route53KeySigningKey.
func (mg *Route53KeySigningKey) GetProviderConfigReference() *xpv1.Reference {
	return mg.Spec.ProviderConfigReference
}

/*
GetProviderReference of this Route53KeySigningKey.
Deprecated: Use GetProviderConfigReference.
*/
func (mg *Route53KeySigningKey) GetProviderReference() *xpv1.Reference {
	return mg.Spec.ProviderReference
}

// GetWriteConnectionSecretToReference of this Route53KeySigningKey.
func (mg *Route53KeySigningKey) GetWriteConnectionSecretToReference() *xpv1.SecretReference {
	return mg.Spec.WriteConnectionSecretToReference
}

// SetConditions of this Route53KeySigningKey.
func (mg *Route53KeySigningKey) SetConditions(c ...xpv1.Condition) {
	mg.Status.SetConditions(c...)
}

// SetDeletionPolicy of this Route53KeySigningKey.
func (mg *Route53KeySigningKey) SetDeletionPolicy(r xpv1.DeletionPolicy) {
	mg.Spec.DeletionPolicy = r
}

// SetProviderConfigReference of this Route53KeySigningKey.
func (mg *Route53KeySigningKey) SetProviderConfigReference(r *xpv1.Reference) {
	mg.Spec.ProviderConfigReference = r
}

/*
SetProviderReference of this Route53KeySigningKey.
Deprecated: Use SetProviderConfigReference.
*/
func (mg *Route53KeySigningKey) SetProviderReference(r *xpv1.Reference) {
	mg.Spec.ProviderReference = r
}

// SetWriteConnectionSecretToReference of this Route53KeySigningKey.
func (mg *Route53KeySigningKey) SetWriteConnectionSecretToReference(r *xpv1.SecretReference) {
	mg.Spec.WriteConnectionSecretToReference = r
}

// GetCondition of this Route53QueryLog.
func (mg *Route53QueryLog) GetCondition(ct xpv1.ConditionType) xpv1.Condition {
	return mg.Status.GetCondition(ct)
}

// GetDeletionPolicy of this Route53QueryLog.
func (mg *Route53QueryLog) GetDeletionPolicy() xpv1.DeletionPolicy {
	return mg.Spec.DeletionPolicy
}

// GetProviderConfigReference of this Route53QueryLog.
func (mg *Route53QueryLog) GetProviderConfigReference() *xpv1.Reference {
	return mg.Spec.ProviderConfigReference
}

/*
GetProviderReference of this Route53QueryLog.
Deprecated: Use GetProviderConfigReference.
*/
func (mg *Route53QueryLog) GetProviderReference() *xpv1.Reference {
	return mg.Spec.ProviderReference
}

// GetWriteConnectionSecretToReference of this Route53QueryLog.
func (mg *Route53QueryLog) GetWriteConnectionSecretToReference() *xpv1.SecretReference {
	return mg.Spec.WriteConnectionSecretToReference
}

// SetConditions of this Route53QueryLog.
func (mg *Route53QueryLog) SetConditions(c ...xpv1.Condition) {
	mg.Status.SetConditions(c...)
}

// SetDeletionPolicy of this Route53QueryLog.
func (mg *Route53QueryLog) SetDeletionPolicy(r xpv1.DeletionPolicy) {
	mg.Spec.DeletionPolicy = r
}

// SetProviderConfigReference of this Route53QueryLog.
func (mg *Route53QueryLog) SetProviderConfigReference(r *xpv1.Reference) {
	mg.Spec.ProviderConfigReference = r
}

/*
SetProviderReference of this Route53QueryLog.
Deprecated: Use SetProviderConfigReference.
*/
func (mg *Route53QueryLog) SetProviderReference(r *xpv1.Reference) {
	mg.Spec.ProviderReference = r
}

// SetWriteConnectionSecretToReference of this Route53QueryLog.
func (mg *Route53QueryLog) SetWriteConnectionSecretToReference(r *xpv1.SecretReference) {
	mg.Spec.WriteConnectionSecretToReference = r
}

// GetCondition of this Route53Record.
func (mg *Route53Record) GetCondition(ct xpv1.ConditionType) xpv1.Condition {
	return mg.Status.GetCondition(ct)
}

// GetDeletionPolicy of this Route53Record.
func (mg *Route53Record) GetDeletionPolicy() xpv1.DeletionPolicy {
	return mg.Spec.DeletionPolicy
}

// GetProviderConfigReference of this Route53Record.
func (mg *Route53Record) GetProviderConfigReference() *xpv1.Reference {
	return mg.Spec.ProviderConfigReference
}

/*
GetProviderReference of this Route53Record.
Deprecated: Use GetProviderConfigReference.
*/
func (mg *Route53Record) GetProviderReference() *xpv1.Reference {
	return mg.Spec.ProviderReference
}

// GetWriteConnectionSecretToReference of this Route53Record.
func (mg *Route53Record) GetWriteConnectionSecretToReference() *xpv1.SecretReference {
	return mg.Spec.WriteConnectionSecretToReference
}

// SetConditions of this Route53Record.
func (mg *Route53Record) SetConditions(c ...xpv1.Condition) {
	mg.Status.SetConditions(c...)
}

// SetDeletionPolicy of this Route53Record.
func (mg *Route53Record) SetDeletionPolicy(r xpv1.DeletionPolicy) {
	mg.Spec.DeletionPolicy = r
}

// SetProviderConfigReference of this Route53Record.
func (mg *Route53Record) SetProviderConfigReference(r *xpv1.Reference) {
	mg.Spec.ProviderConfigReference = r
}

/*
SetProviderReference of this Route53Record.
Deprecated: Use SetProviderConfigReference.
*/
func (mg *Route53Record) SetProviderReference(r *xpv1.Reference) {
	mg.Spec.ProviderReference = r
}

// SetWriteConnectionSecretToReference of this Route53Record.
func (mg *Route53Record) SetWriteConnectionSecretToReference(r *xpv1.SecretReference) {
	mg.Spec.WriteConnectionSecretToReference = r
}

// GetCondition of this Route53ResolverDnssecConfig.
func (mg *Route53ResolverDnssecConfig) GetCondition(ct xpv1.ConditionType) xpv1.Condition {
	return mg.Status.GetCondition(ct)
}

// GetDeletionPolicy of this Route53ResolverDnssecConfig.
func (mg *Route53ResolverDnssecConfig) GetDeletionPolicy() xpv1.DeletionPolicy {
	return mg.Spec.DeletionPolicy
}

// GetProviderConfigReference of this Route53ResolverDnssecConfig.
func (mg *Route53ResolverDnssecConfig) GetProviderConfigReference() *xpv1.Reference {
	return mg.Spec.ProviderConfigReference
}

/*
GetProviderReference of this Route53ResolverDnssecConfig.
Deprecated: Use GetProviderConfigReference.
*/
func (mg *Route53ResolverDnssecConfig) GetProviderReference() *xpv1.Reference {
	return mg.Spec.ProviderReference
}

// GetWriteConnectionSecretToReference of this Route53ResolverDnssecConfig.
func (mg *Route53ResolverDnssecConfig) GetWriteConnectionSecretToReference() *xpv1.SecretReference {
	return mg.Spec.WriteConnectionSecretToReference
}

// SetConditions of this Route53ResolverDnssecConfig.
func (mg *Route53ResolverDnssecConfig) SetConditions(c ...xpv1.Condition) {
	mg.Status.SetConditions(c...)
}

// SetDeletionPolicy of this Route53ResolverDnssecConfig.
func (mg *Route53ResolverDnssecConfig) SetDeletionPolicy(r xpv1.DeletionPolicy) {
	mg.Spec.DeletionPolicy = r
}

// SetProviderConfigReference of this Route53ResolverDnssecConfig.
func (mg *Route53ResolverDnssecConfig) SetProviderConfigReference(r *xpv1.Reference) {
	mg.Spec.ProviderConfigReference = r
}

/*
SetProviderReference of this Route53ResolverDnssecConfig.
Deprecated: Use SetProviderConfigReference.
*/
func (mg *Route53ResolverDnssecConfig) SetProviderReference(r *xpv1.Reference) {
	mg.Spec.ProviderReference = r
}

// SetWriteConnectionSecretToReference of this Route53ResolverDnssecConfig.
func (mg *Route53ResolverDnssecConfig) SetWriteConnectionSecretToReference(r *xpv1.SecretReference) {
	mg.Spec.WriteConnectionSecretToReference = r
}

// GetCondition of this Route53ResolverEndpoint.
func (mg *Route53ResolverEndpoint) GetCondition(ct xpv1.ConditionType) xpv1.Condition {
	return mg.Status.GetCondition(ct)
}

// GetDeletionPolicy of this Route53ResolverEndpoint.
func (mg *Route53ResolverEndpoint) GetDeletionPolicy() xpv1.DeletionPolicy {
	return mg.Spec.DeletionPolicy
}

// GetProviderConfigReference of this Route53ResolverEndpoint.
func (mg *Route53ResolverEndpoint) GetProviderConfigReference() *xpv1.Reference {
	return mg.Spec.ProviderConfigReference
}

/*
GetProviderReference of this Route53ResolverEndpoint.
Deprecated: Use GetProviderConfigReference.
*/
func (mg *Route53ResolverEndpoint) GetProviderReference() *xpv1.Reference {
	return mg.Spec.ProviderReference
}

// GetWriteConnectionSecretToReference of this Route53ResolverEndpoint.
func (mg *Route53ResolverEndpoint) GetWriteConnectionSecretToReference() *xpv1.SecretReference {
	return mg.Spec.WriteConnectionSecretToReference
}

// SetConditions of this Route53ResolverEndpoint.
func (mg *Route53ResolverEndpoint) SetConditions(c ...xpv1.Condition) {
	mg.Status.SetConditions(c...)
}

// SetDeletionPolicy of this Route53ResolverEndpoint.
func (mg *Route53ResolverEndpoint) SetDeletionPolicy(r xpv1.DeletionPolicy) {
	mg.Spec.DeletionPolicy = r
}

// SetProviderConfigReference of this Route53ResolverEndpoint.
func (mg *Route53ResolverEndpoint) SetProviderConfigReference(r *xpv1.Reference) {
	mg.Spec.ProviderConfigReference = r
}

/*
SetProviderReference of this Route53ResolverEndpoint.
Deprecated: Use SetProviderConfigReference.
*/
func (mg *Route53ResolverEndpoint) SetProviderReference(r *xpv1.Reference) {
	mg.Spec.ProviderReference = r
}

// SetWriteConnectionSecretToReference of this Route53ResolverEndpoint.
func (mg *Route53ResolverEndpoint) SetWriteConnectionSecretToReference(r *xpv1.SecretReference) {
	mg.Spec.WriteConnectionSecretToReference = r
}

// GetCondition of this Route53ResolverFirewallConfig.
func (mg *Route53ResolverFirewallConfig) GetCondition(ct xpv1.ConditionType) xpv1.Condition {
	return mg.Status.GetCondition(ct)
}

// GetDeletionPolicy of this Route53ResolverFirewallConfig.
func (mg *Route53ResolverFirewallConfig) GetDeletionPolicy() xpv1.DeletionPolicy {
	return mg.Spec.DeletionPolicy
}

// GetProviderConfigReference of this Route53ResolverFirewallConfig.
func (mg *Route53ResolverFirewallConfig) GetProviderConfigReference() *xpv1.Reference {
	return mg.Spec.ProviderConfigReference
}

/*
GetProviderReference of this Route53ResolverFirewallConfig.
Deprecated: Use GetProviderConfigReference.
*/
func (mg *Route53ResolverFirewallConfig) GetProviderReference() *xpv1.Reference {
	return mg.Spec.ProviderReference
}

// GetWriteConnectionSecretToReference of this Route53ResolverFirewallConfig.
func (mg *Route53ResolverFirewallConfig) GetWriteConnectionSecretToReference() *xpv1.SecretReference {
	return mg.Spec.WriteConnectionSecretToReference
}

// SetConditions of this Route53ResolverFirewallConfig.
func (mg *Route53ResolverFirewallConfig) SetConditions(c ...xpv1.Condition) {
	mg.Status.SetConditions(c...)
}

// SetDeletionPolicy of this Route53ResolverFirewallConfig.
func (mg *Route53ResolverFirewallConfig) SetDeletionPolicy(r xpv1.DeletionPolicy) {
	mg.Spec.DeletionPolicy = r
}

// SetProviderConfigReference of this Route53ResolverFirewallConfig.
func (mg *Route53ResolverFirewallConfig) SetProviderConfigReference(r *xpv1.Reference) {
	mg.Spec.ProviderConfigReference = r
}

/*
SetProviderReference of this Route53ResolverFirewallConfig.
Deprecated: Use SetProviderConfigReference.
*/
func (mg *Route53ResolverFirewallConfig) SetProviderReference(r *xpv1.Reference) {
	mg.Spec.ProviderReference = r
}

// SetWriteConnectionSecretToReference of this Route53ResolverFirewallConfig.
func (mg *Route53ResolverFirewallConfig) SetWriteConnectionSecretToReference(r *xpv1.SecretReference) {
	mg.Spec.WriteConnectionSecretToReference = r
}

// GetCondition of this Route53ResolverFirewallDomainList.
func (mg *Route53ResolverFirewallDomainList) GetCondition(ct xpv1.ConditionType) xpv1.Condition {
	return mg.Status.GetCondition(ct)
}

// GetDeletionPolicy of this Route53ResolverFirewallDomainList.
func (mg *Route53ResolverFirewallDomainList) GetDeletionPolicy() xpv1.DeletionPolicy {
	return mg.Spec.DeletionPolicy
}

// GetProviderConfigReference of this Route53ResolverFirewallDomainList.
func (mg *Route53ResolverFirewallDomainList) GetProviderConfigReference() *xpv1.Reference {
	return mg.Spec.ProviderConfigReference
}

/*
GetProviderReference of this Route53ResolverFirewallDomainList.
Deprecated: Use GetProviderConfigReference.
*/
func (mg *Route53ResolverFirewallDomainList) GetProviderReference() *xpv1.Reference {
	return mg.Spec.ProviderReference
}

// GetWriteConnectionSecretToReference of this Route53ResolverFirewallDomainList.
func (mg *Route53ResolverFirewallDomainList) GetWriteConnectionSecretToReference() *xpv1.SecretReference {
	return mg.Spec.WriteConnectionSecretToReference
}

// SetConditions of this Route53ResolverFirewallDomainList.
func (mg *Route53ResolverFirewallDomainList) SetConditions(c ...xpv1.Condition) {
	mg.Status.SetConditions(c...)
}

// SetDeletionPolicy of this Route53ResolverFirewallDomainList.
func (mg *Route53ResolverFirewallDomainList) SetDeletionPolicy(r xpv1.DeletionPolicy) {
	mg.Spec.DeletionPolicy = r
}

// SetProviderConfigReference of this Route53ResolverFirewallDomainList.
func (mg *Route53ResolverFirewallDomainList) SetProviderConfigReference(r *xpv1.Reference) {
	mg.Spec.ProviderConfigReference = r
}

/*
SetProviderReference of this Route53ResolverFirewallDomainList.
Deprecated: Use SetProviderConfigReference.
*/
func (mg *Route53ResolverFirewallDomainList) SetProviderReference(r *xpv1.Reference) {
	mg.Spec.ProviderReference = r
}

// SetWriteConnectionSecretToReference of this Route53ResolverFirewallDomainList.
func (mg *Route53ResolverFirewallDomainList) SetWriteConnectionSecretToReference(r *xpv1.SecretReference) {
	mg.Spec.WriteConnectionSecretToReference = r
}

// GetCondition of this Route53ResolverFirewallRule.
func (mg *Route53ResolverFirewallRule) GetCondition(ct xpv1.ConditionType) xpv1.Condition {
	return mg.Status.GetCondition(ct)
}

// GetDeletionPolicy of this Route53ResolverFirewallRule.
func (mg *Route53ResolverFirewallRule) GetDeletionPolicy() xpv1.DeletionPolicy {
	return mg.Spec.DeletionPolicy
}

// GetProviderConfigReference of this Route53ResolverFirewallRule.
func (mg *Route53ResolverFirewallRule) GetProviderConfigReference() *xpv1.Reference {
	return mg.Spec.ProviderConfigReference
}

/*
GetProviderReference of this Route53ResolverFirewallRule.
Deprecated: Use GetProviderConfigReference.
*/
func (mg *Route53ResolverFirewallRule) GetProviderReference() *xpv1.Reference {
	return mg.Spec.ProviderReference
}

// GetWriteConnectionSecretToReference of this Route53ResolverFirewallRule.
func (mg *Route53ResolverFirewallRule) GetWriteConnectionSecretToReference() *xpv1.SecretReference {
	return mg.Spec.WriteConnectionSecretToReference
}

// SetConditions of this Route53ResolverFirewallRule.
func (mg *Route53ResolverFirewallRule) SetConditions(c ...xpv1.Condition) {
	mg.Status.SetConditions(c...)
}

// SetDeletionPolicy of this Route53ResolverFirewallRule.
func (mg *Route53ResolverFirewallRule) SetDeletionPolicy(r xpv1.DeletionPolicy) {
	mg.Spec.DeletionPolicy = r
}

// SetProviderConfigReference of this Route53ResolverFirewallRule.
func (mg *Route53ResolverFirewallRule) SetProviderConfigReference(r *xpv1.Reference) {
	mg.Spec.ProviderConfigReference = r
}

/*
SetProviderReference of this Route53ResolverFirewallRule.
Deprecated: Use SetProviderConfigReference.
*/
func (mg *Route53ResolverFirewallRule) SetProviderReference(r *xpv1.Reference) {
	mg.Spec.ProviderReference = r
}

// SetWriteConnectionSecretToReference of this Route53ResolverFirewallRule.
func (mg *Route53ResolverFirewallRule) SetWriteConnectionSecretToReference(r *xpv1.SecretReference) {
	mg.Spec.WriteConnectionSecretToReference = r
}

// GetCondition of this Route53ResolverFirewallRuleGroupAssociation.
func (mg *Route53ResolverFirewallRuleGroupAssociation) GetCondition(ct xpv1.ConditionType) xpv1.Condition {
	return mg.Status.GetCondition(ct)
}

// GetDeletionPolicy of this Route53ResolverFirewallRuleGroupAssociation.
func (mg *Route53ResolverFirewallRuleGroupAssociation) GetDeletionPolicy() xpv1.DeletionPolicy {
	return mg.Spec.DeletionPolicy
}

// GetProviderConfigReference of this Route53ResolverFirewallRuleGroupAssociation.
func (mg *Route53ResolverFirewallRuleGroupAssociation) GetProviderConfigReference() *xpv1.Reference {
	return mg.Spec.ProviderConfigReference
}

/*
GetProviderReference of this Route53ResolverFirewallRuleGroupAssociation.
Deprecated: Use GetProviderConfigReference.
*/
func (mg *Route53ResolverFirewallRuleGroupAssociation) GetProviderReference() *xpv1.Reference {
	return mg.Spec.ProviderReference
}

// GetWriteConnectionSecretToReference of this Route53ResolverFirewallRuleGroupAssociation.
func (mg *Route53ResolverFirewallRuleGroupAssociation) GetWriteConnectionSecretToReference() *xpv1.SecretReference {
	return mg.Spec.WriteConnectionSecretToReference
}

// SetConditions of this Route53ResolverFirewallRuleGroupAssociation.
func (mg *Route53ResolverFirewallRuleGroupAssociation) SetConditions(c ...xpv1.Condition) {
	mg.Status.SetConditions(c...)
}

// SetDeletionPolicy of this Route53ResolverFirewallRuleGroupAssociation.
func (mg *Route53ResolverFirewallRuleGroupAssociation) SetDeletionPolicy(r xpv1.DeletionPolicy) {
	mg.Spec.DeletionPolicy = r
}

// SetProviderConfigReference of this Route53ResolverFirewallRuleGroupAssociation.
func (mg *Route53ResolverFirewallRuleGroupAssociation) SetProviderConfigReference(r *xpv1.Reference) {
	mg.Spec.ProviderConfigReference = r
}

/*
SetProviderReference of this Route53ResolverFirewallRuleGroupAssociation.
Deprecated: Use SetProviderConfigReference.
*/
func (mg *Route53ResolverFirewallRuleGroupAssociation) SetProviderReference(r *xpv1.Reference) {
	mg.Spec.ProviderReference = r
}

// SetWriteConnectionSecretToReference of this Route53ResolverFirewallRuleGroupAssociation.
func (mg *Route53ResolverFirewallRuleGroupAssociation) SetWriteConnectionSecretToReference(r *xpv1.SecretReference) {
	mg.Spec.WriteConnectionSecretToReference = r
}

// GetCondition of this Route53ResolverQueryLogConfig.
func (mg *Route53ResolverQueryLogConfig) GetCondition(ct xpv1.ConditionType) xpv1.Condition {
	return mg.Status.GetCondition(ct)
}

// GetDeletionPolicy of this Route53ResolverQueryLogConfig.
func (mg *Route53ResolverQueryLogConfig) GetDeletionPolicy() xpv1.DeletionPolicy {
	return mg.Spec.DeletionPolicy
}

// GetProviderConfigReference of this Route53ResolverQueryLogConfig.
func (mg *Route53ResolverQueryLogConfig) GetProviderConfigReference() *xpv1.Reference {
	return mg.Spec.ProviderConfigReference
}

/*
GetProviderReference of this Route53ResolverQueryLogConfig.
Deprecated: Use GetProviderConfigReference.
*/
func (mg *Route53ResolverQueryLogConfig) GetProviderReference() *xpv1.Reference {
	return mg.Spec.ProviderReference
}

// GetWriteConnectionSecretToReference of this Route53ResolverQueryLogConfig.
func (mg *Route53ResolverQueryLogConfig) GetWriteConnectionSecretToReference() *xpv1.SecretReference {
	return mg.Spec.WriteConnectionSecretToReference
}

// SetConditions of this Route53ResolverQueryLogConfig.
func (mg *Route53ResolverQueryLogConfig) SetConditions(c ...xpv1.Condition) {
	mg.Status.SetConditions(c...)
}

// SetDeletionPolicy of this Route53ResolverQueryLogConfig.
func (mg *Route53ResolverQueryLogConfig) SetDeletionPolicy(r xpv1.DeletionPolicy) {
	mg.Spec.DeletionPolicy = r
}

// SetProviderConfigReference of this Route53ResolverQueryLogConfig.
func (mg *Route53ResolverQueryLogConfig) SetProviderConfigReference(r *xpv1.Reference) {
	mg.Spec.ProviderConfigReference = r
}

/*
SetProviderReference of this Route53ResolverQueryLogConfig.
Deprecated: Use SetProviderConfigReference.
*/
func (mg *Route53ResolverQueryLogConfig) SetProviderReference(r *xpv1.Reference) {
	mg.Spec.ProviderReference = r
}

// SetWriteConnectionSecretToReference of this Route53ResolverQueryLogConfig.
func (mg *Route53ResolverQueryLogConfig) SetWriteConnectionSecretToReference(r *xpv1.SecretReference) {
	mg.Spec.WriteConnectionSecretToReference = r
}

// GetCondition of this Route53ResolverQueryLogConfigAssociation.
func (mg *Route53ResolverQueryLogConfigAssociation) GetCondition(ct xpv1.ConditionType) xpv1.Condition {
	return mg.Status.GetCondition(ct)
}

// GetDeletionPolicy of this Route53ResolverQueryLogConfigAssociation.
func (mg *Route53ResolverQueryLogConfigAssociation) GetDeletionPolicy() xpv1.DeletionPolicy {
	return mg.Spec.DeletionPolicy
}

// GetProviderConfigReference of this Route53ResolverQueryLogConfigAssociation.
func (mg *Route53ResolverQueryLogConfigAssociation) GetProviderConfigReference() *xpv1.Reference {
	return mg.Spec.ProviderConfigReference
}

/*
GetProviderReference of this Route53ResolverQueryLogConfigAssociation.
Deprecated: Use GetProviderConfigReference.
*/
func (mg *Route53ResolverQueryLogConfigAssociation) GetProviderReference() *xpv1.Reference {
	return mg.Spec.ProviderReference
}

// GetWriteConnectionSecretToReference of this Route53ResolverQueryLogConfigAssociation.
func (mg *Route53ResolverQueryLogConfigAssociation) GetWriteConnectionSecretToReference() *xpv1.SecretReference {
	return mg.Spec.WriteConnectionSecretToReference
}

// SetConditions of this Route53ResolverQueryLogConfigAssociation.
func (mg *Route53ResolverQueryLogConfigAssociation) SetConditions(c ...xpv1.Condition) {
	mg.Status.SetConditions(c...)
}

// SetDeletionPolicy of this Route53ResolverQueryLogConfigAssociation.
func (mg *Route53ResolverQueryLogConfigAssociation) SetDeletionPolicy(r xpv1.DeletionPolicy) {
	mg.Spec.DeletionPolicy = r
}

// SetProviderConfigReference of this Route53ResolverQueryLogConfigAssociation.
func (mg *Route53ResolverQueryLogConfigAssociation) SetProviderConfigReference(r *xpv1.Reference) {
	mg.Spec.ProviderConfigReference = r
}

/*
SetProviderReference of this Route53ResolverQueryLogConfigAssociation.
Deprecated: Use SetProviderConfigReference.
*/
func (mg *Route53ResolverQueryLogConfigAssociation) SetProviderReference(r *xpv1.Reference) {
	mg.Spec.ProviderReference = r
}

// SetWriteConnectionSecretToReference of this Route53ResolverQueryLogConfigAssociation.
func (mg *Route53ResolverQueryLogConfigAssociation) SetWriteConnectionSecretToReference(r *xpv1.SecretReference) {
	mg.Spec.WriteConnectionSecretToReference = r
}

// GetCondition of this Route53ResolverRule.
func (mg *Route53ResolverRule) GetCondition(ct xpv1.ConditionType) xpv1.Condition {
	return mg.Status.GetCondition(ct)
}

// GetDeletionPolicy of this Route53ResolverRule.
func (mg *Route53ResolverRule) GetDeletionPolicy() xpv1.DeletionPolicy {
	return mg.Spec.DeletionPolicy
}

// GetProviderConfigReference of this Route53ResolverRule.
func (mg *Route53ResolverRule) GetProviderConfigReference() *xpv1.Reference {
	return mg.Spec.ProviderConfigReference
}

/*
GetProviderReference of this Route53ResolverRule.
Deprecated: Use GetProviderConfigReference.
*/
func (mg *Route53ResolverRule) GetProviderReference() *xpv1.Reference {
	return mg.Spec.ProviderReference
}

// GetWriteConnectionSecretToReference of this Route53ResolverRule.
func (mg *Route53ResolverRule) GetWriteConnectionSecretToReference() *xpv1.SecretReference {
	return mg.Spec.WriteConnectionSecretToReference
}

// SetConditions of this Route53ResolverRule.
func (mg *Route53ResolverRule) SetConditions(c ...xpv1.Condition) {
	mg.Status.SetConditions(c...)
}

// SetDeletionPolicy of this Route53ResolverRule.
func (mg *Route53ResolverRule) SetDeletionPolicy(r xpv1.DeletionPolicy) {
	mg.Spec.DeletionPolicy = r
}

// SetProviderConfigReference of this Route53ResolverRule.
func (mg *Route53ResolverRule) SetProviderConfigReference(r *xpv1.Reference) {
	mg.Spec.ProviderConfigReference = r
}

/*
SetProviderReference of this Route53ResolverRule.
Deprecated: Use SetProviderConfigReference.
*/
func (mg *Route53ResolverRule) SetProviderReference(r *xpv1.Reference) {
	mg.Spec.ProviderReference = r
}

// SetWriteConnectionSecretToReference of this Route53ResolverRule.
func (mg *Route53ResolverRule) SetWriteConnectionSecretToReference(r *xpv1.SecretReference) {
	mg.Spec.WriteConnectionSecretToReference = r
}

// GetCondition of this Route53ResolverRuleAssociation.
func (mg *Route53ResolverRuleAssociation) GetCondition(ct xpv1.ConditionType) xpv1.Condition {
	return mg.Status.GetCondition(ct)
}

// GetDeletionPolicy of this Route53ResolverRuleAssociation.
func (mg *Route53ResolverRuleAssociation) GetDeletionPolicy() xpv1.DeletionPolicy {
	return mg.Spec.DeletionPolicy
}

// GetProviderConfigReference of this Route53ResolverRuleAssociation.
func (mg *Route53ResolverRuleAssociation) GetProviderConfigReference() *xpv1.Reference {
	return mg.Spec.ProviderConfigReference
}

/*
GetProviderReference of this Route53ResolverRuleAssociation.
Deprecated: Use GetProviderConfigReference.
*/
func (mg *Route53ResolverRuleAssociation) GetProviderReference() *xpv1.Reference {
	return mg.Spec.ProviderReference
}

// GetWriteConnectionSecretToReference of this Route53ResolverRuleAssociation.
func (mg *Route53ResolverRuleAssociation) GetWriteConnectionSecretToReference() *xpv1.SecretReference {
	return mg.Spec.WriteConnectionSecretToReference
}

// SetConditions of this Route53ResolverRuleAssociation.
func (mg *Route53ResolverRuleAssociation) SetConditions(c ...xpv1.Condition) {
	mg.Status.SetConditions(c...)
}

// SetDeletionPolicy of this Route53ResolverRuleAssociation.
func (mg *Route53ResolverRuleAssociation) SetDeletionPolicy(r xpv1.DeletionPolicy) {
	mg.Spec.DeletionPolicy = r
}

// SetProviderConfigReference of this Route53ResolverRuleAssociation.
func (mg *Route53ResolverRuleAssociation) SetProviderConfigReference(r *xpv1.Reference) {
	mg.Spec.ProviderConfigReference = r
}

/*
SetProviderReference of this Route53ResolverRuleAssociation.
Deprecated: Use SetProviderConfigReference.
*/
func (mg *Route53ResolverRuleAssociation) SetProviderReference(r *xpv1.Reference) {
	mg.Spec.ProviderReference = r
}

// SetWriteConnectionSecretToReference of this Route53ResolverRuleAssociation.
func (mg *Route53ResolverRuleAssociation) SetWriteConnectionSecretToReference(r *xpv1.SecretReference) {
	mg.Spec.WriteConnectionSecretToReference = r
}

// GetCondition of this Route53VpcAssociationAuthorization.
func (mg *Route53VpcAssociationAuthorization) GetCondition(ct xpv1.ConditionType) xpv1.Condition {
	return mg.Status.GetCondition(ct)
}

// GetDeletionPolicy of this Route53VpcAssociationAuthorization.
func (mg *Route53VpcAssociationAuthorization) GetDeletionPolicy() xpv1.DeletionPolicy {
	return mg.Spec.DeletionPolicy
}

// GetProviderConfigReference of this Route53VpcAssociationAuthorization.
func (mg *Route53VpcAssociationAuthorization) GetProviderConfigReference() *xpv1.Reference {
	return mg.Spec.ProviderConfigReference
}

/*
GetProviderReference of this Route53VpcAssociationAuthorization.
Deprecated: Use GetProviderConfigReference.
*/
func (mg *Route53VpcAssociationAuthorization) GetProviderReference() *xpv1.Reference {
	return mg.Spec.ProviderReference
}

// GetWriteConnectionSecretToReference of this Route53VpcAssociationAuthorization.
func (mg *Route53VpcAssociationAuthorization) GetWriteConnectionSecretToReference() *xpv1.SecretReference {
	return mg.Spec.WriteConnectionSecretToReference
}

// SetConditions of this Route53VpcAssociationAuthorization.
func (mg *Route53VpcAssociationAuthorization) SetConditions(c ...xpv1.Condition) {
	mg.Status.SetConditions(c...)
}

// SetDeletionPolicy of this Route53VpcAssociationAuthorization.
func (mg *Route53VpcAssociationAuthorization) SetDeletionPolicy(r xpv1.DeletionPolicy) {
	mg.Spec.DeletionPolicy = r
}

// SetProviderConfigReference of this Route53VpcAssociationAuthorization.
func (mg *Route53VpcAssociationAuthorization) SetProviderConfigReference(r *xpv1.Reference) {
	mg.Spec.ProviderConfigReference = r
}

/*
SetProviderReference of this Route53VpcAssociationAuthorization.
Deprecated: Use SetProviderConfigReference.
*/
func (mg *Route53VpcAssociationAuthorization) SetProviderReference(r *xpv1.Reference) {
	mg.Spec.ProviderReference = r
}

// SetWriteConnectionSecretToReference of this Route53VpcAssociationAuthorization.
func (mg *Route53VpcAssociationAuthorization) SetWriteConnectionSecretToReference(r *xpv1.SecretReference) {
	mg.Spec.WriteConnectionSecretToReference = r
}

// GetCondition of this Route53Zone.
func (mg *Route53Zone) GetCondition(ct xpv1.ConditionType) xpv1.Condition {
	return mg.Status.GetCondition(ct)
}

// GetDeletionPolicy of this Route53Zone.
func (mg *Route53Zone) GetDeletionPolicy() xpv1.DeletionPolicy {
	return mg.Spec.DeletionPolicy
}

// GetProviderConfigReference of this Route53Zone.
func (mg *Route53Zone) GetProviderConfigReference() *xpv1.Reference {
	return mg.Spec.ProviderConfigReference
}

/*
GetProviderReference of this Route53Zone.
Deprecated: Use GetProviderConfigReference.
*/
func (mg *Route53Zone) GetProviderReference() *xpv1.Reference {
	return mg.Spec.ProviderReference
}

// GetWriteConnectionSecretToReference of this Route53Zone.
func (mg *Route53Zone) GetWriteConnectionSecretToReference() *xpv1.SecretReference {
	return mg.Spec.WriteConnectionSecretToReference
}

// SetConditions of this Route53Zone.
func (mg *Route53Zone) SetConditions(c ...xpv1.Condition) {
	mg.Status.SetConditions(c...)
}

// SetDeletionPolicy of this Route53Zone.
func (mg *Route53Zone) SetDeletionPolicy(r xpv1.DeletionPolicy) {
	mg.Spec.DeletionPolicy = r
}

// SetProviderConfigReference of this Route53Zone.
func (mg *Route53Zone) SetProviderConfigReference(r *xpv1.Reference) {
	mg.Spec.ProviderConfigReference = r
}

/*
SetProviderReference of this Route53Zone.
Deprecated: Use SetProviderConfigReference.
*/
func (mg *Route53Zone) SetProviderReference(r *xpv1.Reference) {
	mg.Spec.ProviderReference = r
}

// SetWriteConnectionSecretToReference of this Route53Zone.
func (mg *Route53Zone) SetWriteConnectionSecretToReference(r *xpv1.SecretReference) {
	mg.Spec.WriteConnectionSecretToReference = r
}

// GetCondition of this Route53ZoneAssociation.
func (mg *Route53ZoneAssociation) GetCondition(ct xpv1.ConditionType) xpv1.Condition {
	return mg.Status.GetCondition(ct)
}

// GetDeletionPolicy of this Route53ZoneAssociation.
func (mg *Route53ZoneAssociation) GetDeletionPolicy() xpv1.DeletionPolicy {
	return mg.Spec.DeletionPolicy
}

// GetProviderConfigReference of this Route53ZoneAssociation.
func (mg *Route53ZoneAssociation) GetProviderConfigReference() *xpv1.Reference {
	return mg.Spec.ProviderConfigReference
}

/*
GetProviderReference of this Route53ZoneAssociation.
Deprecated: Use GetProviderConfigReference.
*/
func (mg *Route53ZoneAssociation) GetProviderReference() *xpv1.Reference {
	return mg.Spec.ProviderReference
}

// GetWriteConnectionSecretToReference of this Route53ZoneAssociation.
func (mg *Route53ZoneAssociation) GetWriteConnectionSecretToReference() *xpv1.SecretReference {
	return mg.Spec.WriteConnectionSecretToReference
}

// SetConditions of this Route53ZoneAssociation.
func (mg *Route53ZoneAssociation) SetConditions(c ...xpv1.Condition) {
	mg.Status.SetConditions(c...)
}

// SetDeletionPolicy of this Route53ZoneAssociation.
func (mg *Route53ZoneAssociation) SetDeletionPolicy(r xpv1.DeletionPolicy) {
	mg.Spec.DeletionPolicy = r
}

// SetProviderConfigReference of this Route53ZoneAssociation.
func (mg *Route53ZoneAssociation) SetProviderConfigReference(r *xpv1.Reference) {
	mg.Spec.ProviderConfigReference = r
}

/*
SetProviderReference of this Route53ZoneAssociation.
Deprecated: Use SetProviderConfigReference.
*/
func (mg *Route53ZoneAssociation) SetProviderReference(r *xpv1.Reference) {
	mg.Spec.ProviderReference = r
}

// SetWriteConnectionSecretToReference of this Route53ZoneAssociation.
func (mg *Route53ZoneAssociation) SetWriteConnectionSecretToReference(r *xpv1.SecretReference) {
	mg.Spec.WriteConnectionSecretToReference = r
}
