/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	xpv1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"
)

type ApiGatewayDomainNameObservation struct {
	Arn string `json:"arn" tf:"arn"`

	CertificateUploadDate string `json:"certificateUploadDate" tf:"certificate_upload_date"`

	CloudfrontDomainName string `json:"cloudfrontDomainName" tf:"cloudfront_domain_name"`

	CloudfrontZoneID string `json:"cloudfrontZoneId" tf:"cloudfront_zone_id"`

	RegionalDomainName string `json:"regionalDomainName" tf:"regional_domain_name"`

	RegionalZoneID string `json:"regionalZoneId" tf:"regional_zone_id"`
}

type ApiGatewayDomainNameParameters struct {

	// +kubebuilder:validation:Optional
	CertificateArn *string `json:"certificateArn,omitempty" tf:"certificate_arn"`

	// +kubebuilder:validation:Optional
	CertificateBody *string `json:"certificateBody,omitempty" tf:"certificate_body"`

	// +kubebuilder:validation:Optional
	CertificateChain *string `json:"certificateChain,omitempty" tf:"certificate_chain"`

	// +kubebuilder:validation:Optional
	CertificateName *string `json:"certificateName,omitempty" tf:"certificate_name"`

	// +kubebuilder:validation:Optional
	CertificatePrivateKey *string `json:"certificatePrivateKey,omitempty" tf:"certificate_private_key"`

	// +kubebuilder:validation:Required
	DomainName string `json:"domainName" tf:"domain_name"`

	// +kubebuilder:validation:Optional
	EndpointConfiguration []EndpointConfigurationParameters `json:"endpointConfiguration,omitempty" tf:"endpoint_configuration"`

	// +kubebuilder:validation:Optional
	MutualTLSAuthentication []MutualTLSAuthenticationParameters `json:"mutualTlsAuthentication,omitempty" tf:"mutual_tls_authentication"`

	// Region is the region you'd like your resource to be created in.
	// +terrajet:crd:field:TFTag=-
	// +kubebuilder:validation:Required
	Region string `json:"region" tf:"-"`

	// +kubebuilder:validation:Optional
	RegionalCertificateArn *string `json:"regionalCertificateArn,omitempty" tf:"regional_certificate_arn"`

	// +kubebuilder:validation:Optional
	RegionalCertificateName *string `json:"regionalCertificateName,omitempty" tf:"regional_certificate_name"`

	// +kubebuilder:validation:Optional
	SecurityPolicy *string `json:"securityPolicy,omitempty" tf:"security_policy"`

	// +kubebuilder:validation:Optional
	Tags map[string]string `json:"tags,omitempty" tf:"tags"`

	// +kubebuilder:validation:Optional
	TagsAll map[string]string `json:"tagsAll,omitempty" tf:"tags_all"`
}

type EndpointConfigurationObservation struct {
}

type EndpointConfigurationParameters struct {

	// +kubebuilder:validation:Required
	Types []string `json:"types" tf:"types"`
}

type MutualTLSAuthenticationObservation struct {
}

type MutualTLSAuthenticationParameters struct {

	// +kubebuilder:validation:Required
	TruststoreURI string `json:"truststoreUri" tf:"truststore_uri"`

	// +kubebuilder:validation:Optional
	TruststoreVersion *string `json:"truststoreVersion,omitempty" tf:"truststore_version"`
}

// ApiGatewayDomainNameSpec defines the desired state of ApiGatewayDomainName
type ApiGatewayDomainNameSpec struct {
	xpv1.ResourceSpec `json:",inline"`
	ForProvider       ApiGatewayDomainNameParameters `json:"forProvider"`
}

// ApiGatewayDomainNameStatus defines the observed state of ApiGatewayDomainName.
type ApiGatewayDomainNameStatus struct {
	xpv1.ResourceStatus `json:",inline"`
	AtProvider          ApiGatewayDomainNameObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// ApiGatewayDomainName is the Schema for the ApiGatewayDomainNames API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,tfaws}
type ApiGatewayDomainName struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              ApiGatewayDomainNameSpec   `json:"spec"`
	Status            ApiGatewayDomainNameStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// ApiGatewayDomainNameList contains a list of ApiGatewayDomainNames
type ApiGatewayDomainNameList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []ApiGatewayDomainName `json:"items"`
}

// Repository type metadata.
var (
	ApiGatewayDomainNameKind             = "ApiGatewayDomainName"
	ApiGatewayDomainNameGroupKind        = schema.GroupKind{Group: Group, Kind: ApiGatewayDomainNameKind}.String()
	ApiGatewayDomainNameKindAPIVersion   = ApiGatewayDomainNameKind + "." + GroupVersion.String()
	ApiGatewayDomainNameGroupVersionKind = GroupVersion.WithKind(ApiGatewayDomainNameKind)
)

func init() {
	SchemeBuilder.Register(&ApiGatewayDomainName{}, &ApiGatewayDomainNameList{})
}
