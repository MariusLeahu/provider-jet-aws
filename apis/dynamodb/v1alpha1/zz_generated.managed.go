/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/
// Code generated by angryjet. DO NOT EDIT.

package v1alpha1

import xpv1 "github.com/crossplane/crossplane-runtime/apis/common/v1"

// GetCondition of this DynamodbGlobalTable.
func (mg *DynamodbGlobalTable) GetCondition(ct xpv1.ConditionType) xpv1.Condition {
	return mg.Status.GetCondition(ct)
}

// GetDeletionPolicy of this DynamodbGlobalTable.
func (mg *DynamodbGlobalTable) GetDeletionPolicy() xpv1.DeletionPolicy {
	return mg.Spec.DeletionPolicy
}

// GetProviderConfigReference of this DynamodbGlobalTable.
func (mg *DynamodbGlobalTable) GetProviderConfigReference() *xpv1.Reference {
	return mg.Spec.ProviderConfigReference
}

/*
GetProviderReference of this DynamodbGlobalTable.
Deprecated: Use GetProviderConfigReference.
*/
func (mg *DynamodbGlobalTable) GetProviderReference() *xpv1.Reference {
	return mg.Spec.ProviderReference
}

// GetWriteConnectionSecretToReference of this DynamodbGlobalTable.
func (mg *DynamodbGlobalTable) GetWriteConnectionSecretToReference() *xpv1.SecretReference {
	return mg.Spec.WriteConnectionSecretToReference
}

// SetConditions of this DynamodbGlobalTable.
func (mg *DynamodbGlobalTable) SetConditions(c ...xpv1.Condition) {
	mg.Status.SetConditions(c...)
}

// SetDeletionPolicy of this DynamodbGlobalTable.
func (mg *DynamodbGlobalTable) SetDeletionPolicy(r xpv1.DeletionPolicy) {
	mg.Spec.DeletionPolicy = r
}

// SetProviderConfigReference of this DynamodbGlobalTable.
func (mg *DynamodbGlobalTable) SetProviderConfigReference(r *xpv1.Reference) {
	mg.Spec.ProviderConfigReference = r
}

/*
SetProviderReference of this DynamodbGlobalTable.
Deprecated: Use SetProviderConfigReference.
*/
func (mg *DynamodbGlobalTable) SetProviderReference(r *xpv1.Reference) {
	mg.Spec.ProviderReference = r
}

// SetWriteConnectionSecretToReference of this DynamodbGlobalTable.
func (mg *DynamodbGlobalTable) SetWriteConnectionSecretToReference(r *xpv1.SecretReference) {
	mg.Spec.WriteConnectionSecretToReference = r
}

// GetCondition of this DynamodbKinesisStreamingDestination.
func (mg *DynamodbKinesisStreamingDestination) GetCondition(ct xpv1.ConditionType) xpv1.Condition {
	return mg.Status.GetCondition(ct)
}

// GetDeletionPolicy of this DynamodbKinesisStreamingDestination.
func (mg *DynamodbKinesisStreamingDestination) GetDeletionPolicy() xpv1.DeletionPolicy {
	return mg.Spec.DeletionPolicy
}

// GetProviderConfigReference of this DynamodbKinesisStreamingDestination.
func (mg *DynamodbKinesisStreamingDestination) GetProviderConfigReference() *xpv1.Reference {
	return mg.Spec.ProviderConfigReference
}

/*
GetProviderReference of this DynamodbKinesisStreamingDestination.
Deprecated: Use GetProviderConfigReference.
*/
func (mg *DynamodbKinesisStreamingDestination) GetProviderReference() *xpv1.Reference {
	return mg.Spec.ProviderReference
}

// GetWriteConnectionSecretToReference of this DynamodbKinesisStreamingDestination.
func (mg *DynamodbKinesisStreamingDestination) GetWriteConnectionSecretToReference() *xpv1.SecretReference {
	return mg.Spec.WriteConnectionSecretToReference
}

// SetConditions of this DynamodbKinesisStreamingDestination.
func (mg *DynamodbKinesisStreamingDestination) SetConditions(c ...xpv1.Condition) {
	mg.Status.SetConditions(c...)
}

// SetDeletionPolicy of this DynamodbKinesisStreamingDestination.
func (mg *DynamodbKinesisStreamingDestination) SetDeletionPolicy(r xpv1.DeletionPolicy) {
	mg.Spec.DeletionPolicy = r
}

// SetProviderConfigReference of this DynamodbKinesisStreamingDestination.
func (mg *DynamodbKinesisStreamingDestination) SetProviderConfigReference(r *xpv1.Reference) {
	mg.Spec.ProviderConfigReference = r
}

/*
SetProviderReference of this DynamodbKinesisStreamingDestination.
Deprecated: Use SetProviderConfigReference.
*/
func (mg *DynamodbKinesisStreamingDestination) SetProviderReference(r *xpv1.Reference) {
	mg.Spec.ProviderReference = r
}

// SetWriteConnectionSecretToReference of this DynamodbKinesisStreamingDestination.
func (mg *DynamodbKinesisStreamingDestination) SetWriteConnectionSecretToReference(r *xpv1.SecretReference) {
	mg.Spec.WriteConnectionSecretToReference = r
}

// GetCondition of this DynamodbTable.
func (mg *DynamodbTable) GetCondition(ct xpv1.ConditionType) xpv1.Condition {
	return mg.Status.GetCondition(ct)
}

// GetDeletionPolicy of this DynamodbTable.
func (mg *DynamodbTable) GetDeletionPolicy() xpv1.DeletionPolicy {
	return mg.Spec.DeletionPolicy
}

// GetProviderConfigReference of this DynamodbTable.
func (mg *DynamodbTable) GetProviderConfigReference() *xpv1.Reference {
	return mg.Spec.ProviderConfigReference
}

/*
GetProviderReference of this DynamodbTable.
Deprecated: Use GetProviderConfigReference.
*/
func (mg *DynamodbTable) GetProviderReference() *xpv1.Reference {
	return mg.Spec.ProviderReference
}

// GetWriteConnectionSecretToReference of this DynamodbTable.
func (mg *DynamodbTable) GetWriteConnectionSecretToReference() *xpv1.SecretReference {
	return mg.Spec.WriteConnectionSecretToReference
}

// SetConditions of this DynamodbTable.
func (mg *DynamodbTable) SetConditions(c ...xpv1.Condition) {
	mg.Status.SetConditions(c...)
}

// SetDeletionPolicy of this DynamodbTable.
func (mg *DynamodbTable) SetDeletionPolicy(r xpv1.DeletionPolicy) {
	mg.Spec.DeletionPolicy = r
}

// SetProviderConfigReference of this DynamodbTable.
func (mg *DynamodbTable) SetProviderConfigReference(r *xpv1.Reference) {
	mg.Spec.ProviderConfigReference = r
}

/*
SetProviderReference of this DynamodbTable.
Deprecated: Use SetProviderConfigReference.
*/
func (mg *DynamodbTable) SetProviderReference(r *xpv1.Reference) {
	mg.Spec.ProviderReference = r
}

// SetWriteConnectionSecretToReference of this DynamodbTable.
func (mg *DynamodbTable) SetWriteConnectionSecretToReference(r *xpv1.SecretReference) {
	mg.Spec.WriteConnectionSecretToReference = r
}

// GetCondition of this DynamodbTableItem.
func (mg *DynamodbTableItem) GetCondition(ct xpv1.ConditionType) xpv1.Condition {
	return mg.Status.GetCondition(ct)
}

// GetDeletionPolicy of this DynamodbTableItem.
func (mg *DynamodbTableItem) GetDeletionPolicy() xpv1.DeletionPolicy {
	return mg.Spec.DeletionPolicy
}

// GetProviderConfigReference of this DynamodbTableItem.
func (mg *DynamodbTableItem) GetProviderConfigReference() *xpv1.Reference {
	return mg.Spec.ProviderConfigReference
}

/*
GetProviderReference of this DynamodbTableItem.
Deprecated: Use GetProviderConfigReference.
*/
func (mg *DynamodbTableItem) GetProviderReference() *xpv1.Reference {
	return mg.Spec.ProviderReference
}

// GetWriteConnectionSecretToReference of this DynamodbTableItem.
func (mg *DynamodbTableItem) GetWriteConnectionSecretToReference() *xpv1.SecretReference {
	return mg.Spec.WriteConnectionSecretToReference
}

// SetConditions of this DynamodbTableItem.
func (mg *DynamodbTableItem) SetConditions(c ...xpv1.Condition) {
	mg.Status.SetConditions(c...)
}

// SetDeletionPolicy of this DynamodbTableItem.
func (mg *DynamodbTableItem) SetDeletionPolicy(r xpv1.DeletionPolicy) {
	mg.Spec.DeletionPolicy = r
}

// SetProviderConfigReference of this DynamodbTableItem.
func (mg *DynamodbTableItem) SetProviderConfigReference(r *xpv1.Reference) {
	mg.Spec.ProviderConfigReference = r
}

/*
SetProviderReference of this DynamodbTableItem.
Deprecated: Use SetProviderConfigReference.
*/
func (mg *DynamodbTableItem) SetProviderReference(r *xpv1.Reference) {
	mg.Spec.ProviderReference = r
}

// SetWriteConnectionSecretToReference of this DynamodbTableItem.
func (mg *DynamodbTableItem) SetWriteConnectionSecretToReference(r *xpv1.SecretReference) {
	mg.Spec.WriteConnectionSecretToReference = r
}
