/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type PublicAccessBlockConfigurationObservation struct {
}

type PublicAccessBlockConfigurationParameters struct {

	// +kubebuilder:validation:Optional
	BlockPublicAcls *bool `json:"blockPublicAcls,omitempty" tf:"block_public_acls"`

	// +kubebuilder:validation:Optional
	BlockPublicPolicy *bool `json:"blockPublicPolicy,omitempty" tf:"block_public_policy"`

	// +kubebuilder:validation:Optional
	IgnorePublicAcls *bool `json:"ignorePublicAcls,omitempty" tf:"ignore_public_acls"`

	// +kubebuilder:validation:Optional
	RestrictPublicBuckets *bool `json:"restrictPublicBuckets,omitempty" tf:"restrict_public_buckets"`
}

type S3AccessPointObservation struct {
	Arn string `json:"arn,omitempty" tf:"arn"`

	DomainName string `json:"domainName,omitempty" tf:"domain_name"`

	HasPublicAccessPolicy bool `json:"hasPublicAccessPolicy,omitempty" tf:"has_public_access_policy"`

	NetworkOrigin string `json:"networkOrigin,omitempty" tf:"network_origin"`
}

type S3AccessPointParameters struct {

	// +kubebuilder:validation:Optional
	AccountID *string `json:"accountId,omitempty" tf:"account_id"`

	// +kubebuilder:validation:Required
	Bucket string `json:"bucket" tf:"bucket"`

	// +kubebuilder:validation:Required
	Name string `json:"name" tf:"name"`

	// +kubebuilder:validation:Optional
	Policy *string `json:"policy,omitempty" tf:"policy"`

	// +kubebuilder:validation:Optional
	PublicAccessBlockConfiguration []PublicAccessBlockConfigurationParameters `json:"publicAccessBlockConfiguration,omitempty" tf:"public_access_block_configuration"`

	// Region is the region you'd like your resource to be created in.
	// +terrajet:crd:field:TFTag=-
	// +kubebuilder:validation:Required
	Region string `json:"region" tf:"-"`

	// +kubebuilder:validation:Optional
	VpcConfiguration []VpcConfigurationParameters `json:"vpcConfiguration,omitempty" tf:"vpc_configuration"`
}

type VpcConfigurationObservation struct {
}

type VpcConfigurationParameters struct {

	// +kubebuilder:validation:Required
	VpcID string `json:"vpcId" tf:"vpc_id"`
}

// S3AccessPointSpec defines the desired state of S3AccessPoint
type S3AccessPointSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     S3AccessPointParameters `json:"forProvider"`
}

// S3AccessPointStatus defines the observed state of S3AccessPoint.
type S3AccessPointStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        S3AccessPointObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// S3AccessPoint is the Schema for the S3AccessPoints API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,tfaws}
type S3AccessPoint struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              S3AccessPointSpec   `json:"spec"`
	Status            S3AccessPointStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// S3AccessPointList contains a list of S3AccessPoints
type S3AccessPointList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []S3AccessPoint `json:"items"`
}

// Repository type metadata.
var (
	S3AccessPointKind             = "S3AccessPoint"
	S3AccessPointGroupKind        = schema.GroupKind{Group: Group, Kind: S3AccessPointKind}.String()
	S3AccessPointKindAPIVersion   = S3AccessPointKind + "." + GroupVersion.String()
	S3AccessPointGroupVersionKind = GroupVersion.WithKind(S3AccessPointKind)
)

func init() {
	SchemeBuilder.Register(&S3AccessPoint{}, &S3AccessPointList{})
}
