/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/
// Code generated by angryjet. DO NOT EDIT.

package v1alpha1

import xpv1 "github.com/crossplane/crossplane-runtime/apis/common/v1"

// GetCondition of this S3AccessPoint.
func (mg *S3AccessPoint) GetCondition(ct xpv1.ConditionType) xpv1.Condition {
	return mg.Status.GetCondition(ct)
}

// GetDeletionPolicy of this S3AccessPoint.
func (mg *S3AccessPoint) GetDeletionPolicy() xpv1.DeletionPolicy {
	return mg.Spec.DeletionPolicy
}

// GetProviderConfigReference of this S3AccessPoint.
func (mg *S3AccessPoint) GetProviderConfigReference() *xpv1.Reference {
	return mg.Spec.ProviderConfigReference
}

/*
GetProviderReference of this S3AccessPoint.
Deprecated: Use GetProviderConfigReference.
*/
func (mg *S3AccessPoint) GetProviderReference() *xpv1.Reference {
	return mg.Spec.ProviderReference
}

// GetWriteConnectionSecretToReference of this S3AccessPoint.
func (mg *S3AccessPoint) GetWriteConnectionSecretToReference() *xpv1.SecretReference {
	return mg.Spec.WriteConnectionSecretToReference
}

// SetConditions of this S3AccessPoint.
func (mg *S3AccessPoint) SetConditions(c ...xpv1.Condition) {
	mg.Status.SetConditions(c...)
}

// SetDeletionPolicy of this S3AccessPoint.
func (mg *S3AccessPoint) SetDeletionPolicy(r xpv1.DeletionPolicy) {
	mg.Spec.DeletionPolicy = r
}

// SetProviderConfigReference of this S3AccessPoint.
func (mg *S3AccessPoint) SetProviderConfigReference(r *xpv1.Reference) {
	mg.Spec.ProviderConfigReference = r
}

/*
SetProviderReference of this S3AccessPoint.
Deprecated: Use SetProviderConfigReference.
*/
func (mg *S3AccessPoint) SetProviderReference(r *xpv1.Reference) {
	mg.Spec.ProviderReference = r
}

// SetWriteConnectionSecretToReference of this S3AccessPoint.
func (mg *S3AccessPoint) SetWriteConnectionSecretToReference(r *xpv1.SecretReference) {
	mg.Spec.WriteConnectionSecretToReference = r
}

// GetCondition of this S3AccountPublicAccessBlock.
func (mg *S3AccountPublicAccessBlock) GetCondition(ct xpv1.ConditionType) xpv1.Condition {
	return mg.Status.GetCondition(ct)
}

// GetDeletionPolicy of this S3AccountPublicAccessBlock.
func (mg *S3AccountPublicAccessBlock) GetDeletionPolicy() xpv1.DeletionPolicy {
	return mg.Spec.DeletionPolicy
}

// GetProviderConfigReference of this S3AccountPublicAccessBlock.
func (mg *S3AccountPublicAccessBlock) GetProviderConfigReference() *xpv1.Reference {
	return mg.Spec.ProviderConfigReference
}

/*
GetProviderReference of this S3AccountPublicAccessBlock.
Deprecated: Use GetProviderConfigReference.
*/
func (mg *S3AccountPublicAccessBlock) GetProviderReference() *xpv1.Reference {
	return mg.Spec.ProviderReference
}

// GetWriteConnectionSecretToReference of this S3AccountPublicAccessBlock.
func (mg *S3AccountPublicAccessBlock) GetWriteConnectionSecretToReference() *xpv1.SecretReference {
	return mg.Spec.WriteConnectionSecretToReference
}

// SetConditions of this S3AccountPublicAccessBlock.
func (mg *S3AccountPublicAccessBlock) SetConditions(c ...xpv1.Condition) {
	mg.Status.SetConditions(c...)
}

// SetDeletionPolicy of this S3AccountPublicAccessBlock.
func (mg *S3AccountPublicAccessBlock) SetDeletionPolicy(r xpv1.DeletionPolicy) {
	mg.Spec.DeletionPolicy = r
}

// SetProviderConfigReference of this S3AccountPublicAccessBlock.
func (mg *S3AccountPublicAccessBlock) SetProviderConfigReference(r *xpv1.Reference) {
	mg.Spec.ProviderConfigReference = r
}

/*
SetProviderReference of this S3AccountPublicAccessBlock.
Deprecated: Use SetProviderConfigReference.
*/
func (mg *S3AccountPublicAccessBlock) SetProviderReference(r *xpv1.Reference) {
	mg.Spec.ProviderReference = r
}

// SetWriteConnectionSecretToReference of this S3AccountPublicAccessBlock.
func (mg *S3AccountPublicAccessBlock) SetWriteConnectionSecretToReference(r *xpv1.SecretReference) {
	mg.Spec.WriteConnectionSecretToReference = r
}

// GetCondition of this S3Bucket.
func (mg *S3Bucket) GetCondition(ct xpv1.ConditionType) xpv1.Condition {
	return mg.Status.GetCondition(ct)
}

// GetDeletionPolicy of this S3Bucket.
func (mg *S3Bucket) GetDeletionPolicy() xpv1.DeletionPolicy {
	return mg.Spec.DeletionPolicy
}

// GetProviderConfigReference of this S3Bucket.
func (mg *S3Bucket) GetProviderConfigReference() *xpv1.Reference {
	return mg.Spec.ProviderConfigReference
}

/*
GetProviderReference of this S3Bucket.
Deprecated: Use GetProviderConfigReference.
*/
func (mg *S3Bucket) GetProviderReference() *xpv1.Reference {
	return mg.Spec.ProviderReference
}

// GetWriteConnectionSecretToReference of this S3Bucket.
func (mg *S3Bucket) GetWriteConnectionSecretToReference() *xpv1.SecretReference {
	return mg.Spec.WriteConnectionSecretToReference
}

// SetConditions of this S3Bucket.
func (mg *S3Bucket) SetConditions(c ...xpv1.Condition) {
	mg.Status.SetConditions(c...)
}

// SetDeletionPolicy of this S3Bucket.
func (mg *S3Bucket) SetDeletionPolicy(r xpv1.DeletionPolicy) {
	mg.Spec.DeletionPolicy = r
}

// SetProviderConfigReference of this S3Bucket.
func (mg *S3Bucket) SetProviderConfigReference(r *xpv1.Reference) {
	mg.Spec.ProviderConfigReference = r
}

/*
SetProviderReference of this S3Bucket.
Deprecated: Use SetProviderConfigReference.
*/
func (mg *S3Bucket) SetProviderReference(r *xpv1.Reference) {
	mg.Spec.ProviderReference = r
}

// SetWriteConnectionSecretToReference of this S3Bucket.
func (mg *S3Bucket) SetWriteConnectionSecretToReference(r *xpv1.SecretReference) {
	mg.Spec.WriteConnectionSecretToReference = r
}

// GetCondition of this S3BucketAnalyticsConfiguration.
func (mg *S3BucketAnalyticsConfiguration) GetCondition(ct xpv1.ConditionType) xpv1.Condition {
	return mg.Status.GetCondition(ct)
}

// GetDeletionPolicy of this S3BucketAnalyticsConfiguration.
func (mg *S3BucketAnalyticsConfiguration) GetDeletionPolicy() xpv1.DeletionPolicy {
	return mg.Spec.DeletionPolicy
}

// GetProviderConfigReference of this S3BucketAnalyticsConfiguration.
func (mg *S3BucketAnalyticsConfiguration) GetProviderConfigReference() *xpv1.Reference {
	return mg.Spec.ProviderConfigReference
}

/*
GetProviderReference of this S3BucketAnalyticsConfiguration.
Deprecated: Use GetProviderConfigReference.
*/
func (mg *S3BucketAnalyticsConfiguration) GetProviderReference() *xpv1.Reference {
	return mg.Spec.ProviderReference
}

// GetWriteConnectionSecretToReference of this S3BucketAnalyticsConfiguration.
func (mg *S3BucketAnalyticsConfiguration) GetWriteConnectionSecretToReference() *xpv1.SecretReference {
	return mg.Spec.WriteConnectionSecretToReference
}

// SetConditions of this S3BucketAnalyticsConfiguration.
func (mg *S3BucketAnalyticsConfiguration) SetConditions(c ...xpv1.Condition) {
	mg.Status.SetConditions(c...)
}

// SetDeletionPolicy of this S3BucketAnalyticsConfiguration.
func (mg *S3BucketAnalyticsConfiguration) SetDeletionPolicy(r xpv1.DeletionPolicy) {
	mg.Spec.DeletionPolicy = r
}

// SetProviderConfigReference of this S3BucketAnalyticsConfiguration.
func (mg *S3BucketAnalyticsConfiguration) SetProviderConfigReference(r *xpv1.Reference) {
	mg.Spec.ProviderConfigReference = r
}

/*
SetProviderReference of this S3BucketAnalyticsConfiguration.
Deprecated: Use SetProviderConfigReference.
*/
func (mg *S3BucketAnalyticsConfiguration) SetProviderReference(r *xpv1.Reference) {
	mg.Spec.ProviderReference = r
}

// SetWriteConnectionSecretToReference of this S3BucketAnalyticsConfiguration.
func (mg *S3BucketAnalyticsConfiguration) SetWriteConnectionSecretToReference(r *xpv1.SecretReference) {
	mg.Spec.WriteConnectionSecretToReference = r
}

// GetCondition of this S3BucketInventory.
func (mg *S3BucketInventory) GetCondition(ct xpv1.ConditionType) xpv1.Condition {
	return mg.Status.GetCondition(ct)
}

// GetDeletionPolicy of this S3BucketInventory.
func (mg *S3BucketInventory) GetDeletionPolicy() xpv1.DeletionPolicy {
	return mg.Spec.DeletionPolicy
}

// GetProviderConfigReference of this S3BucketInventory.
func (mg *S3BucketInventory) GetProviderConfigReference() *xpv1.Reference {
	return mg.Spec.ProviderConfigReference
}

/*
GetProviderReference of this S3BucketInventory.
Deprecated: Use GetProviderConfigReference.
*/
func (mg *S3BucketInventory) GetProviderReference() *xpv1.Reference {
	return mg.Spec.ProviderReference
}

// GetWriteConnectionSecretToReference of this S3BucketInventory.
func (mg *S3BucketInventory) GetWriteConnectionSecretToReference() *xpv1.SecretReference {
	return mg.Spec.WriteConnectionSecretToReference
}

// SetConditions of this S3BucketInventory.
func (mg *S3BucketInventory) SetConditions(c ...xpv1.Condition) {
	mg.Status.SetConditions(c...)
}

// SetDeletionPolicy of this S3BucketInventory.
func (mg *S3BucketInventory) SetDeletionPolicy(r xpv1.DeletionPolicy) {
	mg.Spec.DeletionPolicy = r
}

// SetProviderConfigReference of this S3BucketInventory.
func (mg *S3BucketInventory) SetProviderConfigReference(r *xpv1.Reference) {
	mg.Spec.ProviderConfigReference = r
}

/*
SetProviderReference of this S3BucketInventory.
Deprecated: Use SetProviderConfigReference.
*/
func (mg *S3BucketInventory) SetProviderReference(r *xpv1.Reference) {
	mg.Spec.ProviderReference = r
}

// SetWriteConnectionSecretToReference of this S3BucketInventory.
func (mg *S3BucketInventory) SetWriteConnectionSecretToReference(r *xpv1.SecretReference) {
	mg.Spec.WriteConnectionSecretToReference = r
}

// GetCondition of this S3BucketMetric.
func (mg *S3BucketMetric) GetCondition(ct xpv1.ConditionType) xpv1.Condition {
	return mg.Status.GetCondition(ct)
}

// GetDeletionPolicy of this S3BucketMetric.
func (mg *S3BucketMetric) GetDeletionPolicy() xpv1.DeletionPolicy {
	return mg.Spec.DeletionPolicy
}

// GetProviderConfigReference of this S3BucketMetric.
func (mg *S3BucketMetric) GetProviderConfigReference() *xpv1.Reference {
	return mg.Spec.ProviderConfigReference
}

/*
GetProviderReference of this S3BucketMetric.
Deprecated: Use GetProviderConfigReference.
*/
func (mg *S3BucketMetric) GetProviderReference() *xpv1.Reference {
	return mg.Spec.ProviderReference
}

// GetWriteConnectionSecretToReference of this S3BucketMetric.
func (mg *S3BucketMetric) GetWriteConnectionSecretToReference() *xpv1.SecretReference {
	return mg.Spec.WriteConnectionSecretToReference
}

// SetConditions of this S3BucketMetric.
func (mg *S3BucketMetric) SetConditions(c ...xpv1.Condition) {
	mg.Status.SetConditions(c...)
}

// SetDeletionPolicy of this S3BucketMetric.
func (mg *S3BucketMetric) SetDeletionPolicy(r xpv1.DeletionPolicy) {
	mg.Spec.DeletionPolicy = r
}

// SetProviderConfigReference of this S3BucketMetric.
func (mg *S3BucketMetric) SetProviderConfigReference(r *xpv1.Reference) {
	mg.Spec.ProviderConfigReference = r
}

/*
SetProviderReference of this S3BucketMetric.
Deprecated: Use SetProviderConfigReference.
*/
func (mg *S3BucketMetric) SetProviderReference(r *xpv1.Reference) {
	mg.Spec.ProviderReference = r
}

// SetWriteConnectionSecretToReference of this S3BucketMetric.
func (mg *S3BucketMetric) SetWriteConnectionSecretToReference(r *xpv1.SecretReference) {
	mg.Spec.WriteConnectionSecretToReference = r
}

// GetCondition of this S3BucketNotification.
func (mg *S3BucketNotification) GetCondition(ct xpv1.ConditionType) xpv1.Condition {
	return mg.Status.GetCondition(ct)
}

// GetDeletionPolicy of this S3BucketNotification.
func (mg *S3BucketNotification) GetDeletionPolicy() xpv1.DeletionPolicy {
	return mg.Spec.DeletionPolicy
}

// GetProviderConfigReference of this S3BucketNotification.
func (mg *S3BucketNotification) GetProviderConfigReference() *xpv1.Reference {
	return mg.Spec.ProviderConfigReference
}

/*
GetProviderReference of this S3BucketNotification.
Deprecated: Use GetProviderConfigReference.
*/
func (mg *S3BucketNotification) GetProviderReference() *xpv1.Reference {
	return mg.Spec.ProviderReference
}

// GetWriteConnectionSecretToReference of this S3BucketNotification.
func (mg *S3BucketNotification) GetWriteConnectionSecretToReference() *xpv1.SecretReference {
	return mg.Spec.WriteConnectionSecretToReference
}

// SetConditions of this S3BucketNotification.
func (mg *S3BucketNotification) SetConditions(c ...xpv1.Condition) {
	mg.Status.SetConditions(c...)
}

// SetDeletionPolicy of this S3BucketNotification.
func (mg *S3BucketNotification) SetDeletionPolicy(r xpv1.DeletionPolicy) {
	mg.Spec.DeletionPolicy = r
}

// SetProviderConfigReference of this S3BucketNotification.
func (mg *S3BucketNotification) SetProviderConfigReference(r *xpv1.Reference) {
	mg.Spec.ProviderConfigReference = r
}

/*
SetProviderReference of this S3BucketNotification.
Deprecated: Use SetProviderConfigReference.
*/
func (mg *S3BucketNotification) SetProviderReference(r *xpv1.Reference) {
	mg.Spec.ProviderReference = r
}

// SetWriteConnectionSecretToReference of this S3BucketNotification.
func (mg *S3BucketNotification) SetWriteConnectionSecretToReference(r *xpv1.SecretReference) {
	mg.Spec.WriteConnectionSecretToReference = r
}

// GetCondition of this S3BucketObject.
func (mg *S3BucketObject) GetCondition(ct xpv1.ConditionType) xpv1.Condition {
	return mg.Status.GetCondition(ct)
}

// GetDeletionPolicy of this S3BucketObject.
func (mg *S3BucketObject) GetDeletionPolicy() xpv1.DeletionPolicy {
	return mg.Spec.DeletionPolicy
}

// GetProviderConfigReference of this S3BucketObject.
func (mg *S3BucketObject) GetProviderConfigReference() *xpv1.Reference {
	return mg.Spec.ProviderConfigReference
}

/*
GetProviderReference of this S3BucketObject.
Deprecated: Use GetProviderConfigReference.
*/
func (mg *S3BucketObject) GetProviderReference() *xpv1.Reference {
	return mg.Spec.ProviderReference
}

// GetWriteConnectionSecretToReference of this S3BucketObject.
func (mg *S3BucketObject) GetWriteConnectionSecretToReference() *xpv1.SecretReference {
	return mg.Spec.WriteConnectionSecretToReference
}

// SetConditions of this S3BucketObject.
func (mg *S3BucketObject) SetConditions(c ...xpv1.Condition) {
	mg.Status.SetConditions(c...)
}

// SetDeletionPolicy of this S3BucketObject.
func (mg *S3BucketObject) SetDeletionPolicy(r xpv1.DeletionPolicy) {
	mg.Spec.DeletionPolicy = r
}

// SetProviderConfigReference of this S3BucketObject.
func (mg *S3BucketObject) SetProviderConfigReference(r *xpv1.Reference) {
	mg.Spec.ProviderConfigReference = r
}

/*
SetProviderReference of this S3BucketObject.
Deprecated: Use SetProviderConfigReference.
*/
func (mg *S3BucketObject) SetProviderReference(r *xpv1.Reference) {
	mg.Spec.ProviderReference = r
}

// SetWriteConnectionSecretToReference of this S3BucketObject.
func (mg *S3BucketObject) SetWriteConnectionSecretToReference(r *xpv1.SecretReference) {
	mg.Spec.WriteConnectionSecretToReference = r
}

// GetCondition of this S3BucketOwnershipControls.
func (mg *S3BucketOwnershipControls) GetCondition(ct xpv1.ConditionType) xpv1.Condition {
	return mg.Status.GetCondition(ct)
}

// GetDeletionPolicy of this S3BucketOwnershipControls.
func (mg *S3BucketOwnershipControls) GetDeletionPolicy() xpv1.DeletionPolicy {
	return mg.Spec.DeletionPolicy
}

// GetProviderConfigReference of this S3BucketOwnershipControls.
func (mg *S3BucketOwnershipControls) GetProviderConfigReference() *xpv1.Reference {
	return mg.Spec.ProviderConfigReference
}

/*
GetProviderReference of this S3BucketOwnershipControls.
Deprecated: Use GetProviderConfigReference.
*/
func (mg *S3BucketOwnershipControls) GetProviderReference() *xpv1.Reference {
	return mg.Spec.ProviderReference
}

// GetWriteConnectionSecretToReference of this S3BucketOwnershipControls.
func (mg *S3BucketOwnershipControls) GetWriteConnectionSecretToReference() *xpv1.SecretReference {
	return mg.Spec.WriteConnectionSecretToReference
}

// SetConditions of this S3BucketOwnershipControls.
func (mg *S3BucketOwnershipControls) SetConditions(c ...xpv1.Condition) {
	mg.Status.SetConditions(c...)
}

// SetDeletionPolicy of this S3BucketOwnershipControls.
func (mg *S3BucketOwnershipControls) SetDeletionPolicy(r xpv1.DeletionPolicy) {
	mg.Spec.DeletionPolicy = r
}

// SetProviderConfigReference of this S3BucketOwnershipControls.
func (mg *S3BucketOwnershipControls) SetProviderConfigReference(r *xpv1.Reference) {
	mg.Spec.ProviderConfigReference = r
}

/*
SetProviderReference of this S3BucketOwnershipControls.
Deprecated: Use SetProviderConfigReference.
*/
func (mg *S3BucketOwnershipControls) SetProviderReference(r *xpv1.Reference) {
	mg.Spec.ProviderReference = r
}

// SetWriteConnectionSecretToReference of this S3BucketOwnershipControls.
func (mg *S3BucketOwnershipControls) SetWriteConnectionSecretToReference(r *xpv1.SecretReference) {
	mg.Spec.WriteConnectionSecretToReference = r
}

// GetCondition of this S3BucketPolicy.
func (mg *S3BucketPolicy) GetCondition(ct xpv1.ConditionType) xpv1.Condition {
	return mg.Status.GetCondition(ct)
}

// GetDeletionPolicy of this S3BucketPolicy.
func (mg *S3BucketPolicy) GetDeletionPolicy() xpv1.DeletionPolicy {
	return mg.Spec.DeletionPolicy
}

// GetProviderConfigReference of this S3BucketPolicy.
func (mg *S3BucketPolicy) GetProviderConfigReference() *xpv1.Reference {
	return mg.Spec.ProviderConfigReference
}

/*
GetProviderReference of this S3BucketPolicy.
Deprecated: Use GetProviderConfigReference.
*/
func (mg *S3BucketPolicy) GetProviderReference() *xpv1.Reference {
	return mg.Spec.ProviderReference
}

// GetWriteConnectionSecretToReference of this S3BucketPolicy.
func (mg *S3BucketPolicy) GetWriteConnectionSecretToReference() *xpv1.SecretReference {
	return mg.Spec.WriteConnectionSecretToReference
}

// SetConditions of this S3BucketPolicy.
func (mg *S3BucketPolicy) SetConditions(c ...xpv1.Condition) {
	mg.Status.SetConditions(c...)
}

// SetDeletionPolicy of this S3BucketPolicy.
func (mg *S3BucketPolicy) SetDeletionPolicy(r xpv1.DeletionPolicy) {
	mg.Spec.DeletionPolicy = r
}

// SetProviderConfigReference of this S3BucketPolicy.
func (mg *S3BucketPolicy) SetProviderConfigReference(r *xpv1.Reference) {
	mg.Spec.ProviderConfigReference = r
}

/*
SetProviderReference of this S3BucketPolicy.
Deprecated: Use SetProviderConfigReference.
*/
func (mg *S3BucketPolicy) SetProviderReference(r *xpv1.Reference) {
	mg.Spec.ProviderReference = r
}

// SetWriteConnectionSecretToReference of this S3BucketPolicy.
func (mg *S3BucketPolicy) SetWriteConnectionSecretToReference(r *xpv1.SecretReference) {
	mg.Spec.WriteConnectionSecretToReference = r
}

// GetCondition of this S3BucketPublicAccessBlock.
func (mg *S3BucketPublicAccessBlock) GetCondition(ct xpv1.ConditionType) xpv1.Condition {
	return mg.Status.GetCondition(ct)
}

// GetDeletionPolicy of this S3BucketPublicAccessBlock.
func (mg *S3BucketPublicAccessBlock) GetDeletionPolicy() xpv1.DeletionPolicy {
	return mg.Spec.DeletionPolicy
}

// GetProviderConfigReference of this S3BucketPublicAccessBlock.
func (mg *S3BucketPublicAccessBlock) GetProviderConfigReference() *xpv1.Reference {
	return mg.Spec.ProviderConfigReference
}

/*
GetProviderReference of this S3BucketPublicAccessBlock.
Deprecated: Use GetProviderConfigReference.
*/
func (mg *S3BucketPublicAccessBlock) GetProviderReference() *xpv1.Reference {
	return mg.Spec.ProviderReference
}

// GetWriteConnectionSecretToReference of this S3BucketPublicAccessBlock.
func (mg *S3BucketPublicAccessBlock) GetWriteConnectionSecretToReference() *xpv1.SecretReference {
	return mg.Spec.WriteConnectionSecretToReference
}

// SetConditions of this S3BucketPublicAccessBlock.
func (mg *S3BucketPublicAccessBlock) SetConditions(c ...xpv1.Condition) {
	mg.Status.SetConditions(c...)
}

// SetDeletionPolicy of this S3BucketPublicAccessBlock.
func (mg *S3BucketPublicAccessBlock) SetDeletionPolicy(r xpv1.DeletionPolicy) {
	mg.Spec.DeletionPolicy = r
}

// SetProviderConfigReference of this S3BucketPublicAccessBlock.
func (mg *S3BucketPublicAccessBlock) SetProviderConfigReference(r *xpv1.Reference) {
	mg.Spec.ProviderConfigReference = r
}

/*
SetProviderReference of this S3BucketPublicAccessBlock.
Deprecated: Use SetProviderConfigReference.
*/
func (mg *S3BucketPublicAccessBlock) SetProviderReference(r *xpv1.Reference) {
	mg.Spec.ProviderReference = r
}

// SetWriteConnectionSecretToReference of this S3BucketPublicAccessBlock.
func (mg *S3BucketPublicAccessBlock) SetWriteConnectionSecretToReference(r *xpv1.SecretReference) {
	mg.Spec.WriteConnectionSecretToReference = r
}

// GetCondition of this S3ObjectCopy.
func (mg *S3ObjectCopy) GetCondition(ct xpv1.ConditionType) xpv1.Condition {
	return mg.Status.GetCondition(ct)
}

// GetDeletionPolicy of this S3ObjectCopy.
func (mg *S3ObjectCopy) GetDeletionPolicy() xpv1.DeletionPolicy {
	return mg.Spec.DeletionPolicy
}

// GetProviderConfigReference of this S3ObjectCopy.
func (mg *S3ObjectCopy) GetProviderConfigReference() *xpv1.Reference {
	return mg.Spec.ProviderConfigReference
}

/*
GetProviderReference of this S3ObjectCopy.
Deprecated: Use GetProviderConfigReference.
*/
func (mg *S3ObjectCopy) GetProviderReference() *xpv1.Reference {
	return mg.Spec.ProviderReference
}

// GetWriteConnectionSecretToReference of this S3ObjectCopy.
func (mg *S3ObjectCopy) GetWriteConnectionSecretToReference() *xpv1.SecretReference {
	return mg.Spec.WriteConnectionSecretToReference
}

// SetConditions of this S3ObjectCopy.
func (mg *S3ObjectCopy) SetConditions(c ...xpv1.Condition) {
	mg.Status.SetConditions(c...)
}

// SetDeletionPolicy of this S3ObjectCopy.
func (mg *S3ObjectCopy) SetDeletionPolicy(r xpv1.DeletionPolicy) {
	mg.Spec.DeletionPolicy = r
}

// SetProviderConfigReference of this S3ObjectCopy.
func (mg *S3ObjectCopy) SetProviderConfigReference(r *xpv1.Reference) {
	mg.Spec.ProviderConfigReference = r
}

/*
SetProviderReference of this S3ObjectCopy.
Deprecated: Use SetProviderConfigReference.
*/
func (mg *S3ObjectCopy) SetProviderReference(r *xpv1.Reference) {
	mg.Spec.ProviderReference = r
}

// SetWriteConnectionSecretToReference of this S3ObjectCopy.
func (mg *S3ObjectCopy) SetWriteConnectionSecretToReference(r *xpv1.SecretReference) {
	mg.Spec.WriteConnectionSecretToReference = r
}
