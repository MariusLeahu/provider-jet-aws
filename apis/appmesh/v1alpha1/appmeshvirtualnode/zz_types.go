/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

// +kubebuilder:object:generate=true
// +groupName=appmesh.aws.tf.crossplane.io
// +versionName=v1alpha1

package v1alpha1

import (
	xpv1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	apis "github.com/crossplane-contrib/provider-tf-aws/apis"
	v1alpha1 "github.com/crossplane-contrib/provider-tf-aws/apis/appmesh/v1alpha1"
)

type AccessLogFileObservation struct {
}

type AccessLogFileParameters struct {
	Path string `json:"path" tf:"path"`
}

type AccessLogObservation struct {
}

type AccessLogParameters struct {
	File []AccessLogFileParameters `json:"file,omitempty" tf:"file"`
}

type AcmObservation struct {
}

type AcmParameters struct {
	CertificateAuthorityArns []string `json:"certificateAuthorityArns" tf:"certificate_authority_arns"`
}

type AppmeshVirtualNodeObservation struct {
	Arn string `json:"arn" tf:"arn"`

	CreatedDate string `json:"createdDate" tf:"created_date"`

	LastUpdatedDate string `json:"lastUpdatedDate" tf:"last_updated_date"`

	ResourceOwner string `json:"resourceOwner" tf:"resource_owner"`
}

type AppmeshVirtualNodeParameters struct {
	MeshName string `json:"meshName" tf:"mesh_name"`

	MeshOwner *string `json:"meshOwner,omitempty" tf:"mesh_owner"`

	Name string `json:"name" tf:"name"`

	Spec []SpecParameters `json:"spec" tf:"spec"`

	Tags map[string]string `json:"tags,omitempty" tf:"tags"`

	TagsAll map[string]string `json:"tagsAll,omitempty" tf:"tags_all"`
}

type AwsCloudMapObservation struct {
}

type AwsCloudMapParameters struct {
	Attributes map[string]string `json:"attributes,omitempty" tf:"attributes"`

	NamespaceName string `json:"namespaceName" tf:"namespace_name"`

	ServiceName string `json:"serviceName" tf:"service_name"`
}

type BackendDefaultsClientPolicyObservation struct {
}

type BackendDefaultsClientPolicyParameters struct {
	Tls []ClientPolicyTlsParameters `json:"tls,omitempty" tf:"tls"`
}

type BackendDefaultsObservation struct {
}

type BackendDefaultsParameters struct {
	ClientPolicy []BackendDefaultsClientPolicyParameters `json:"clientPolicy,omitempty" tf:"client_policy"`
}

type BackendObservation struct {
}

type BackendParameters struct {
	VirtualService []VirtualServiceParameters `json:"virtualService" tf:"virtual_service"`
}

type BaseEjectionDurationObservation struct {
}

type BaseEjectionDurationParameters struct {
	Unit string `json:"unit" tf:"unit"`

	Value int64 `json:"value" tf:"value"`
}

type CertificateAcmObservation struct {
}

type CertificateAcmParameters struct {
	CertificateArn string `json:"certificateArn" tf:"certificate_arn"`
}

type CertificateFileObservation struct {
}

type CertificateFileParameters struct {
	CertificateChain string `json:"certificateChain" tf:"certificate_chain"`

	PrivateKey string `json:"privateKey" tf:"private_key"`
}

type CertificateObservation struct {
}

type CertificateParameters struct {
	File []FileParameters `json:"file,omitempty" tf:"file"`

	Sds []SdsParameters `json:"sds,omitempty" tf:"sds"`
}

type CertificateSdsObservation struct {
}

type CertificateSdsParameters struct {
	SecretName string `json:"secretName" tf:"secret_name"`
}

type ClientPolicyObservation struct {
}

type ClientPolicyParameters struct {
	Tls []TlsParameters `json:"tls,omitempty" tf:"tls"`
}

type ClientPolicyTlsObservation struct {
}

type ClientPolicyTlsParameters struct {
	Certificate []TlsCertificateParameters `json:"certificate,omitempty" tf:"certificate"`

	Enforce *bool `json:"enforce,omitempty" tf:"enforce"`

	Ports []int64 `json:"ports,omitempty" tf:"ports"`

	Validation []TlsValidationParameters `json:"validation" tf:"validation"`
}

type ConnectionPoolObservation struct {
}

type ConnectionPoolParameters struct {
	Grpc []GrpcParameters `json:"grpc,omitempty" tf:"grpc"`

	Http []HttpParameters `json:"http,omitempty" tf:"http"`

	Http2 []Http2Parameters `json:"http2,omitempty" tf:"http2"`

	Tcp []TcpParameters `json:"tcp,omitempty" tf:"tcp"`
}

type DnsObservation struct {
}

type DnsParameters struct {
	Hostname string `json:"hostname" tf:"hostname"`
}

type FileObservation struct {
}

type FileParameters struct {
	CertificateChain string `json:"certificateChain" tf:"certificate_chain"`

	PrivateKey string `json:"privateKey" tf:"private_key"`
}

type GrpcObservation struct {
}

type GrpcParameters struct {
	MaxRequests int64 `json:"maxRequests" tf:"max_requests"`
}

type HealthCheckObservation struct {
}

type HealthCheckParameters struct {
	HealthyThreshold int64 `json:"healthyThreshold" tf:"healthy_threshold"`

	IntervalMillis int64 `json:"intervalMillis" tf:"interval_millis"`

	Path *string `json:"path,omitempty" tf:"path"`

	Port *int64 `json:"port,omitempty" tf:"port"`

	Protocol string `json:"protocol" tf:"protocol"`

	TimeoutMillis int64 `json:"timeoutMillis" tf:"timeout_millis"`

	UnhealthyThreshold int64 `json:"unhealthyThreshold" tf:"unhealthy_threshold"`
}

type Http2IdleObservation struct {
}

type Http2IdleParameters struct {
	Unit string `json:"unit" tf:"unit"`

	Value int64 `json:"value" tf:"value"`
}

type Http2Observation struct {
}

type Http2Parameters struct {
	MaxRequests int64 `json:"maxRequests" tf:"max_requests"`
}

type Http2PerRequestObservation struct {
}

type Http2PerRequestParameters struct {
	Unit string `json:"unit" tf:"unit"`

	Value int64 `json:"value" tf:"value"`
}

type HttpIdleObservation struct {
}

type HttpIdleParameters struct {
	Unit string `json:"unit" tf:"unit"`

	Value int64 `json:"value" tf:"value"`
}

type HttpObservation struct {
}

type HttpParameters struct {
	MaxConnections int64 `json:"maxConnections" tf:"max_connections"`

	MaxPendingRequests *int64 `json:"maxPendingRequests,omitempty" tf:"max_pending_requests"`
}

type HttpPerRequestObservation struct {
}

type HttpPerRequestParameters struct {
	Unit string `json:"unit" tf:"unit"`

	Value int64 `json:"value" tf:"value"`
}

type IdleObservation struct {
}

type IdleParameters struct {
	Unit string `json:"unit" tf:"unit"`

	Value int64 `json:"value" tf:"value"`
}

type IntervalObservation struct {
}

type IntervalParameters struct {
	Unit string `json:"unit" tf:"unit"`

	Value int64 `json:"value" tf:"value"`
}

type ListenerObservation struct {
}

type ListenerParameters struct {
	ConnectionPool []ConnectionPoolParameters `json:"connectionPool,omitempty" tf:"connection_pool"`

	HealthCheck []HealthCheckParameters `json:"healthCheck,omitempty" tf:"health_check"`

	OutlierDetection []OutlierDetectionParameters `json:"outlierDetection,omitempty" tf:"outlier_detection"`

	PortMapping []PortMappingParameters `json:"portMapping" tf:"port_mapping"`

	Timeout []TimeoutParameters `json:"timeout,omitempty" tf:"timeout"`

	Tls []ListenerTlsParameters `json:"tls,omitempty" tf:"tls"`
}

type ListenerTlsCertificateObservation struct {
}

type ListenerTlsCertificateParameters struct {
	Acm []CertificateAcmParameters `json:"acm,omitempty" tf:"acm"`

	File []TlsCertificateFileParameters `json:"file,omitempty" tf:"file"`

	Sds []TlsCertificateSdsParameters `json:"sds,omitempty" tf:"sds"`
}

type ListenerTlsObservation struct {
}

type ListenerTlsParameters struct {
	Certificate []ListenerTlsCertificateParameters `json:"certificate" tf:"certificate"`

	Mode string `json:"mode" tf:"mode"`

	Validation []ListenerTlsValidationParameters `json:"validation,omitempty" tf:"validation"`
}

type ListenerTlsValidationObservation struct {
}

type ListenerTlsValidationParameters struct {
	SubjectAlternativeNames []TlsValidationSubjectAlternativeNamesParameters `json:"subjectAlternativeNames,omitempty" tf:"subject_alternative_names"`

	Trust []TlsValidationTrustParameters `json:"trust" tf:"trust"`
}

type LoggingObservation struct {
}

type LoggingParameters struct {
	AccessLog []AccessLogParameters `json:"accessLog,omitempty" tf:"access_log"`
}

type MatchObservation struct {
}

type MatchParameters struct {
	Exact []string `json:"exact" tf:"exact"`
}

type OutlierDetectionObservation struct {
}

type OutlierDetectionParameters struct {
	BaseEjectionDuration []BaseEjectionDurationParameters `json:"baseEjectionDuration" tf:"base_ejection_duration"`

	Interval []IntervalParameters `json:"interval" tf:"interval"`

	MaxEjectionPercent int64 `json:"maxEjectionPercent" tf:"max_ejection_percent"`

	MaxServerErrors int64 `json:"maxServerErrors" tf:"max_server_errors"`
}

type PerRequestObservation struct {
}

type PerRequestParameters struct {
	Unit string `json:"unit" tf:"unit"`

	Value int64 `json:"value" tf:"value"`
}

type PortMappingObservation struct {
}

type PortMappingParameters struct {
	Port int64 `json:"port" tf:"port"`

	Protocol string `json:"protocol" tf:"protocol"`
}

type SdsObservation struct {
}

type SdsParameters struct {
	SecretName string `json:"secretName" tf:"secret_name"`
}

type ServiceDiscoveryObservation struct {
}

type ServiceDiscoveryParameters struct {
	AwsCloudMap []AwsCloudMapParameters `json:"awsCloudMap,omitempty" tf:"aws_cloud_map"`

	Dns []DnsParameters `json:"dns,omitempty" tf:"dns"`
}

type SpecObservation struct {
}

type SpecParameters struct {
	Backend []BackendParameters `json:"backend,omitempty" tf:"backend"`

	BackendDefaults []BackendDefaultsParameters `json:"backendDefaults,omitempty" tf:"backend_defaults"`

	Listener []ListenerParameters `json:"listener,omitempty" tf:"listener"`

	Logging []LoggingParameters `json:"logging,omitempty" tf:"logging"`

	ServiceDiscovery []ServiceDiscoveryParameters `json:"serviceDiscovery,omitempty" tf:"service_discovery"`
}

type SubjectAlternativeNamesMatchObservation struct {
}

type SubjectAlternativeNamesMatchParameters struct {
	Exact []string `json:"exact" tf:"exact"`
}

type SubjectAlternativeNamesObservation struct {
}

type SubjectAlternativeNamesParameters struct {
	Match []MatchParameters `json:"match" tf:"match"`
}

type TcpIdleObservation struct {
}

type TcpIdleParameters struct {
	Unit string `json:"unit" tf:"unit"`

	Value int64 `json:"value" tf:"value"`
}

type TcpObservation struct {
}

type TcpParameters struct {
	MaxConnections int64 `json:"maxConnections" tf:"max_connections"`
}

type TimeoutGrpcObservation struct {
}

type TimeoutGrpcParameters struct {
	Idle []IdleParameters `json:"idle,omitempty" tf:"idle"`

	PerRequest []PerRequestParameters `json:"perRequest,omitempty" tf:"per_request"`
}

type TimeoutHttp2Observation struct {
}

type TimeoutHttp2Parameters struct {
	Idle []Http2IdleParameters `json:"idle,omitempty" tf:"idle"`

	PerRequest []Http2PerRequestParameters `json:"perRequest,omitempty" tf:"per_request"`
}

type TimeoutHttpObservation struct {
}

type TimeoutHttpParameters struct {
	Idle []HttpIdleParameters `json:"idle,omitempty" tf:"idle"`

	PerRequest []HttpPerRequestParameters `json:"perRequest,omitempty" tf:"per_request"`
}

type TimeoutObservation struct {
}

type TimeoutParameters struct {
	Grpc []TimeoutGrpcParameters `json:"grpc,omitempty" tf:"grpc"`

	Http []TimeoutHttpParameters `json:"http,omitempty" tf:"http"`

	Http2 []TimeoutHttp2Parameters `json:"http2,omitempty" tf:"http2"`

	Tcp []TimeoutTcpParameters `json:"tcp,omitempty" tf:"tcp"`
}

type TimeoutTcpObservation struct {
}

type TimeoutTcpParameters struct {
	Idle []TcpIdleParameters `json:"idle,omitempty" tf:"idle"`
}

type TlsCertificateFileObservation struct {
}

type TlsCertificateFileParameters struct {
	CertificateChain string `json:"certificateChain" tf:"certificate_chain"`

	PrivateKey string `json:"privateKey" tf:"private_key"`
}

type TlsCertificateObservation struct {
}

type TlsCertificateParameters struct {
	File []CertificateFileParameters `json:"file,omitempty" tf:"file"`

	Sds []CertificateSdsParameters `json:"sds,omitempty" tf:"sds"`
}

type TlsCertificateSdsObservation struct {
}

type TlsCertificateSdsParameters struct {
	SecretName string `json:"secretName" tf:"secret_name"`
}

type TlsObservation struct {
}

type TlsParameters struct {
	Certificate []CertificateParameters `json:"certificate,omitempty" tf:"certificate"`

	Enforce *bool `json:"enforce,omitempty" tf:"enforce"`

	Ports []int64 `json:"ports,omitempty" tf:"ports"`

	Validation []ValidationParameters `json:"validation" tf:"validation"`
}

type TlsValidationObservation struct {
}

type TlsValidationParameters struct {
	SubjectAlternativeNames []ValidationSubjectAlternativeNamesParameters `json:"subjectAlternativeNames,omitempty" tf:"subject_alternative_names"`

	Trust []ValidationTrustParameters `json:"trust" tf:"trust"`
}

type TlsValidationSubjectAlternativeNamesObservation struct {
}

type TlsValidationSubjectAlternativeNamesParameters struct {
	Match []ValidationSubjectAlternativeNamesMatchParameters `json:"match" tf:"match"`
}

type TlsValidationTrustFileObservation struct {
}

type TlsValidationTrustFileParameters struct {
	CertificateChain string `json:"certificateChain" tf:"certificate_chain"`
}

type TlsValidationTrustObservation struct {
}

type TlsValidationTrustParameters struct {
	File []TlsValidationTrustFileParameters `json:"file,omitempty" tf:"file"`

	Sds []TlsValidationTrustSdsParameters `json:"sds,omitempty" tf:"sds"`
}

type TlsValidationTrustSdsObservation struct {
}

type TlsValidationTrustSdsParameters struct {
	SecretName string `json:"secretName" tf:"secret_name"`
}

type TrustAcmObservation struct {
}

type TrustAcmParameters struct {
	CertificateAuthorityArns []string `json:"certificateAuthorityArns" tf:"certificate_authority_arns"`
}

type TrustFileObservation struct {
}

type TrustFileParameters struct {
	CertificateChain string `json:"certificateChain" tf:"certificate_chain"`
}

type TrustObservation struct {
}

type TrustParameters struct {
	Acm []AcmParameters `json:"acm,omitempty" tf:"acm"`

	File []TrustFileParameters `json:"file,omitempty" tf:"file"`

	Sds []TrustSdsParameters `json:"sds,omitempty" tf:"sds"`
}

type TrustSdsObservation struct {
}

type TrustSdsParameters struct {
	SecretName string `json:"secretName" tf:"secret_name"`
}

type ValidationObservation struct {
}

type ValidationParameters struct {
	SubjectAlternativeNames []SubjectAlternativeNamesParameters `json:"subjectAlternativeNames,omitempty" tf:"subject_alternative_names"`

	Trust []TrustParameters `json:"trust" tf:"trust"`
}

type ValidationSubjectAlternativeNamesMatchObservation struct {
}

type ValidationSubjectAlternativeNamesMatchParameters struct {
	Exact []string `json:"exact" tf:"exact"`
}

type ValidationSubjectAlternativeNamesObservation struct {
}

type ValidationSubjectAlternativeNamesParameters struct {
	Match []SubjectAlternativeNamesMatchParameters `json:"match" tf:"match"`
}

type ValidationTrustFileObservation struct {
}

type ValidationTrustFileParameters struct {
	CertificateChain string `json:"certificateChain" tf:"certificate_chain"`
}

type ValidationTrustObservation struct {
}

type ValidationTrustParameters struct {
	Acm []TrustAcmParameters `json:"acm,omitempty" tf:"acm"`

	File []ValidationTrustFileParameters `json:"file,omitempty" tf:"file"`

	Sds []ValidationTrustSdsParameters `json:"sds,omitempty" tf:"sds"`
}

type ValidationTrustSdsObservation struct {
}

type ValidationTrustSdsParameters struct {
	SecretName string `json:"secretName" tf:"secret_name"`
}

type VirtualServiceObservation struct {
}

type VirtualServiceParameters struct {
	ClientPolicy []ClientPolicyParameters `json:"clientPolicy,omitempty" tf:"client_policy"`

	VirtualServiceName string `json:"virtualServiceName" tf:"virtual_service_name"`
}

// AppmeshVirtualNodeSpec defines the desired state of AppmeshVirtualNode
type AppmeshVirtualNodeSpec struct {
	xpv1.ResourceSpec `json:",inline"`
	ForProvider       AppmeshVirtualNodeParameters `json:"forProvider"`
}

// AppmeshVirtualNodeStatus defines the observed state of AppmeshVirtualNode.
type AppmeshVirtualNodeStatus struct {
	xpv1.ResourceStatus `json:",inline"`
	AtProvider          AppmeshVirtualNodeObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// AppmeshVirtualNode is the Schema for the AppmeshVirtualNodes API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,aws}
type AppmeshVirtualNode struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              AppmeshVirtualNodeSpec   `json:"spec"`
	Status            AppmeshVirtualNodeStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// AppmeshVirtualNodeList contains a list of AppmeshVirtualNodes
type AppmeshVirtualNodeList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []AppmeshVirtualNode `json:"items"`
}

// Repository type metadata.
var (
	AppmeshVirtualNodeKind             = "AppmeshVirtualNode"
	AppmeshVirtualNodeGroupKind        = schema.GroupKind{Group: v1alpha1.Group, Kind: AppmeshVirtualNodeKind}.String()
	AppmeshVirtualNodeKindAPIVersion   = AppmeshVirtualNodeKind + "." + v1alpha1.GroupVersion.String()
	AppmeshVirtualNodeGroupVersionKind = v1alpha1.GroupVersion.WithKind(AppmeshVirtualNodeKind)
)

func init() {
	apis.SchemaMap[v1alpha1.GroupVersion] = append(apis.SchemaMap[v1alpha1.GroupVersion], &AppmeshVirtualNode{}, &AppmeshVirtualNodeList{})
}
