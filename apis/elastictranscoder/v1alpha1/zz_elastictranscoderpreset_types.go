/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	xpv1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"
)

type AudioCodecOptionsObservation struct {
}

type AudioCodecOptionsParameters struct {

	// +kubebuilder:validation:Optional
	BitDepth *string `json:"bitDepth,omitempty" tf:"bit_depth"`

	// +kubebuilder:validation:Optional
	BitOrder *string `json:"bitOrder,omitempty" tf:"bit_order"`

	// +kubebuilder:validation:Optional
	Profile *string `json:"profile,omitempty" tf:"profile"`

	// +kubebuilder:validation:Optional
	Signed *string `json:"signed,omitempty" tf:"signed"`
}

type AudioObservation struct {
}

type AudioParameters struct {

	// +kubebuilder:validation:Optional
	AudioPackingMode *string `json:"audioPackingMode,omitempty" tf:"audio_packing_mode"`

	// +kubebuilder:validation:Optional
	BitRate *string `json:"bitRate,omitempty" tf:"bit_rate"`

	// +kubebuilder:validation:Optional
	Channels *string `json:"channels,omitempty" tf:"channels"`

	// +kubebuilder:validation:Optional
	Codec *string `json:"codec,omitempty" tf:"codec"`

	// +kubebuilder:validation:Optional
	SampleRate *string `json:"sampleRate,omitempty" tf:"sample_rate"`
}

type ElastictranscoderPresetObservation struct {
	Arn string `json:"arn" tf:"arn"`
}

type ElastictranscoderPresetParameters struct {

	// +kubebuilder:validation:Optional
	Audio []AudioParameters `json:"audio,omitempty" tf:"audio"`

	// +kubebuilder:validation:Optional
	AudioCodecOptions []AudioCodecOptionsParameters `json:"audioCodecOptions,omitempty" tf:"audio_codec_options"`

	// +kubebuilder:validation:Required
	Container string `json:"container" tf:"container"`

	// +kubebuilder:validation:Optional
	Description *string `json:"description,omitempty" tf:"description"`

	// +kubebuilder:validation:Optional
	Name *string `json:"name,omitempty" tf:"name"`

	// Region is the region you'd like your resource to be created in.
	// +terrajet:crd:field:TFTag=-
	// +kubebuilder:validation:Required
	Region string `json:"region" tf:"-"`

	// +kubebuilder:validation:Optional
	Thumbnails []ThumbnailsParameters `json:"thumbnails,omitempty" tf:"thumbnails"`

	// +kubebuilder:validation:Optional
	Type *string `json:"type,omitempty" tf:"type"`

	// +kubebuilder:validation:Optional
	Video []VideoParameters `json:"video,omitempty" tf:"video"`

	// +kubebuilder:validation:Optional
	VideoCodecOptions map[string]string `json:"videoCodecOptions,omitempty" tf:"video_codec_options"`

	// +kubebuilder:validation:Optional
	VideoWatermarks []VideoWatermarksParameters `json:"videoWatermarks,omitempty" tf:"video_watermarks"`
}

type ThumbnailsObservation struct {
}

type ThumbnailsParameters struct {

	// +kubebuilder:validation:Optional
	AspectRatio *string `json:"aspectRatio,omitempty" tf:"aspect_ratio"`

	// +kubebuilder:validation:Optional
	Format *string `json:"format,omitempty" tf:"format"`

	// +kubebuilder:validation:Optional
	Interval *string `json:"interval,omitempty" tf:"interval"`

	// +kubebuilder:validation:Optional
	MaxHeight *string `json:"maxHeight,omitempty" tf:"max_height"`

	// +kubebuilder:validation:Optional
	MaxWidth *string `json:"maxWidth,omitempty" tf:"max_width"`

	// +kubebuilder:validation:Optional
	PaddingPolicy *string `json:"paddingPolicy,omitempty" tf:"padding_policy"`

	// +kubebuilder:validation:Optional
	Resolution *string `json:"resolution,omitempty" tf:"resolution"`

	// +kubebuilder:validation:Optional
	SizingPolicy *string `json:"sizingPolicy,omitempty" tf:"sizing_policy"`
}

type VideoObservation struct {
}

type VideoParameters struct {

	// +kubebuilder:validation:Optional
	AspectRatio *string `json:"aspectRatio,omitempty" tf:"aspect_ratio"`

	// +kubebuilder:validation:Optional
	BitRate *string `json:"bitRate,omitempty" tf:"bit_rate"`

	// +kubebuilder:validation:Optional
	Codec *string `json:"codec,omitempty" tf:"codec"`

	// +kubebuilder:validation:Optional
	DisplayAspectRatio *string `json:"displayAspectRatio,omitempty" tf:"display_aspect_ratio"`

	// +kubebuilder:validation:Optional
	FixedGop *string `json:"fixedGop,omitempty" tf:"fixed_gop"`

	// +kubebuilder:validation:Optional
	FrameRate *string `json:"frameRate,omitempty" tf:"frame_rate"`

	// +kubebuilder:validation:Optional
	KeyframesMaxDist *string `json:"keyframesMaxDist,omitempty" tf:"keyframes_max_dist"`

	// +kubebuilder:validation:Optional
	MaxFrameRate *string `json:"maxFrameRate,omitempty" tf:"max_frame_rate"`

	// +kubebuilder:validation:Optional
	MaxHeight *string `json:"maxHeight,omitempty" tf:"max_height"`

	// +kubebuilder:validation:Optional
	MaxWidth *string `json:"maxWidth,omitempty" tf:"max_width"`

	// +kubebuilder:validation:Optional
	PaddingPolicy *string `json:"paddingPolicy,omitempty" tf:"padding_policy"`

	// +kubebuilder:validation:Optional
	Resolution *string `json:"resolution,omitempty" tf:"resolution"`

	// +kubebuilder:validation:Optional
	SizingPolicy *string `json:"sizingPolicy,omitempty" tf:"sizing_policy"`
}

type VideoWatermarksObservation struct {
}

type VideoWatermarksParameters struct {

	// +kubebuilder:validation:Optional
	HorizontalAlign *string `json:"horizontalAlign,omitempty" tf:"horizontal_align"`

	// +kubebuilder:validation:Optional
	HorizontalOffset *string `json:"horizontalOffset,omitempty" tf:"horizontal_offset"`

	// +kubebuilder:validation:Optional
	ID *string `json:"id,omitempty" tf:"id"`

	// +kubebuilder:validation:Optional
	MaxHeight *string `json:"maxHeight,omitempty" tf:"max_height"`

	// +kubebuilder:validation:Optional
	MaxWidth *string `json:"maxWidth,omitempty" tf:"max_width"`

	// +kubebuilder:validation:Optional
	Opacity *string `json:"opacity,omitempty" tf:"opacity"`

	// +kubebuilder:validation:Optional
	SizingPolicy *string `json:"sizingPolicy,omitempty" tf:"sizing_policy"`

	// +kubebuilder:validation:Optional
	Target *string `json:"target,omitempty" tf:"target"`

	// +kubebuilder:validation:Optional
	VerticalAlign *string `json:"verticalAlign,omitempty" tf:"vertical_align"`

	// +kubebuilder:validation:Optional
	VerticalOffset *string `json:"verticalOffset,omitempty" tf:"vertical_offset"`
}

// ElastictranscoderPresetSpec defines the desired state of ElastictranscoderPreset
type ElastictranscoderPresetSpec struct {
	xpv1.ResourceSpec `json:",inline"`
	ForProvider       ElastictranscoderPresetParameters `json:"forProvider"`
}

// ElastictranscoderPresetStatus defines the observed state of ElastictranscoderPreset.
type ElastictranscoderPresetStatus struct {
	xpv1.ResourceStatus `json:",inline"`
	AtProvider          ElastictranscoderPresetObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// ElastictranscoderPreset is the Schema for the ElastictranscoderPresets API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,tfaws}
type ElastictranscoderPreset struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              ElastictranscoderPresetSpec   `json:"spec"`
	Status            ElastictranscoderPresetStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// ElastictranscoderPresetList contains a list of ElastictranscoderPresets
type ElastictranscoderPresetList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []ElastictranscoderPreset `json:"items"`
}

// Repository type metadata.
var (
	ElastictranscoderPresetKind             = "ElastictranscoderPreset"
	ElastictranscoderPresetGroupKind        = schema.GroupKind{Group: Group, Kind: ElastictranscoderPresetKind}.String()
	ElastictranscoderPresetKindAPIVersion   = ElastictranscoderPresetKind + "." + GroupVersion.String()
	ElastictranscoderPresetGroupVersionKind = GroupVersion.WithKind(ElastictranscoderPresetKind)
)

func init() {
	SchemeBuilder.Register(&ElastictranscoderPreset{}, &ElastictranscoderPresetList{})
}
