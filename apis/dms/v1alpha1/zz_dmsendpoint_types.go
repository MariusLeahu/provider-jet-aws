/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	xpv1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"
)

type DmsEndpointObservation struct {
	EndpointArn string `json:"endpointArn" tf:"endpoint_arn"`
}

type DmsEndpointParameters struct {

	// +kubebuilder:validation:Optional
	CertificateArn *string `json:"certificateArn,omitempty" tf:"certificate_arn"`

	// +kubebuilder:validation:Optional
	DatabaseName *string `json:"databaseName,omitempty" tf:"database_name"`

	// +kubebuilder:validation:Optional
	ElasticsearchSettings []ElasticsearchSettingsParameters `json:"elasticsearchSettings,omitempty" tf:"elasticsearch_settings"`

	// +kubebuilder:validation:Required
	EndpointID string `json:"endpointId" tf:"endpoint_id"`

	// +kubebuilder:validation:Required
	EndpointType string `json:"endpointType" tf:"endpoint_type"`

	// +kubebuilder:validation:Required
	EngineName string `json:"engineName" tf:"engine_name"`

	// +kubebuilder:validation:Optional
	ExtraConnectionAttributes *string `json:"extraConnectionAttributes,omitempty" tf:"extra_connection_attributes"`

	// +kubebuilder:validation:Optional
	KafkaSettings []KafkaSettingsParameters `json:"kafkaSettings,omitempty" tf:"kafka_settings"`

	// +kubebuilder:validation:Optional
	KinesisSettings []KinesisSettingsParameters `json:"kinesisSettings,omitempty" tf:"kinesis_settings"`

	// +kubebuilder:validation:Optional
	KmsKeyArn *string `json:"kmsKeyArn,omitempty" tf:"kms_key_arn"`

	// +kubebuilder:validation:Optional
	MongodbSettings []MongodbSettingsParameters `json:"mongodbSettings,omitempty" tf:"mongodb_settings"`

	// +kubebuilder:validation:Optional
	Password *string `json:"password,omitempty" tf:"password"`

	// +kubebuilder:validation:Optional
	Port *int64 `json:"port,omitempty" tf:"port"`

	// Region is the region you'd like your resource to be created in.
	// +terrajet:crd:field:TFTag=-
	// +kubebuilder:validation:Required
	Region string `json:"region" tf:"-"`

	// +kubebuilder:validation:Optional
	S3Settings []S3SettingsParameters `json:"s3Settings,omitempty" tf:"s3_settings"`

	// +kubebuilder:validation:Optional
	ServerName *string `json:"serverName,omitempty" tf:"server_name"`

	// +kubebuilder:validation:Optional
	ServiceAccessRole *string `json:"serviceAccessRole,omitempty" tf:"service_access_role"`

	// +kubebuilder:validation:Optional
	SslMode *string `json:"sslMode,omitempty" tf:"ssl_mode"`

	// +kubebuilder:validation:Optional
	Tags map[string]string `json:"tags,omitempty" tf:"tags"`

	// +kubebuilder:validation:Optional
	TagsAll map[string]string `json:"tagsAll,omitempty" tf:"tags_all"`

	// +kubebuilder:validation:Optional
	Username *string `json:"username,omitempty" tf:"username"`
}

type ElasticsearchSettingsObservation struct {
}

type ElasticsearchSettingsParameters struct {

	// +kubebuilder:validation:Required
	EndpointURI string `json:"endpointUri" tf:"endpoint_uri"`

	// +kubebuilder:validation:Optional
	ErrorRetryDuration *int64 `json:"errorRetryDuration,omitempty" tf:"error_retry_duration"`

	// +kubebuilder:validation:Optional
	FullLoadErrorPercentage *int64 `json:"fullLoadErrorPercentage,omitempty" tf:"full_load_error_percentage"`

	// +kubebuilder:validation:Required
	ServiceAccessRoleArn string `json:"serviceAccessRoleArn" tf:"service_access_role_arn"`
}

type KafkaSettingsObservation struct {
}

type KafkaSettingsParameters struct {

	// +kubebuilder:validation:Required
	Broker string `json:"broker" tf:"broker"`

	// +kubebuilder:validation:Optional
	Topic *string `json:"topic,omitempty" tf:"topic"`
}

type KinesisSettingsObservation struct {
}

type KinesisSettingsParameters struct {

	// +kubebuilder:validation:Optional
	MessageFormat *string `json:"messageFormat,omitempty" tf:"message_format"`

	// +kubebuilder:validation:Optional
	ServiceAccessRoleArn *string `json:"serviceAccessRoleArn,omitempty" tf:"service_access_role_arn"`

	// +kubebuilder:validation:Optional
	StreamArn *string `json:"streamArn,omitempty" tf:"stream_arn"`
}

type MongodbSettingsObservation struct {
}

type MongodbSettingsParameters struct {

	// +kubebuilder:validation:Optional
	AuthMechanism *string `json:"authMechanism,omitempty" tf:"auth_mechanism"`

	// +kubebuilder:validation:Optional
	AuthSource *string `json:"authSource,omitempty" tf:"auth_source"`

	// +kubebuilder:validation:Optional
	AuthType *string `json:"authType,omitempty" tf:"auth_type"`

	// +kubebuilder:validation:Optional
	DocsToInvestigate *string `json:"docsToInvestigate,omitempty" tf:"docs_to_investigate"`

	// +kubebuilder:validation:Optional
	ExtractDocID *string `json:"extractDocId,omitempty" tf:"extract_doc_id"`

	// +kubebuilder:validation:Optional
	NestingLevel *string `json:"nestingLevel,omitempty" tf:"nesting_level"`
}

type S3SettingsObservation struct {
}

type S3SettingsParameters struct {

	// +kubebuilder:validation:Optional
	BucketFolder *string `json:"bucketFolder,omitempty" tf:"bucket_folder"`

	// +kubebuilder:validation:Optional
	BucketName *string `json:"bucketName,omitempty" tf:"bucket_name"`

	// +kubebuilder:validation:Optional
	CompressionType *string `json:"compressionType,omitempty" tf:"compression_type"`

	// +kubebuilder:validation:Optional
	CsvDelimiter *string `json:"csvDelimiter,omitempty" tf:"csv_delimiter"`

	// +kubebuilder:validation:Optional
	CsvRowDelimiter *string `json:"csvRowDelimiter,omitempty" tf:"csv_row_delimiter"`

	// +kubebuilder:validation:Optional
	DatePartitionEnabled *bool `json:"datePartitionEnabled,omitempty" tf:"date_partition_enabled"`

	// +kubebuilder:validation:Optional
	ExternalTableDefinition *string `json:"externalTableDefinition,omitempty" tf:"external_table_definition"`

	// +kubebuilder:validation:Optional
	ServiceAccessRoleArn *string `json:"serviceAccessRoleArn,omitempty" tf:"service_access_role_arn"`
}

// DmsEndpointSpec defines the desired state of DmsEndpoint
type DmsEndpointSpec struct {
	xpv1.ResourceSpec `json:",inline"`
	ForProvider       DmsEndpointParameters `json:"forProvider"`
}

// DmsEndpointStatus defines the observed state of DmsEndpoint.
type DmsEndpointStatus struct {
	xpv1.ResourceStatus `json:",inline"`
	AtProvider          DmsEndpointObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// DmsEndpoint is the Schema for the DmsEndpoints API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,tfaws}
type DmsEndpoint struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              DmsEndpointSpec   `json:"spec"`
	Status            DmsEndpointStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// DmsEndpointList contains a list of DmsEndpoints
type DmsEndpointList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []DmsEndpoint `json:"items"`
}

// Repository type metadata.
var (
	DmsEndpointKind             = "DmsEndpoint"
	DmsEndpointGroupKind        = schema.GroupKind{Group: Group, Kind: DmsEndpointKind}.String()
	DmsEndpointKindAPIVersion   = DmsEndpointKind + "." + GroupVersion.String()
	DmsEndpointGroupVersionKind = GroupVersion.WithKind(DmsEndpointKind)
)

func init() {
	SchemeBuilder.Register(&DmsEndpoint{}, &DmsEndpointList{})
}
