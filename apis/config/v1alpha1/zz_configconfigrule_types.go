/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	xpv1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"
)

type ConfigConfigRuleObservation struct {
	Arn string `json:"arn" tf:"arn"`

	RuleID string `json:"ruleId" tf:"rule_id"`
}

type ConfigConfigRuleParameters struct {

	// +kubebuilder:validation:Optional
	Description *string `json:"description,omitempty" tf:"description"`

	// +kubebuilder:validation:Optional
	InputParameters *string `json:"inputParameters,omitempty" tf:"input_parameters"`

	// +kubebuilder:validation:Optional
	MaximumExecutionFrequency *string `json:"maximumExecutionFrequency,omitempty" tf:"maximum_execution_frequency"`

	// +kubebuilder:validation:Required
	Name string `json:"name" tf:"name"`

	// Region is the region you'd like your resource to be created in.
	// +terrajet:crd:field:TFTag=-
	// +kubebuilder:validation:Required
	Region string `json:"region" tf:"-"`

	// +kubebuilder:validation:Optional
	Scope []ScopeParameters `json:"scope,omitempty" tf:"scope"`

	// +kubebuilder:validation:Required
	Source []SourceParameters `json:"source" tf:"source"`

	// +kubebuilder:validation:Optional
	Tags map[string]string `json:"tags,omitempty" tf:"tags"`

	// +kubebuilder:validation:Optional
	TagsAll map[string]string `json:"tagsAll,omitempty" tf:"tags_all"`
}

type ScopeObservation struct {
}

type ScopeParameters struct {

	// +kubebuilder:validation:Optional
	ComplianceResourceID *string `json:"complianceResourceId,omitempty" tf:"compliance_resource_id"`

	// +kubebuilder:validation:Optional
	ComplianceResourceTypes []string `json:"complianceResourceTypes,omitempty" tf:"compliance_resource_types"`

	// +kubebuilder:validation:Optional
	TagKey *string `json:"tagKey,omitempty" tf:"tag_key"`

	// +kubebuilder:validation:Optional
	TagValue *string `json:"tagValue,omitempty" tf:"tag_value"`
}

type SourceDetailObservation struct {
}

type SourceDetailParameters struct {

	// +kubebuilder:validation:Optional
	EventSource *string `json:"eventSource,omitempty" tf:"event_source"`

	// +kubebuilder:validation:Optional
	MaximumExecutionFrequency *string `json:"maximumExecutionFrequency,omitempty" tf:"maximum_execution_frequency"`

	// +kubebuilder:validation:Optional
	MessageType *string `json:"messageType,omitempty" tf:"message_type"`
}

type SourceObservation struct {
}

type SourceParameters struct {

	// +kubebuilder:validation:Required
	Owner string `json:"owner" tf:"owner"`

	// +kubebuilder:validation:Optional
	SourceDetail []SourceDetailParameters `json:"sourceDetail,omitempty" tf:"source_detail"`

	// +kubebuilder:validation:Required
	SourceIdentifier string `json:"sourceIdentifier" tf:"source_identifier"`
}

// ConfigConfigRuleSpec defines the desired state of ConfigConfigRule
type ConfigConfigRuleSpec struct {
	xpv1.ResourceSpec `json:",inline"`
	ForProvider       ConfigConfigRuleParameters `json:"forProvider"`
}

// ConfigConfigRuleStatus defines the observed state of ConfigConfigRule.
type ConfigConfigRuleStatus struct {
	xpv1.ResourceStatus `json:",inline"`
	AtProvider          ConfigConfigRuleObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// ConfigConfigRule is the Schema for the ConfigConfigRules API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,tfaws}
type ConfigConfigRule struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              ConfigConfigRuleSpec   `json:"spec"`
	Status            ConfigConfigRuleStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// ConfigConfigRuleList contains a list of ConfigConfigRules
type ConfigConfigRuleList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []ConfigConfigRule `json:"items"`
}

// Repository type metadata.
var (
	ConfigConfigRuleKind             = "ConfigConfigRule"
	ConfigConfigRuleGroupKind        = schema.GroupKind{Group: Group, Kind: ConfigConfigRuleKind}.String()
	ConfigConfigRuleKindAPIVersion   = ConfigConfigRuleKind + "." + GroupVersion.String()
	ConfigConfigRuleGroupVersionKind = GroupVersion.WithKind(ConfigConfigRuleKind)
)

func init() {
	SchemeBuilder.Register(&ConfigConfigRule{}, &ConfigConfigRuleList{})
}
