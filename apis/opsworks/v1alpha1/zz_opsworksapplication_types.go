/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	xpv1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"
)

type AppSourceObservation struct {
}

type AppSourceParameters struct {

	// +kubebuilder:validation:Optional
	Password *string `json:"password,omitempty" tf:"password"`

	// +kubebuilder:validation:Optional
	Revision *string `json:"revision,omitempty" tf:"revision"`

	// +kubebuilder:validation:Optional
	SSHKey *string `json:"sshKey,omitempty" tf:"ssh_key"`

	// +kubebuilder:validation:Required
	Type string `json:"type" tf:"type"`

	// +kubebuilder:validation:Optional
	URL *string `json:"url,omitempty" tf:"url"`

	// +kubebuilder:validation:Optional
	Username *string `json:"username,omitempty" tf:"username"`
}

type EnvironmentObservation struct {
}

type EnvironmentParameters struct {

	// +kubebuilder:validation:Required
	Key string `json:"key" tf:"key"`

	// +kubebuilder:validation:Optional
	Secure *bool `json:"secure,omitempty" tf:"secure"`

	// +kubebuilder:validation:Required
	Value string `json:"value" tf:"value"`
}

type OpsworksApplicationObservation struct {
}

type OpsworksApplicationParameters struct {

	// +kubebuilder:validation:Optional
	AppSource []AppSourceParameters `json:"appSource,omitempty" tf:"app_source"`

	// +kubebuilder:validation:Optional
	AutoBundleOnDeploy *string `json:"autoBundleOnDeploy,omitempty" tf:"auto_bundle_on_deploy"`

	// +kubebuilder:validation:Optional
	AwsFlowRubySettings *string `json:"awsFlowRubySettings,omitempty" tf:"aws_flow_ruby_settings"`

	// +kubebuilder:validation:Optional
	DataSourceArn *string `json:"dataSourceArn,omitempty" tf:"data_source_arn"`

	// +kubebuilder:validation:Optional
	DataSourceDatabaseName *string `json:"dataSourceDatabaseName,omitempty" tf:"data_source_database_name"`

	// +kubebuilder:validation:Optional
	DataSourceType *string `json:"dataSourceType,omitempty" tf:"data_source_type"`

	// +kubebuilder:validation:Optional
	Description *string `json:"description,omitempty" tf:"description"`

	// +kubebuilder:validation:Optional
	DocumentRoot *string `json:"documentRoot,omitempty" tf:"document_root"`

	// +kubebuilder:validation:Optional
	Domains []string `json:"domains,omitempty" tf:"domains"`

	// +kubebuilder:validation:Optional
	EnableSsl *bool `json:"enableSsl,omitempty" tf:"enable_ssl"`

	// +kubebuilder:validation:Optional
	Environment []EnvironmentParameters `json:"environment,omitempty" tf:"environment"`

	// +kubebuilder:validation:Required
	Name string `json:"name" tf:"name"`

	// +kubebuilder:validation:Optional
	RailsEnv *string `json:"railsEnv,omitempty" tf:"rails_env"`

	// Region is the region you'd like your resource to be created in.
	// +terrajet:crd:field:TFTag=-
	// +kubebuilder:validation:Required
	Region string `json:"region" tf:"-"`

	// +kubebuilder:validation:Optional
	ShortName *string `json:"shortName,omitempty" tf:"short_name"`

	// +kubebuilder:validation:Optional
	SslConfiguration []SslConfigurationParameters `json:"sslConfiguration,omitempty" tf:"ssl_configuration"`

	// +kubebuilder:validation:Required
	StackID string `json:"stackId" tf:"stack_id"`

	// +kubebuilder:validation:Required
	Type string `json:"type" tf:"type"`
}

type SslConfigurationObservation struct {
}

type SslConfigurationParameters struct {

	// +kubebuilder:validation:Required
	Certificate string `json:"certificate" tf:"certificate"`

	// +kubebuilder:validation:Optional
	Chain *string `json:"chain,omitempty" tf:"chain"`

	// +kubebuilder:validation:Required
	PrivateKey string `json:"privateKey" tf:"private_key"`
}

// OpsworksApplicationSpec defines the desired state of OpsworksApplication
type OpsworksApplicationSpec struct {
	xpv1.ResourceSpec `json:",inline"`
	ForProvider       OpsworksApplicationParameters `json:"forProvider"`
}

// OpsworksApplicationStatus defines the observed state of OpsworksApplication.
type OpsworksApplicationStatus struct {
	xpv1.ResourceStatus `json:",inline"`
	AtProvider          OpsworksApplicationObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// OpsworksApplication is the Schema for the OpsworksApplications API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,tfaws}
type OpsworksApplication struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              OpsworksApplicationSpec   `json:"spec"`
	Status            OpsworksApplicationStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// OpsworksApplicationList contains a list of OpsworksApplications
type OpsworksApplicationList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []OpsworksApplication `json:"items"`
}

// Repository type metadata.
var (
	OpsworksApplicationKind             = "OpsworksApplication"
	OpsworksApplicationGroupKind        = schema.GroupKind{Group: Group, Kind: OpsworksApplicationKind}.String()
	OpsworksApplicationKindAPIVersion   = OpsworksApplicationKind + "." + GroupVersion.String()
	OpsworksApplicationGroupVersionKind = GroupVersion.WithKind(OpsworksApplicationKind)
)

func init() {
	SchemeBuilder.Register(&OpsworksApplication{}, &OpsworksApplicationList{})
}
