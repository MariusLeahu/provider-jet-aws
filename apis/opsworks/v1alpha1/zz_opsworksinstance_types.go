/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	xpv1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"
)

type EbsBlockDeviceObservation struct {
}

type EbsBlockDeviceParameters struct {

	// +kubebuilder:validation:Optional
	DeleteOnTermination *bool `json:"deleteOnTermination,omitempty" tf:"delete_on_termination"`

	// +kubebuilder:validation:Required
	DeviceName string `json:"deviceName" tf:"device_name"`

	// +kubebuilder:validation:Optional
	Iops *int64 `json:"iops,omitempty" tf:"iops"`

	// +kubebuilder:validation:Optional
	SnapshotID *string `json:"snapshotId,omitempty" tf:"snapshot_id"`

	// +kubebuilder:validation:Optional
	VolumeSize *int64 `json:"volumeSize,omitempty" tf:"volume_size"`

	// +kubebuilder:validation:Optional
	VolumeType *string `json:"volumeType,omitempty" tf:"volume_type"`
}

type EphemeralBlockDeviceObservation struct {
}

type EphemeralBlockDeviceParameters struct {

	// +kubebuilder:validation:Required
	DeviceName string `json:"deviceName" tf:"device_name"`

	// +kubebuilder:validation:Required
	VirtualName string `json:"virtualName" tf:"virtual_name"`
}

type OpsworksInstanceObservation struct {
	Ec2InstanceID string `json:"ec2InstanceId" tf:"ec2_instance_id"`
}

type OpsworksInstanceParameters struct {

	// +kubebuilder:validation:Optional
	AgentVersion *string `json:"agentVersion,omitempty" tf:"agent_version"`

	// +kubebuilder:validation:Optional
	AmiID *string `json:"amiId,omitempty" tf:"ami_id"`

	// +kubebuilder:validation:Optional
	Architecture *string `json:"architecture,omitempty" tf:"architecture"`

	// +kubebuilder:validation:Optional
	AutoScalingType *string `json:"autoScalingType,omitempty" tf:"auto_scaling_type"`

	// +kubebuilder:validation:Optional
	AvailabilityZone *string `json:"availabilityZone,omitempty" tf:"availability_zone"`

	// +kubebuilder:validation:Optional
	CreatedAt *string `json:"createdAt,omitempty" tf:"created_at"`

	// +kubebuilder:validation:Optional
	DeleteEbs *bool `json:"deleteEbs,omitempty" tf:"delete_ebs"`

	// +kubebuilder:validation:Optional
	DeleteEip *bool `json:"deleteEip,omitempty" tf:"delete_eip"`

	// +kubebuilder:validation:Optional
	EbsBlockDevice []EbsBlockDeviceParameters `json:"ebsBlockDevice,omitempty" tf:"ebs_block_device"`

	// +kubebuilder:validation:Optional
	EbsOptimized *bool `json:"ebsOptimized,omitempty" tf:"ebs_optimized"`

	// +kubebuilder:validation:Optional
	EcsClusterArn *string `json:"ecsClusterArn,omitempty" tf:"ecs_cluster_arn"`

	// +kubebuilder:validation:Optional
	ElasticIP *string `json:"elasticIp,omitempty" tf:"elastic_ip"`

	// +kubebuilder:validation:Optional
	EphemeralBlockDevice []EphemeralBlockDeviceParameters `json:"ephemeralBlockDevice,omitempty" tf:"ephemeral_block_device"`

	// +kubebuilder:validation:Optional
	Hostname *string `json:"hostname,omitempty" tf:"hostname"`

	// +kubebuilder:validation:Optional
	InfrastructureClass *string `json:"infrastructureClass,omitempty" tf:"infrastructure_class"`

	// +kubebuilder:validation:Optional
	InstallUpdatesOnBoot *bool `json:"installUpdatesOnBoot,omitempty" tf:"install_updates_on_boot"`

	// +kubebuilder:validation:Optional
	InstanceProfileArn *string `json:"instanceProfileArn,omitempty" tf:"instance_profile_arn"`

	// +kubebuilder:validation:Optional
	InstanceType *string `json:"instanceType,omitempty" tf:"instance_type"`

	// +kubebuilder:validation:Optional
	LastServiceErrorID *string `json:"lastServiceErrorId,omitempty" tf:"last_service_error_id"`

	// +kubebuilder:validation:Required
	LayerIds []string `json:"layerIds" tf:"layer_ids"`

	// +kubebuilder:validation:Optional
	Os *string `json:"os,omitempty" tf:"os"`

	// +kubebuilder:validation:Optional
	Platform *string `json:"platform,omitempty" tf:"platform"`

	// +kubebuilder:validation:Optional
	PrivateDNS *string `json:"privateDns,omitempty" tf:"private_dns"`

	// +kubebuilder:validation:Optional
	PrivateIP *string `json:"privateIp,omitempty" tf:"private_ip"`

	// +kubebuilder:validation:Optional
	PublicDNS *string `json:"publicDns,omitempty" tf:"public_dns"`

	// +kubebuilder:validation:Optional
	PublicIP *string `json:"publicIp,omitempty" tf:"public_ip"`

	// Region is the region you'd like your resource to be created in.
	// +terrajet:crd:field:TFTag=-
	// +kubebuilder:validation:Required
	Region string `json:"region" tf:"-"`

	// +kubebuilder:validation:Optional
	RegisteredBy *string `json:"registeredBy,omitempty" tf:"registered_by"`

	// +kubebuilder:validation:Optional
	ReportedAgentVersion *string `json:"reportedAgentVersion,omitempty" tf:"reported_agent_version"`

	// +kubebuilder:validation:Optional
	ReportedOsFamily *string `json:"reportedOsFamily,omitempty" tf:"reported_os_family"`

	// +kubebuilder:validation:Optional
	ReportedOsName *string `json:"reportedOsName,omitempty" tf:"reported_os_name"`

	// +kubebuilder:validation:Optional
	ReportedOsVersion *string `json:"reportedOsVersion,omitempty" tf:"reported_os_version"`

	// +kubebuilder:validation:Optional
	RootBlockDevice []RootBlockDeviceParameters `json:"rootBlockDevice,omitempty" tf:"root_block_device"`

	// +kubebuilder:validation:Optional
	RootDeviceType *string `json:"rootDeviceType,omitempty" tf:"root_device_type"`

	// +kubebuilder:validation:Optional
	RootDeviceVolumeID *string `json:"rootDeviceVolumeId,omitempty" tf:"root_device_volume_id"`

	// +kubebuilder:validation:Optional
	SSHHostDsaKeyFingerprint *string `json:"sshHostDsaKeyFingerprint,omitempty" tf:"ssh_host_dsa_key_fingerprint"`

	// +kubebuilder:validation:Optional
	SSHHostRsaKeyFingerprint *string `json:"sshHostRsaKeyFingerprint,omitempty" tf:"ssh_host_rsa_key_fingerprint"`

	// +kubebuilder:validation:Optional
	SSHKeyName *string `json:"sshKeyName,omitempty" tf:"ssh_key_name"`

	// +kubebuilder:validation:Optional
	SecurityGroupIds []string `json:"securityGroupIds,omitempty" tf:"security_group_ids"`

	// +kubebuilder:validation:Required
	StackID string `json:"stackId" tf:"stack_id"`

	// +kubebuilder:validation:Optional
	State *string `json:"state,omitempty" tf:"state"`

	// +kubebuilder:validation:Optional
	Status *string `json:"status,omitempty" tf:"status"`

	// +kubebuilder:validation:Optional
	SubnetID *string `json:"subnetId,omitempty" tf:"subnet_id"`

	// +kubebuilder:validation:Optional
	Tenancy *string `json:"tenancy,omitempty" tf:"tenancy"`

	// +kubebuilder:validation:Optional
	VirtualizationType *string `json:"virtualizationType,omitempty" tf:"virtualization_type"`
}

type RootBlockDeviceObservation struct {
}

type RootBlockDeviceParameters struct {

	// +kubebuilder:validation:Optional
	DeleteOnTermination *bool `json:"deleteOnTermination,omitempty" tf:"delete_on_termination"`

	// +kubebuilder:validation:Optional
	Iops *int64 `json:"iops,omitempty" tf:"iops"`

	// +kubebuilder:validation:Optional
	VolumeSize *int64 `json:"volumeSize,omitempty" tf:"volume_size"`

	// +kubebuilder:validation:Optional
	VolumeType *string `json:"volumeType,omitempty" tf:"volume_type"`
}

// OpsworksInstanceSpec defines the desired state of OpsworksInstance
type OpsworksInstanceSpec struct {
	xpv1.ResourceSpec `json:",inline"`
	ForProvider       OpsworksInstanceParameters `json:"forProvider"`
}

// OpsworksInstanceStatus defines the observed state of OpsworksInstance.
type OpsworksInstanceStatus struct {
	xpv1.ResourceStatus `json:",inline"`
	AtProvider          OpsworksInstanceObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// OpsworksInstance is the Schema for the OpsworksInstances API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,tfaws}
type OpsworksInstance struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              OpsworksInstanceSpec   `json:"spec"`
	Status            OpsworksInstanceStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// OpsworksInstanceList contains a list of OpsworksInstances
type OpsworksInstanceList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []OpsworksInstance `json:"items"`
}

// Repository type metadata.
var (
	OpsworksInstanceKind             = "OpsworksInstance"
	OpsworksInstanceGroupKind        = schema.GroupKind{Group: Group, Kind: OpsworksInstanceKind}.String()
	OpsworksInstanceKindAPIVersion   = OpsworksInstanceKind + "." + GroupVersion.String()
	OpsworksInstanceGroupVersionKind = GroupVersion.WithKind(OpsworksInstanceKind)
)

func init() {
	SchemeBuilder.Register(&OpsworksInstance{}, &OpsworksInstanceList{})
}
