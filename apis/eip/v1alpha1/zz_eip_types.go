/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type EipObservation struct {
	AllocationID string `json:"allocationId,omitempty" tf:"allocation_id"`

	AssociationID string `json:"associationId,omitempty" tf:"association_id"`

	CarrierIP string `json:"carrierIp,omitempty" tf:"carrier_ip"`

	CustomerOwnedIP string `json:"customerOwnedIp,omitempty" tf:"customer_owned_ip"`

	Domain string `json:"domain,omitempty" tf:"domain"`

	PrivateDNS string `json:"privateDns,omitempty" tf:"private_dns"`

	PrivateIP string `json:"privateIp,omitempty" tf:"private_ip"`

	PublicDNS string `json:"publicDns,omitempty" tf:"public_dns"`

	PublicIP string `json:"publicIp,omitempty" tf:"public_ip"`
}

type EipParameters struct {

	// +kubebuilder:validation:Optional
	Address *string `json:"address,omitempty" tf:"address"`

	// +kubebuilder:validation:Optional
	AssociateWithPrivateIP *string `json:"associateWithPrivateIp,omitempty" tf:"associate_with_private_ip"`

	// +kubebuilder:validation:Optional
	CustomerOwnedIPv4Pool *string `json:"customerOwnedIpv4Pool,omitempty" tf:"customer_owned_ipv4_pool"`

	// +kubebuilder:validation:Optional
	Instance *string `json:"instance,omitempty" tf:"instance"`

	// +kubebuilder:validation:Optional
	NetworkBorderGroup *string `json:"networkBorderGroup,omitempty" tf:"network_border_group"`

	// +kubebuilder:validation:Optional
	NetworkInterface *string `json:"networkInterface,omitempty" tf:"network_interface"`

	// +kubebuilder:validation:Optional
	PublicIPv4Pool *string `json:"publicIpv4Pool,omitempty" tf:"public_ipv4_pool"`

	// Region is the region you'd like your resource to be created in.
	// +terrajet:crd:field:TFTag=-
	// +kubebuilder:validation:Required
	Region string `json:"region" tf:"-"`

	// +kubebuilder:validation:Optional
	Tags map[string]string `json:"tags,omitempty" tf:"tags"`

	// +kubebuilder:validation:Optional
	TagsAll map[string]string `json:"tagsAll,omitempty" tf:"tags_all"`

	// +kubebuilder:validation:Optional
	Vpc *bool `json:"vpc,omitempty" tf:"vpc"`
}

// EipSpec defines the desired state of Eip
type EipSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     EipParameters `json:"forProvider"`
}

// EipStatus defines the observed state of Eip.
type EipStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        EipObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// Eip is the Schema for the Eips API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,tfaws}
type Eip struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              EipSpec   `json:"spec"`
	Status            EipStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// EipList contains a list of Eips
type EipList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []Eip `json:"items"`
}

// Repository type metadata.
var (
	EipKind             = "Eip"
	EipGroupKind        = schema.GroupKind{Group: Group, Kind: EipKind}.String()
	EipKindAPIVersion   = EipKind + "." + GroupVersion.String()
	EipGroupVersionKind = GroupVersion.WithKind(EipKind)
)

func init() {
	SchemeBuilder.Register(&Eip{}, &EipList{})
}
