/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	xpv1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"
)

type XraySamplingRuleObservation struct {
	Arn string `json:"arn" tf:"arn"`
}

type XraySamplingRuleParameters struct {

	// +kubebuilder:validation:Optional
	Attributes map[string]string `json:"attributes,omitempty" tf:"attributes"`

	// +kubebuilder:validation:Required
	FixedRate float64 `json:"fixedRate" tf:"fixed_rate"`

	// +kubebuilder:validation:Required
	HTTPMethod string `json:"httpMethod" tf:"http_method"`

	// +kubebuilder:validation:Required
	Host string `json:"host" tf:"host"`

	// +kubebuilder:validation:Required
	Priority int64 `json:"priority" tf:"priority"`

	// Region is the region you'd like your resource to be created in.
	// +terrajet:crd:field:TFTag=-
	// +kubebuilder:validation:Required
	Region string `json:"region" tf:"-"`

	// +kubebuilder:validation:Required
	ReservoirSize int64 `json:"reservoirSize" tf:"reservoir_size"`

	// +kubebuilder:validation:Required
	ResourceArn string `json:"resourceArn" tf:"resource_arn"`

	// +kubebuilder:validation:Optional
	RuleName *string `json:"ruleName,omitempty" tf:"rule_name"`

	// +kubebuilder:validation:Required
	ServiceName string `json:"serviceName" tf:"service_name"`

	// +kubebuilder:validation:Required
	ServiceType string `json:"serviceType" tf:"service_type"`

	// +kubebuilder:validation:Optional
	Tags map[string]string `json:"tags,omitempty" tf:"tags"`

	// +kubebuilder:validation:Optional
	TagsAll map[string]string `json:"tagsAll,omitempty" tf:"tags_all"`

	// +kubebuilder:validation:Required
	URLPath string `json:"urlPath" tf:"url_path"`

	// +kubebuilder:validation:Required
	Version int64 `json:"version" tf:"version"`
}

// XraySamplingRuleSpec defines the desired state of XraySamplingRule
type XraySamplingRuleSpec struct {
	xpv1.ResourceSpec `json:",inline"`
	ForProvider       XraySamplingRuleParameters `json:"forProvider"`
}

// XraySamplingRuleStatus defines the observed state of XraySamplingRule.
type XraySamplingRuleStatus struct {
	xpv1.ResourceStatus `json:",inline"`
	AtProvider          XraySamplingRuleObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// XraySamplingRule is the Schema for the XraySamplingRules API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,tfaws}
type XraySamplingRule struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              XraySamplingRuleSpec   `json:"spec"`
	Status            XraySamplingRuleStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// XraySamplingRuleList contains a list of XraySamplingRules
type XraySamplingRuleList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []XraySamplingRule `json:"items"`
}

// Repository type metadata.
var (
	XraySamplingRuleKind             = "XraySamplingRule"
	XraySamplingRuleGroupKind        = schema.GroupKind{Group: Group, Kind: XraySamplingRuleKind}.String()
	XraySamplingRuleKindAPIVersion   = XraySamplingRuleKind + "." + GroupVersion.String()
	XraySamplingRuleGroupVersionKind = GroupVersion.WithKind(XraySamplingRuleKind)
)

func init() {
	SchemeBuilder.Register(&XraySamplingRule{}, &XraySamplingRuleList{})
}
