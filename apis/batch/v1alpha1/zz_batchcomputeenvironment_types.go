/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	xpv1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"
)

type BatchComputeEnvironmentObservation struct {
	Arn string `json:"arn" tf:"arn"`

	EcsClusterArn string `json:"ecsClusterArn" tf:"ecs_cluster_arn"`

	Status string `json:"status" tf:"status"`

	StatusReason string `json:"statusReason" tf:"status_reason"`
}

type BatchComputeEnvironmentParameters struct {

	// +kubebuilder:validation:Optional
	ComputeEnvironmentName *string `json:"computeEnvironmentName,omitempty" tf:"compute_environment_name"`

	// +kubebuilder:validation:Optional
	ComputeEnvironmentNamePrefix *string `json:"computeEnvironmentNamePrefix,omitempty" tf:"compute_environment_name_prefix"`

	// +kubebuilder:validation:Optional
	ComputeResources []ComputeResourcesParameters `json:"computeResources,omitempty" tf:"compute_resources"`

	// Region is the region you'd like your resource to be created in.
	// +terrajet:crd:field:TFTag=-
	// +kubebuilder:validation:Required
	Region string `json:"region" tf:"-"`

	// +kubebuilder:validation:Optional
	ServiceRole *string `json:"serviceRole,omitempty" tf:"service_role"`

	// +kubebuilder:validation:Optional
	State *string `json:"state,omitempty" tf:"state"`

	// +kubebuilder:validation:Optional
	Tags map[string]string `json:"tags,omitempty" tf:"tags"`

	// +kubebuilder:validation:Optional
	TagsAll map[string]string `json:"tagsAll,omitempty" tf:"tags_all"`

	// +kubebuilder:validation:Required
	Type string `json:"type" tf:"type"`
}

type ComputeResourcesObservation struct {
}

type ComputeResourcesParameters struct {

	// +kubebuilder:validation:Optional
	AllocationStrategy *string `json:"allocationStrategy,omitempty" tf:"allocation_strategy"`

	// +kubebuilder:validation:Optional
	BidPercentage *int64 `json:"bidPercentage,omitempty" tf:"bid_percentage"`

	// +kubebuilder:validation:Optional
	DesiredVcpus *int64 `json:"desiredVcpus,omitempty" tf:"desired_vcpus"`

	// +kubebuilder:validation:Optional
	Ec2KeyPair *string `json:"ec2KeyPair,omitempty" tf:"ec2_key_pair"`

	// +kubebuilder:validation:Optional
	ImageID *string `json:"imageId,omitempty" tf:"image_id"`

	// +kubebuilder:validation:Optional
	InstanceRole *string `json:"instanceRole,omitempty" tf:"instance_role"`

	// +kubebuilder:validation:Optional
	InstanceType []string `json:"instanceType,omitempty" tf:"instance_type"`

	// +kubebuilder:validation:Optional
	LaunchTemplate []LaunchTemplateParameters `json:"launchTemplate,omitempty" tf:"launch_template"`

	// +kubebuilder:validation:Required
	MaxVcpus int64 `json:"maxVcpus" tf:"max_vcpus"`

	// +kubebuilder:validation:Optional
	MinVcpus *int64 `json:"minVcpus,omitempty" tf:"min_vcpus"`

	// +kubebuilder:validation:Required
	SecurityGroupIds []string `json:"securityGroupIds" tf:"security_group_ids"`

	// +kubebuilder:validation:Optional
	SpotIamFleetRole *string `json:"spotIamFleetRole,omitempty" tf:"spot_iam_fleet_role"`

	// +kubebuilder:validation:Required
	Subnets []string `json:"subnets" tf:"subnets"`

	// +kubebuilder:validation:Optional
	Tags map[string]string `json:"tags,omitempty" tf:"tags"`

	// +kubebuilder:validation:Required
	Type string `json:"type" tf:"type"`
}

type LaunchTemplateObservation struct {
}

type LaunchTemplateParameters struct {

	// +kubebuilder:validation:Optional
	LaunchTemplateID *string `json:"launchTemplateId,omitempty" tf:"launch_template_id"`

	// +kubebuilder:validation:Optional
	LaunchTemplateName *string `json:"launchTemplateName,omitempty" tf:"launch_template_name"`

	// +kubebuilder:validation:Optional
	Version *string `json:"version,omitempty" tf:"version"`
}

// BatchComputeEnvironmentSpec defines the desired state of BatchComputeEnvironment
type BatchComputeEnvironmentSpec struct {
	xpv1.ResourceSpec `json:",inline"`
	ForProvider       BatchComputeEnvironmentParameters `json:"forProvider"`
}

// BatchComputeEnvironmentStatus defines the observed state of BatchComputeEnvironment.
type BatchComputeEnvironmentStatus struct {
	xpv1.ResourceStatus `json:",inline"`
	AtProvider          BatchComputeEnvironmentObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// BatchComputeEnvironment is the Schema for the BatchComputeEnvironments API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,tfaws}
type BatchComputeEnvironment struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              BatchComputeEnvironmentSpec   `json:"spec"`
	Status            BatchComputeEnvironmentStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// BatchComputeEnvironmentList contains a list of BatchComputeEnvironments
type BatchComputeEnvironmentList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []BatchComputeEnvironment `json:"items"`
}

// Repository type metadata.
var (
	BatchComputeEnvironmentKind             = "BatchComputeEnvironment"
	BatchComputeEnvironmentGroupKind        = schema.GroupKind{Group: Group, Kind: BatchComputeEnvironmentKind}.String()
	BatchComputeEnvironmentKindAPIVersion   = BatchComputeEnvironmentKind + "." + GroupVersion.String()
	BatchComputeEnvironmentGroupVersionKind = GroupVersion.WithKind(BatchComputeEnvironmentKind)
)

func init() {
	SchemeBuilder.Register(&BatchComputeEnvironment{}, &BatchComputeEnvironmentList{})
}
