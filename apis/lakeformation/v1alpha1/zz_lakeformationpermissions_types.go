/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	xpv1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"
)

type DataLocationObservation struct {
}

type DataLocationParameters struct {

	// +kubebuilder:validation:Required
	Arn string `json:"arn" tf:"arn"`

	// +kubebuilder:validation:Optional
	CatalogID *string `json:"catalogId,omitempty" tf:"catalog_id"`
}

type DatabaseObservation struct {
}

type DatabaseParameters struct {

	// +kubebuilder:validation:Optional
	CatalogID *string `json:"catalogId,omitempty" tf:"catalog_id"`

	// +kubebuilder:validation:Required
	Name string `json:"name" tf:"name"`
}

type LakeformationPermissionsObservation struct {
}

type LakeformationPermissionsParameters struct {

	// +kubebuilder:validation:Optional
	CatalogID *string `json:"catalogId,omitempty" tf:"catalog_id"`

	// +kubebuilder:validation:Optional
	CatalogResource *bool `json:"catalogResource,omitempty" tf:"catalog_resource"`

	// +kubebuilder:validation:Optional
	DataLocation []DataLocationParameters `json:"dataLocation,omitempty" tf:"data_location"`

	// +kubebuilder:validation:Optional
	Database []DatabaseParameters `json:"database,omitempty" tf:"database"`

	// +kubebuilder:validation:Required
	Permissions []string `json:"permissions" tf:"permissions"`

	// +kubebuilder:validation:Optional
	PermissionsWithGrantOption []string `json:"permissionsWithGrantOption,omitempty" tf:"permissions_with_grant_option"`

	// +kubebuilder:validation:Required
	Principal string `json:"principal" tf:"principal"`

	// Region is the region you'd like your resource to be created in.
	// +terrajet:crd:field:TFTag=-
	// +kubebuilder:validation:Required
	Region string `json:"region" tf:"-"`

	// +kubebuilder:validation:Optional
	Table []TableParameters `json:"table,omitempty" tf:"table"`

	// +kubebuilder:validation:Optional
	TableWithColumns []TableWithColumnsParameters `json:"tableWithColumns,omitempty" tf:"table_with_columns"`
}

type TableObservation struct {
}

type TableParameters struct {

	// +kubebuilder:validation:Optional
	CatalogID *string `json:"catalogId,omitempty" tf:"catalog_id"`

	// +kubebuilder:validation:Required
	DatabaseName string `json:"databaseName" tf:"database_name"`

	// +kubebuilder:validation:Optional
	Name *string `json:"name,omitempty" tf:"name"`

	// +kubebuilder:validation:Optional
	Wildcard *bool `json:"wildcard,omitempty" tf:"wildcard"`
}

type TableWithColumnsObservation struct {
}

type TableWithColumnsParameters struct {

	// +kubebuilder:validation:Optional
	CatalogID *string `json:"catalogId,omitempty" tf:"catalog_id"`

	// +kubebuilder:validation:Optional
	ColumnNames []string `json:"columnNames,omitempty" tf:"column_names"`

	// +kubebuilder:validation:Required
	DatabaseName string `json:"databaseName" tf:"database_name"`

	// +kubebuilder:validation:Optional
	ExcludedColumnNames []string `json:"excludedColumnNames,omitempty" tf:"excluded_column_names"`

	// +kubebuilder:validation:Required
	Name string `json:"name" tf:"name"`

	// +kubebuilder:validation:Optional
	Wildcard *bool `json:"wildcard,omitempty" tf:"wildcard"`
}

// LakeformationPermissionsSpec defines the desired state of LakeformationPermissions
type LakeformationPermissionsSpec struct {
	xpv1.ResourceSpec `json:",inline"`
	ForProvider       LakeformationPermissionsParameters `json:"forProvider"`
}

// LakeformationPermissionsStatus defines the observed state of LakeformationPermissions.
type LakeformationPermissionsStatus struct {
	xpv1.ResourceStatus `json:",inline"`
	AtProvider          LakeformationPermissionsObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// LakeformationPermissions is the Schema for the LakeformationPermissionss API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,tfaws}
type LakeformationPermissions struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              LakeformationPermissionsSpec   `json:"spec"`
	Status            LakeformationPermissionsStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// LakeformationPermissionsList contains a list of LakeformationPermissionss
type LakeformationPermissionsList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []LakeformationPermissions `json:"items"`
}

// Repository type metadata.
var (
	LakeformationPermissionsKind             = "LakeformationPermissions"
	LakeformationPermissionsGroupKind        = schema.GroupKind{Group: Group, Kind: LakeformationPermissionsKind}.String()
	LakeformationPermissionsKindAPIVersion   = LakeformationPermissionsKind + "." + GroupVersion.String()
	LakeformationPermissionsGroupVersionKind = GroupVersion.WithKind(LakeformationPermissionsKind)
)

func init() {
	SchemeBuilder.Register(&LakeformationPermissions{}, &LakeformationPermissionsList{})
}
