/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type CookieStickinessPolicyObservation struct {
}

type CookieStickinessPolicyParameters struct {

	// +kubebuilder:validation:Optional
	CookieExpirationPeriod *int64 `json:"cookieExpirationPeriod,omitempty" tf:"cookie_expiration_period,omitempty"`

	// +kubebuilder:validation:Required
	LbPort *int64 `json:"lbPort" tf:"lb_port,omitempty"`

	// +kubebuilder:validation:Required
	LoadBalancer *string `json:"loadBalancer" tf:"load_balancer,omitempty"`

	// +kubebuilder:validation:Required
	Name *string `json:"name" tf:"name,omitempty"`

	// Region is the region you'd like your resource to be created in.
	// +terrajet:crd:field:TFTag=-
	// +kubebuilder:validation:Required
	Region *string `json:"region" tf:"-"`
}

// CookieStickinessPolicySpec defines the desired state of CookieStickinessPolicy
type CookieStickinessPolicySpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     CookieStickinessPolicyParameters `json:"forProvider"`
}

// CookieStickinessPolicyStatus defines the observed state of CookieStickinessPolicy.
type CookieStickinessPolicyStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        CookieStickinessPolicyObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// CookieStickinessPolicy is the Schema for the CookieStickinessPolicys API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,awsjet}
type CookieStickinessPolicy struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              CookieStickinessPolicySpec   `json:"spec"`
	Status            CookieStickinessPolicyStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// CookieStickinessPolicyList contains a list of CookieStickinessPolicys
type CookieStickinessPolicyList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []CookieStickinessPolicy `json:"items"`
}

// Repository type metadata.
var (
	CookieStickinessPolicy_Kind             = "CookieStickinessPolicy"
	CookieStickinessPolicy_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: CookieStickinessPolicy_Kind}.String()
	CookieStickinessPolicy_KindAPIVersion   = CookieStickinessPolicy_Kind + "." + CRDGroupVersion.String()
	CookieStickinessPolicy_GroupVersionKind = CRDGroupVersion.WithKind(CookieStickinessPolicy_Kind)
)

func init() {
	SchemeBuilder.Register(&CookieStickinessPolicy{}, &CookieStickinessPolicyList{})
}
