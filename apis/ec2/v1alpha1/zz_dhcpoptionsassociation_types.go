/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type DhcpOptionsAssociationObservation struct {
}

type DhcpOptionsAssociationParameters struct {

	// +kubebuilder:validation:Required
	DhcpOptionsID *string `json:"dhcpOptionsId" tf:"dhcp_options_id,omitempty"`

	// Region is the region you'd like your resource to be created in.
	// +terrajet:crd:field:TFTag=-
	// +kubebuilder:validation:Required
	Region *string `json:"region" tf:"-"`

	// +kubebuilder:validation:Required
	VpcID *string `json:"vpcId" tf:"vpc_id,omitempty"`
}

// DhcpOptionsAssociationSpec defines the desired state of DhcpOptionsAssociation
type DhcpOptionsAssociationSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     DhcpOptionsAssociationParameters `json:"forProvider"`
}

// DhcpOptionsAssociationStatus defines the observed state of DhcpOptionsAssociation.
type DhcpOptionsAssociationStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        DhcpOptionsAssociationObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// DhcpOptionsAssociation is the Schema for the DhcpOptionsAssociations API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,awsjet}
type DhcpOptionsAssociation struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              DhcpOptionsAssociationSpec   `json:"spec"`
	Status            DhcpOptionsAssociationStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// DhcpOptionsAssociationList contains a list of DhcpOptionsAssociations
type DhcpOptionsAssociationList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []DhcpOptionsAssociation `json:"items"`
}

// Repository type metadata.
var (
	DhcpOptionsAssociation_Kind             = "DhcpOptionsAssociation"
	DhcpOptionsAssociation_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: DhcpOptionsAssociation_Kind}.String()
	DhcpOptionsAssociation_KindAPIVersion   = DhcpOptionsAssociation_Kind + "." + CRDGroupVersion.String()
	DhcpOptionsAssociation_GroupVersionKind = CRDGroupVersion.WithKind(DhcpOptionsAssociation_Kind)
)

func init() {
	SchemeBuilder.Register(&DhcpOptionsAssociation{}, &DhcpOptionsAssociationList{})
}
