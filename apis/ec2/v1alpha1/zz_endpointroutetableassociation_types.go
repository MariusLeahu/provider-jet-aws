/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type EndpointRouteTableAssociationObservation struct {
}

type EndpointRouteTableAssociationParameters struct {

	// Region is the region you'd like your resource to be created in.
	// +terrajet:crd:field:TFTag=-
	// +kubebuilder:validation:Required
	Region *string `json:"region" tf:"-"`

	// +kubebuilder:validation:Required
	RouteTableID *string `json:"routeTableId" tf:"route_table_id,omitempty"`

	// +kubebuilder:validation:Required
	VpcEndpointID *string `json:"vpcEndpointId" tf:"vpc_endpoint_id,omitempty"`
}

// EndpointRouteTableAssociationSpec defines the desired state of EndpointRouteTableAssociation
type EndpointRouteTableAssociationSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     EndpointRouteTableAssociationParameters `json:"forProvider"`
}

// EndpointRouteTableAssociationStatus defines the observed state of EndpointRouteTableAssociation.
type EndpointRouteTableAssociationStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        EndpointRouteTableAssociationObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// EndpointRouteTableAssociation is the Schema for the EndpointRouteTableAssociations API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,awsjet}
type EndpointRouteTableAssociation struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              EndpointRouteTableAssociationSpec   `json:"spec"`
	Status            EndpointRouteTableAssociationStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// EndpointRouteTableAssociationList contains a list of EndpointRouteTableAssociations
type EndpointRouteTableAssociationList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []EndpointRouteTableAssociation `json:"items"`
}

// Repository type metadata.
var (
	EndpointRouteTableAssociation_Kind             = "EndpointRouteTableAssociation"
	EndpointRouteTableAssociation_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: EndpointRouteTableAssociation_Kind}.String()
	EndpointRouteTableAssociation_KindAPIVersion   = EndpointRouteTableAssociation_Kind + "." + CRDGroupVersion.String()
	EndpointRouteTableAssociation_GroupVersionKind = CRDGroupVersion.WithKind(EndpointRouteTableAssociation_Kind)
)

func init() {
	SchemeBuilder.Register(&EndpointRouteTableAssociation{}, &EndpointRouteTableAssociationList{})
}
