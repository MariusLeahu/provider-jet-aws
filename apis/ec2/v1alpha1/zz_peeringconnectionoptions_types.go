/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type PeeringConnectionOptionsAccepterObservation struct {
}

type PeeringConnectionOptionsAccepterParameters struct {

	// +kubebuilder:validation:Optional
	AllowClassicLinkToRemoteVpc *bool `json:"allowClassicLinkToRemoteVpc,omitempty" tf:"allow_classic_link_to_remote_vpc,omitempty"`

	// +kubebuilder:validation:Optional
	AllowRemoteVpcDNSResolution *bool `json:"allowRemoteVpcDnsResolution,omitempty" tf:"allow_remote_vpc_dns_resolution,omitempty"`

	// +kubebuilder:validation:Optional
	AllowVpcToRemoteClassicLink *bool `json:"allowVpcToRemoteClassicLink,omitempty" tf:"allow_vpc_to_remote_classic_link,omitempty"`
}

type PeeringConnectionOptionsObservation struct {
}

type PeeringConnectionOptionsParameters struct {

	// +kubebuilder:validation:Optional
	Accepter []PeeringConnectionOptionsAccepterParameters `json:"accepter,omitempty" tf:"accepter,omitempty"`

	// Region is the region you'd like your resource to be created in.
	// +terrajet:crd:field:TFTag=-
	// +kubebuilder:validation:Required
	Region *string `json:"region" tf:"-"`

	// +kubebuilder:validation:Optional
	Requester []PeeringConnectionOptionsRequesterParameters `json:"requester,omitempty" tf:"requester,omitempty"`

	// +kubebuilder:validation:Required
	VpcPeeringConnectionID *string `json:"vpcPeeringConnectionId" tf:"vpc_peering_connection_id,omitempty"`
}

type PeeringConnectionOptionsRequesterObservation struct {
}

type PeeringConnectionOptionsRequesterParameters struct {

	// +kubebuilder:validation:Optional
	AllowClassicLinkToRemoteVpc *bool `json:"allowClassicLinkToRemoteVpc,omitempty" tf:"allow_classic_link_to_remote_vpc,omitempty"`

	// +kubebuilder:validation:Optional
	AllowRemoteVpcDNSResolution *bool `json:"allowRemoteVpcDnsResolution,omitempty" tf:"allow_remote_vpc_dns_resolution,omitempty"`

	// +kubebuilder:validation:Optional
	AllowVpcToRemoteClassicLink *bool `json:"allowVpcToRemoteClassicLink,omitempty" tf:"allow_vpc_to_remote_classic_link,omitempty"`
}

// PeeringConnectionOptionsSpec defines the desired state of PeeringConnectionOptions
type PeeringConnectionOptionsSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     PeeringConnectionOptionsParameters `json:"forProvider"`
}

// PeeringConnectionOptionsStatus defines the observed state of PeeringConnectionOptions.
type PeeringConnectionOptionsStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        PeeringConnectionOptionsObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// PeeringConnectionOptions is the Schema for the PeeringConnectionOptionss API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,awsjet}
type PeeringConnectionOptions struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              PeeringConnectionOptionsSpec   `json:"spec"`
	Status            PeeringConnectionOptionsStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// PeeringConnectionOptionsList contains a list of PeeringConnectionOptionss
type PeeringConnectionOptionsList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []PeeringConnectionOptions `json:"items"`
}

// Repository type metadata.
var (
	PeeringConnectionOptions_Kind             = "PeeringConnectionOptions"
	PeeringConnectionOptions_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: PeeringConnectionOptions_Kind}.String()
	PeeringConnectionOptions_KindAPIVersion   = PeeringConnectionOptions_Kind + "." + CRDGroupVersion.String()
	PeeringConnectionOptions_GroupVersionKind = CRDGroupVersion.WithKind(PeeringConnectionOptions_Kind)
)

func init() {
	SchemeBuilder.Register(&PeeringConnectionOptions{}, &PeeringConnectionOptionsList{})
}
