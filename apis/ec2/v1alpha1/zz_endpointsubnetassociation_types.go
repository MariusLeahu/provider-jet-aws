/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type EndpointSubnetAssociationObservation struct {
}

type EndpointSubnetAssociationParameters struct {

	// Region is the region you'd like your resource to be created in.
	// +terrajet:crd:field:TFTag=-
	// +kubebuilder:validation:Required
	Region *string `json:"region" tf:"-"`

	// +kubebuilder:validation:Required
	SubnetID *string `json:"subnetId" tf:"subnet_id,omitempty"`

	// +kubebuilder:validation:Required
	VpcEndpointID *string `json:"vpcEndpointId" tf:"vpc_endpoint_id,omitempty"`
}

// EndpointSubnetAssociationSpec defines the desired state of EndpointSubnetAssociation
type EndpointSubnetAssociationSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     EndpointSubnetAssociationParameters `json:"forProvider"`
}

// EndpointSubnetAssociationStatus defines the observed state of EndpointSubnetAssociation.
type EndpointSubnetAssociationStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        EndpointSubnetAssociationObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// EndpointSubnetAssociation is the Schema for the EndpointSubnetAssociations API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,awsjet}
type EndpointSubnetAssociation struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              EndpointSubnetAssociationSpec   `json:"spec"`
	Status            EndpointSubnetAssociationStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// EndpointSubnetAssociationList contains a list of EndpointSubnetAssociations
type EndpointSubnetAssociationList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []EndpointSubnetAssociation `json:"items"`
}

// Repository type metadata.
var (
	EndpointSubnetAssociation_Kind             = "EndpointSubnetAssociation"
	EndpointSubnetAssociation_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: EndpointSubnetAssociation_Kind}.String()
	EndpointSubnetAssociation_KindAPIVersion   = EndpointSubnetAssociation_Kind + "." + CRDGroupVersion.String()
	EndpointSubnetAssociation_GroupVersionKind = CRDGroupVersion.WithKind(EndpointSubnetAssociation_Kind)
)

func init() {
	SchemeBuilder.Register(&EndpointSubnetAssociation{}, &EndpointSubnetAssociationList{})
}
