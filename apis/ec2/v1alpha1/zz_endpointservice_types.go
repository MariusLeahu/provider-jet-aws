/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type EndpointServiceObservation struct {
	Arn *string `json:"arn,omitempty" tf:"arn,omitempty"`

	AvailabilityZones []*string `json:"availabilityZones,omitempty" tf:"availability_zones,omitempty"`

	BaseEndpointDNSNames []*string `json:"baseEndpointDnsNames,omitempty" tf:"base_endpoint_dns_names,omitempty"`

	ManagesVpcEndpoints *bool `json:"managesVpcEndpoints,omitempty" tf:"manages_vpc_endpoints,omitempty"`

	PrivateDNSNameConfiguration []PrivateDNSNameConfigurationObservation `json:"privateDnsNameConfiguration,omitempty" tf:"private_dns_name_configuration,omitempty"`

	ServiceName *string `json:"serviceName,omitempty" tf:"service_name,omitempty"`

	ServiceType *string `json:"serviceType,omitempty" tf:"service_type,omitempty"`

	State *string `json:"state,omitempty" tf:"state,omitempty"`

	TagsAll map[string]*string `json:"tagsAll,omitempty" tf:"tags_all,omitempty"`
}

type EndpointServiceParameters struct {

	// +kubebuilder:validation:Required
	AcceptanceRequired *bool `json:"acceptanceRequired" tf:"acceptance_required,omitempty"`

	// +kubebuilder:validation:Optional
	AllowedPrincipals []*string `json:"allowedPrincipals,omitempty" tf:"allowed_principals,omitempty"`

	// +kubebuilder:validation:Optional
	GatewayLoadBalancerArns []*string `json:"gatewayLoadBalancerArns,omitempty" tf:"gateway_load_balancer_arns,omitempty"`

	// +kubebuilder:validation:Optional
	NetworkLoadBalancerArns []*string `json:"networkLoadBalancerArns,omitempty" tf:"network_load_balancer_arns,omitempty"`

	// +kubebuilder:validation:Optional
	PrivateDNSName *string `json:"privateDnsName,omitempty" tf:"private_dns_name,omitempty"`

	// Region is the region you'd like your resource to be created in.
	// +terrajet:crd:field:TFTag=-
	// +kubebuilder:validation:Required
	Region *string `json:"region" tf:"-"`

	// +kubebuilder:validation:Optional
	Tags map[string]*string `json:"tags,omitempty" tf:"tags,omitempty"`
}

type PrivateDNSNameConfigurationObservation struct {
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	State *string `json:"state,omitempty" tf:"state,omitempty"`

	Type *string `json:"type,omitempty" tf:"type,omitempty"`

	Value *string `json:"value,omitempty" tf:"value,omitempty"`
}

type PrivateDNSNameConfigurationParameters struct {
}

// EndpointServiceSpec defines the desired state of EndpointService
type EndpointServiceSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     EndpointServiceParameters `json:"forProvider"`
}

// EndpointServiceStatus defines the observed state of EndpointService.
type EndpointServiceStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        EndpointServiceObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// EndpointService is the Schema for the EndpointServices API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,awsjet}
type EndpointService struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              EndpointServiceSpec   `json:"spec"`
	Status            EndpointServiceStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// EndpointServiceList contains a list of EndpointServices
type EndpointServiceList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []EndpointService `json:"items"`
}

// Repository type metadata.
var (
	EndpointService_Kind             = "EndpointService"
	EndpointService_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: EndpointService_Kind}.String()
	EndpointService_KindAPIVersion   = EndpointService_Kind + "." + CRDGroupVersion.String()
	EndpointService_GroupVersionKind = CRDGroupVersion.WithKind(EndpointService_Kind)
)

func init() {
	SchemeBuilder.Register(&EndpointService{}, &EndpointServiceList{})
}
