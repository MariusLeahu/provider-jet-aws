/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type EndpointConnectionNotificationObservation struct {
	NotificationType *string `json:"notificationType,omitempty" tf:"notification_type,omitempty"`

	State *string `json:"state,omitempty" tf:"state,omitempty"`
}

type EndpointConnectionNotificationParameters struct {

	// +kubebuilder:validation:Required
	ConnectionEvents []*string `json:"connectionEvents" tf:"connection_events,omitempty"`

	// +kubebuilder:validation:Required
	ConnectionNotificationArn *string `json:"connectionNotificationArn" tf:"connection_notification_arn,omitempty"`

	// Region is the region you'd like your resource to be created in.
	// +terrajet:crd:field:TFTag=-
	// +kubebuilder:validation:Required
	Region *string `json:"region" tf:"-"`

	// +kubebuilder:validation:Optional
	VpcEndpointID *string `json:"vpcEndpointId,omitempty" tf:"vpc_endpoint_id,omitempty"`

	// +kubebuilder:validation:Optional
	VpcEndpointServiceID *string `json:"vpcEndpointServiceId,omitempty" tf:"vpc_endpoint_service_id,omitempty"`
}

// EndpointConnectionNotificationSpec defines the desired state of EndpointConnectionNotification
type EndpointConnectionNotificationSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     EndpointConnectionNotificationParameters `json:"forProvider"`
}

// EndpointConnectionNotificationStatus defines the observed state of EndpointConnectionNotification.
type EndpointConnectionNotificationStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        EndpointConnectionNotificationObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// EndpointConnectionNotification is the Schema for the EndpointConnectionNotifications API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,awsjet}
type EndpointConnectionNotification struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              EndpointConnectionNotificationSpec   `json:"spec"`
	Status            EndpointConnectionNotificationStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// EndpointConnectionNotificationList contains a list of EndpointConnectionNotifications
type EndpointConnectionNotificationList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []EndpointConnectionNotification `json:"items"`
}

// Repository type metadata.
var (
	EndpointConnectionNotification_Kind             = "EndpointConnectionNotification"
	EndpointConnectionNotification_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: EndpointConnectionNotification_Kind}.String()
	EndpointConnectionNotification_KindAPIVersion   = EndpointConnectionNotification_Kind + "." + CRDGroupVersion.String()
	EndpointConnectionNotification_GroupVersionKind = CRDGroupVersion.WithKind(EndpointConnectionNotification_Kind)
)

func init() {
	SchemeBuilder.Register(&EndpointConnectionNotification{}, &EndpointConnectionNotificationList{})
}
