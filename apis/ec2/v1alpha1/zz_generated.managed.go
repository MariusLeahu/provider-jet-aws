/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/
// Code generated by angryjet. DO NOT EDIT.

package v1alpha1

import xpv1 "github.com/crossplane/crossplane-runtime/apis/common/v1"

<<<<<<< HEAD
// GetCondition of this EC2LaunchTemplate.
func (mg *EC2LaunchTemplate) GetCondition(ct xpv1.ConditionType) xpv1.Condition {
	return mg.Status.GetCondition(ct)
}

// GetDeletionPolicy of this EC2LaunchTemplate.
func (mg *EC2LaunchTemplate) GetDeletionPolicy() xpv1.DeletionPolicy {
	return mg.Spec.DeletionPolicy
}

// GetProviderConfigReference of this EC2LaunchTemplate.
func (mg *EC2LaunchTemplate) GetProviderConfigReference() *xpv1.Reference {
=======
// GetCondition of this EC2NetworkInterface.
func (mg *EC2NetworkInterface) GetCondition(ct xpv1.ConditionType) xpv1.Condition {
	return mg.Status.GetCondition(ct)
}

// GetDeletionPolicy of this EC2NetworkInterface.
func (mg *EC2NetworkInterface) GetDeletionPolicy() xpv1.DeletionPolicy {
	return mg.Spec.DeletionPolicy
}

// GetProviderConfigReference of this EC2NetworkInterface.
func (mg *EC2NetworkInterface) GetProviderConfigReference() *xpv1.Reference {
>>>>>>> 36ad04b7 (ec2: add late initializer exceptions and examples)
	return mg.Spec.ProviderConfigReference
}

/*
<<<<<<< HEAD
GetProviderReference of this EC2LaunchTemplate.
Deprecated: Use GetProviderConfigReference.
*/
func (mg *EC2LaunchTemplate) GetProviderReference() *xpv1.Reference {
	return mg.Spec.ProviderReference
}

// GetWriteConnectionSecretToReference of this EC2LaunchTemplate.
func (mg *EC2LaunchTemplate) GetWriteConnectionSecretToReference() *xpv1.SecretReference {
	return mg.Spec.WriteConnectionSecretToReference
}

// SetConditions of this EC2LaunchTemplate.
func (mg *EC2LaunchTemplate) SetConditions(c ...xpv1.Condition) {
	mg.Status.SetConditions(c...)
}

// SetDeletionPolicy of this EC2LaunchTemplate.
func (mg *EC2LaunchTemplate) SetDeletionPolicy(r xpv1.DeletionPolicy) {
	mg.Spec.DeletionPolicy = r
}

// SetProviderConfigReference of this EC2LaunchTemplate.
func (mg *EC2LaunchTemplate) SetProviderConfigReference(r *xpv1.Reference) {
=======
GetProviderReference of this EC2NetworkInterface.
Deprecated: Use GetProviderConfigReference.
*/
func (mg *EC2NetworkInterface) GetProviderReference() *xpv1.Reference {
	return mg.Spec.ProviderReference
}

// GetWriteConnectionSecretToReference of this EC2NetworkInterface.
func (mg *EC2NetworkInterface) GetWriteConnectionSecretToReference() *xpv1.SecretReference {
	return mg.Spec.WriteConnectionSecretToReference
}

// SetConditions of this EC2NetworkInterface.
func (mg *EC2NetworkInterface) SetConditions(c ...xpv1.Condition) {
	mg.Status.SetConditions(c...)
}

// SetDeletionPolicy of this EC2NetworkInterface.
func (mg *EC2NetworkInterface) SetDeletionPolicy(r xpv1.DeletionPolicy) {
	mg.Spec.DeletionPolicy = r
}

// SetProviderConfigReference of this EC2NetworkInterface.
func (mg *EC2NetworkInterface) SetProviderConfigReference(r *xpv1.Reference) {
>>>>>>> 36ad04b7 (ec2: add late initializer exceptions and examples)
	mg.Spec.ProviderConfigReference = r
}

/*
<<<<<<< HEAD
SetProviderReference of this EC2LaunchTemplate.
Deprecated: Use SetProviderConfigReference.
*/
func (mg *EC2LaunchTemplate) SetProviderReference(r *xpv1.Reference) {
	mg.Spec.ProviderReference = r
}

// SetWriteConnectionSecretToReference of this EC2LaunchTemplate.
func (mg *EC2LaunchTemplate) SetWriteConnectionSecretToReference(r *xpv1.SecretReference) {
	mg.Spec.WriteConnectionSecretToReference = r
}

// GetCondition of this ElasticIP.
func (mg *ElasticIP) GetCondition(ct xpv1.ConditionType) xpv1.Condition {
	return mg.Status.GetCondition(ct)
}

// GetDeletionPolicy of this ElasticIP.
func (mg *ElasticIP) GetDeletionPolicy() xpv1.DeletionPolicy {
	return mg.Spec.DeletionPolicy
}

// GetProviderConfigReference of this ElasticIP.
func (mg *ElasticIP) GetProviderConfigReference() *xpv1.Reference {
=======
SetProviderReference of this EC2NetworkInterface.
Deprecated: Use SetProviderConfigReference.
*/
func (mg *EC2NetworkInterface) SetProviderReference(r *xpv1.Reference) {
	mg.Spec.ProviderReference = r
}

// SetWriteConnectionSecretToReference of this EC2NetworkInterface.
func (mg *EC2NetworkInterface) SetWriteConnectionSecretToReference(r *xpv1.SecretReference) {
	mg.Spec.WriteConnectionSecretToReference = r
}

// GetCondition of this IPv4CIDRBlockAssociation.
func (mg *IPv4CIDRBlockAssociation) GetCondition(ct xpv1.ConditionType) xpv1.Condition {
	return mg.Status.GetCondition(ct)
}

// GetDeletionPolicy of this IPv4CIDRBlockAssociation.
func (mg *IPv4CIDRBlockAssociation) GetDeletionPolicy() xpv1.DeletionPolicy {
	return mg.Spec.DeletionPolicy
}

// GetProviderConfigReference of this IPv4CIDRBlockAssociation.
func (mg *IPv4CIDRBlockAssociation) GetProviderConfigReference() *xpv1.Reference {
>>>>>>> 36ad04b7 (ec2: add late initializer exceptions and examples)
	return mg.Spec.ProviderConfigReference
}

/*
<<<<<<< HEAD
GetProviderReference of this ElasticIP.
Deprecated: Use GetProviderConfigReference.
*/
func (mg *ElasticIP) GetProviderReference() *xpv1.Reference {
	return mg.Spec.ProviderReference
}

// GetWriteConnectionSecretToReference of this ElasticIP.
func (mg *ElasticIP) GetWriteConnectionSecretToReference() *xpv1.SecretReference {
	return mg.Spec.WriteConnectionSecretToReference
}

// SetConditions of this ElasticIP.
func (mg *ElasticIP) SetConditions(c ...xpv1.Condition) {
	mg.Status.SetConditions(c...)
}

// SetDeletionPolicy of this ElasticIP.
func (mg *ElasticIP) SetDeletionPolicy(r xpv1.DeletionPolicy) {
	mg.Spec.DeletionPolicy = r
}

// SetProviderConfigReference of this ElasticIP.
func (mg *ElasticIP) SetProviderConfigReference(r *xpv1.Reference) {
=======
GetProviderReference of this IPv4CIDRBlockAssociation.
Deprecated: Use GetProviderConfigReference.
*/
func (mg *IPv4CIDRBlockAssociation) GetProviderReference() *xpv1.Reference {
	return mg.Spec.ProviderReference
}

// GetWriteConnectionSecretToReference of this IPv4CIDRBlockAssociation.
func (mg *IPv4CIDRBlockAssociation) GetWriteConnectionSecretToReference() *xpv1.SecretReference {
	return mg.Spec.WriteConnectionSecretToReference
}

// SetConditions of this IPv4CIDRBlockAssociation.
func (mg *IPv4CIDRBlockAssociation) SetConditions(c ...xpv1.Condition) {
	mg.Status.SetConditions(c...)
}

// SetDeletionPolicy of this IPv4CIDRBlockAssociation.
func (mg *IPv4CIDRBlockAssociation) SetDeletionPolicy(r xpv1.DeletionPolicy) {
	mg.Spec.DeletionPolicy = r
}

// SetProviderConfigReference of this IPv4CIDRBlockAssociation.
func (mg *IPv4CIDRBlockAssociation) SetProviderConfigReference(r *xpv1.Reference) {
>>>>>>> 36ad04b7 (ec2: add late initializer exceptions and examples)
	mg.Spec.ProviderConfigReference = r
}

/*
<<<<<<< HEAD
SetProviderReference of this ElasticIP.
Deprecated: Use SetProviderConfigReference.
*/
func (mg *ElasticIP) SetProviderReference(r *xpv1.Reference) {
	mg.Spec.ProviderReference = r
}

// SetWriteConnectionSecretToReference of this ElasticIP.
func (mg *ElasticIP) SetWriteConnectionSecretToReference(r *xpv1.SecretReference) {
=======
SetProviderReference of this IPv4CIDRBlockAssociation.
Deprecated: Use SetProviderConfigReference.
*/
func (mg *IPv4CIDRBlockAssociation) SetProviderReference(r *xpv1.Reference) {
	mg.Spec.ProviderReference = r
}

// SetWriteConnectionSecretToReference of this IPv4CIDRBlockAssociation.
func (mg *IPv4CIDRBlockAssociation) SetWriteConnectionSecretToReference(r *xpv1.SecretReference) {
>>>>>>> 36ad04b7 (ec2: add late initializer exceptions and examples)
	mg.Spec.WriteConnectionSecretToReference = r
}

// GetCondition of this Instance.
func (mg *Instance) GetCondition(ct xpv1.ConditionType) xpv1.Condition {
	return mg.Status.GetCondition(ct)
}

// GetDeletionPolicy of this Instance.
func (mg *Instance) GetDeletionPolicy() xpv1.DeletionPolicy {
	return mg.Spec.DeletionPolicy
}

// GetProviderConfigReference of this Instance.
func (mg *Instance) GetProviderConfigReference() *xpv1.Reference {
	return mg.Spec.ProviderConfigReference
}

/*
GetProviderReference of this Instance.
Deprecated: Use GetProviderConfigReference.
*/
func (mg *Instance) GetProviderReference() *xpv1.Reference {
	return mg.Spec.ProviderReference
}

// GetWriteConnectionSecretToReference of this Instance.
func (mg *Instance) GetWriteConnectionSecretToReference() *xpv1.SecretReference {
	return mg.Spec.WriteConnectionSecretToReference
}

// SetConditions of this Instance.
func (mg *Instance) SetConditions(c ...xpv1.Condition) {
	mg.Status.SetConditions(c...)
}

// SetDeletionPolicy of this Instance.
func (mg *Instance) SetDeletionPolicy(r xpv1.DeletionPolicy) {
	mg.Spec.DeletionPolicy = r
}

// SetProviderConfigReference of this Instance.
func (mg *Instance) SetProviderConfigReference(r *xpv1.Reference) {
	mg.Spec.ProviderConfigReference = r
}

/*
SetProviderReference of this Instance.
Deprecated: Use SetProviderConfigReference.
*/
func (mg *Instance) SetProviderReference(r *xpv1.Reference) {
	mg.Spec.ProviderReference = r
}

// SetWriteConnectionSecretToReference of this Instance.
func (mg *Instance) SetWriteConnectionSecretToReference(r *xpv1.SecretReference) {
	mg.Spec.WriteConnectionSecretToReference = r
}

<<<<<<< HEAD
// GetCondition of this TransitGateway.
func (mg *TransitGateway) GetCondition(ct xpv1.ConditionType) xpv1.Condition {
	return mg.Status.GetCondition(ct)
}

// GetDeletionPolicy of this TransitGateway.
func (mg *TransitGateway) GetDeletionPolicy() xpv1.DeletionPolicy {
	return mg.Spec.DeletionPolicy
}

// GetProviderConfigReference of this TransitGateway.
func (mg *TransitGateway) GetProviderConfigReference() *xpv1.Reference {
=======
// GetCondition of this RouteTable.
func (mg *RouteTable) GetCondition(ct xpv1.ConditionType) xpv1.Condition {
	return mg.Status.GetCondition(ct)
}

// GetDeletionPolicy of this RouteTable.
func (mg *RouteTable) GetDeletionPolicy() xpv1.DeletionPolicy {
	return mg.Spec.DeletionPolicy
}

// GetProviderConfigReference of this RouteTable.
func (mg *RouteTable) GetProviderConfigReference() *xpv1.Reference {
>>>>>>> 36ad04b7 (ec2: add late initializer exceptions and examples)
	return mg.Spec.ProviderConfigReference
}

/*
<<<<<<< HEAD
GetProviderReference of this TransitGateway.
Deprecated: Use GetProviderConfigReference.
*/
func (mg *TransitGateway) GetProviderReference() *xpv1.Reference {
	return mg.Spec.ProviderReference
}

// GetWriteConnectionSecretToReference of this TransitGateway.
func (mg *TransitGateway) GetWriteConnectionSecretToReference() *xpv1.SecretReference {
	return mg.Spec.WriteConnectionSecretToReference
}

// SetConditions of this TransitGateway.
func (mg *TransitGateway) SetConditions(c ...xpv1.Condition) {
	mg.Status.SetConditions(c...)
}

// SetDeletionPolicy of this TransitGateway.
func (mg *TransitGateway) SetDeletionPolicy(r xpv1.DeletionPolicy) {
	mg.Spec.DeletionPolicy = r
}

// SetProviderConfigReference of this TransitGateway.
func (mg *TransitGateway) SetProviderConfigReference(r *xpv1.Reference) {
=======
GetProviderReference of this RouteTable.
Deprecated: Use GetProviderConfigReference.
*/
func (mg *RouteTable) GetProviderReference() *xpv1.Reference {
	return mg.Spec.ProviderReference
}

// GetWriteConnectionSecretToReference of this RouteTable.
func (mg *RouteTable) GetWriteConnectionSecretToReference() *xpv1.SecretReference {
	return mg.Spec.WriteConnectionSecretToReference
}

// SetConditions of this RouteTable.
func (mg *RouteTable) SetConditions(c ...xpv1.Condition) {
	mg.Status.SetConditions(c...)
}

// SetDeletionPolicy of this RouteTable.
func (mg *RouteTable) SetDeletionPolicy(r xpv1.DeletionPolicy) {
	mg.Spec.DeletionPolicy = r
}

// SetProviderConfigReference of this RouteTable.
func (mg *RouteTable) SetProviderConfigReference(r *xpv1.Reference) {
>>>>>>> 36ad04b7 (ec2: add late initializer exceptions and examples)
	mg.Spec.ProviderConfigReference = r
}

/*
<<<<<<< HEAD
SetProviderReference of this TransitGateway.
Deprecated: Use SetProviderConfigReference.
*/
func (mg *TransitGateway) SetProviderReference(r *xpv1.Reference) {
	mg.Spec.ProviderReference = r
}

// SetWriteConnectionSecretToReference of this TransitGateway.
func (mg *TransitGateway) SetWriteConnectionSecretToReference(r *xpv1.SecretReference) {
	mg.Spec.WriteConnectionSecretToReference = r
}

// GetCondition of this TransitGatewayRoute.
func (mg *TransitGatewayRoute) GetCondition(ct xpv1.ConditionType) xpv1.Condition {
	return mg.Status.GetCondition(ct)
}

// GetDeletionPolicy of this TransitGatewayRoute.
func (mg *TransitGatewayRoute) GetDeletionPolicy() xpv1.DeletionPolicy {
	return mg.Spec.DeletionPolicy
}

// GetProviderConfigReference of this TransitGatewayRoute.
func (mg *TransitGatewayRoute) GetProviderConfigReference() *xpv1.Reference {
=======
SetProviderReference of this RouteTable.
Deprecated: Use SetProviderConfigReference.
*/
func (mg *RouteTable) SetProviderReference(r *xpv1.Reference) {
	mg.Spec.ProviderReference = r
}

// SetWriteConnectionSecretToReference of this RouteTable.
func (mg *RouteTable) SetWriteConnectionSecretToReference(r *xpv1.SecretReference) {
	mg.Spec.WriteConnectionSecretToReference = r
}

// GetCondition of this RouteTableAssociation.
func (mg *RouteTableAssociation) GetCondition(ct xpv1.ConditionType) xpv1.Condition {
	return mg.Status.GetCondition(ct)
}

// GetDeletionPolicy of this RouteTableAssociation.
func (mg *RouteTableAssociation) GetDeletionPolicy() xpv1.DeletionPolicy {
	return mg.Spec.DeletionPolicy
}

// GetProviderConfigReference of this RouteTableAssociation.
func (mg *RouteTableAssociation) GetProviderConfigReference() *xpv1.Reference {
>>>>>>> 36ad04b7 (ec2: add late initializer exceptions and examples)
	return mg.Spec.ProviderConfigReference
}

/*
<<<<<<< HEAD
GetProviderReference of this TransitGatewayRoute.
Deprecated: Use GetProviderConfigReference.
*/
func (mg *TransitGatewayRoute) GetProviderReference() *xpv1.Reference {
	return mg.Spec.ProviderReference
}

// GetWriteConnectionSecretToReference of this TransitGatewayRoute.
func (mg *TransitGatewayRoute) GetWriteConnectionSecretToReference() *xpv1.SecretReference {
	return mg.Spec.WriteConnectionSecretToReference
}

// SetConditions of this TransitGatewayRoute.
func (mg *TransitGatewayRoute) SetConditions(c ...xpv1.Condition) {
	mg.Status.SetConditions(c...)
}

// SetDeletionPolicy of this TransitGatewayRoute.
func (mg *TransitGatewayRoute) SetDeletionPolicy(r xpv1.DeletionPolicy) {
	mg.Spec.DeletionPolicy = r
}

// SetProviderConfigReference of this TransitGatewayRoute.
func (mg *TransitGatewayRoute) SetProviderConfigReference(r *xpv1.Reference) {
=======
GetProviderReference of this RouteTableAssociation.
Deprecated: Use GetProviderConfigReference.
*/
func (mg *RouteTableAssociation) GetProviderReference() *xpv1.Reference {
	return mg.Spec.ProviderReference
}

// GetWriteConnectionSecretToReference of this RouteTableAssociation.
func (mg *RouteTableAssociation) GetWriteConnectionSecretToReference() *xpv1.SecretReference {
	return mg.Spec.WriteConnectionSecretToReference
}

// SetConditions of this RouteTableAssociation.
func (mg *RouteTableAssociation) SetConditions(c ...xpv1.Condition) {
	mg.Status.SetConditions(c...)
}

// SetDeletionPolicy of this RouteTableAssociation.
func (mg *RouteTableAssociation) SetDeletionPolicy(r xpv1.DeletionPolicy) {
	mg.Spec.DeletionPolicy = r
}

// SetProviderConfigReference of this RouteTableAssociation.
func (mg *RouteTableAssociation) SetProviderConfigReference(r *xpv1.Reference) {
>>>>>>> 36ad04b7 (ec2: add late initializer exceptions and examples)
	mg.Spec.ProviderConfigReference = r
}

/*
<<<<<<< HEAD
SetProviderReference of this TransitGatewayRoute.
Deprecated: Use SetProviderConfigReference.
*/
func (mg *TransitGatewayRoute) SetProviderReference(r *xpv1.Reference) {
	mg.Spec.ProviderReference = r
}

// SetWriteConnectionSecretToReference of this TransitGatewayRoute.
func (mg *TransitGatewayRoute) SetWriteConnectionSecretToReference(r *xpv1.SecretReference) {
	mg.Spec.WriteConnectionSecretToReference = r
}

// GetCondition of this TransitGatewayRouteTable.
func (mg *TransitGatewayRouteTable) GetCondition(ct xpv1.ConditionType) xpv1.Condition {
	return mg.Status.GetCondition(ct)
}

// GetDeletionPolicy of this TransitGatewayRouteTable.
func (mg *TransitGatewayRouteTable) GetDeletionPolicy() xpv1.DeletionPolicy {
	return mg.Spec.DeletionPolicy
}

// GetProviderConfigReference of this TransitGatewayRouteTable.
func (mg *TransitGatewayRouteTable) GetProviderConfigReference() *xpv1.Reference {
=======
SetProviderReference of this RouteTableAssociation.
Deprecated: Use SetProviderConfigReference.
*/
func (mg *RouteTableAssociation) SetProviderReference(r *xpv1.Reference) {
	mg.Spec.ProviderReference = r
}

// SetWriteConnectionSecretToReference of this RouteTableAssociation.
func (mg *RouteTableAssociation) SetWriteConnectionSecretToReference(r *xpv1.SecretReference) {
	mg.Spec.WriteConnectionSecretToReference = r
}

// GetCondition of this SecurityGroup.
func (mg *SecurityGroup) GetCondition(ct xpv1.ConditionType) xpv1.Condition {
	return mg.Status.GetCondition(ct)
}

// GetDeletionPolicy of this SecurityGroup.
func (mg *SecurityGroup) GetDeletionPolicy() xpv1.DeletionPolicy {
	return mg.Spec.DeletionPolicy
}

// GetProviderConfigReference of this SecurityGroup.
func (mg *SecurityGroup) GetProviderConfigReference() *xpv1.Reference {
>>>>>>> 36ad04b7 (ec2: add late initializer exceptions and examples)
	return mg.Spec.ProviderConfigReference
}

/*
<<<<<<< HEAD
GetProviderReference of this TransitGatewayRouteTable.
Deprecated: Use GetProviderConfigReference.
*/
func (mg *TransitGatewayRouteTable) GetProviderReference() *xpv1.Reference {
	return mg.Spec.ProviderReference
}

// GetWriteConnectionSecretToReference of this TransitGatewayRouteTable.
func (mg *TransitGatewayRouteTable) GetWriteConnectionSecretToReference() *xpv1.SecretReference {
	return mg.Spec.WriteConnectionSecretToReference
}

// SetConditions of this TransitGatewayRouteTable.
func (mg *TransitGatewayRouteTable) SetConditions(c ...xpv1.Condition) {
	mg.Status.SetConditions(c...)
}

// SetDeletionPolicy of this TransitGatewayRouteTable.
func (mg *TransitGatewayRouteTable) SetDeletionPolicy(r xpv1.DeletionPolicy) {
	mg.Spec.DeletionPolicy = r
}

// SetProviderConfigReference of this TransitGatewayRouteTable.
func (mg *TransitGatewayRouteTable) SetProviderConfigReference(r *xpv1.Reference) {
=======
GetProviderReference of this SecurityGroup.
Deprecated: Use GetProviderConfigReference.
*/
func (mg *SecurityGroup) GetProviderReference() *xpv1.Reference {
	return mg.Spec.ProviderReference
}

// GetWriteConnectionSecretToReference of this SecurityGroup.
func (mg *SecurityGroup) GetWriteConnectionSecretToReference() *xpv1.SecretReference {
	return mg.Spec.WriteConnectionSecretToReference
}

// SetConditions of this SecurityGroup.
func (mg *SecurityGroup) SetConditions(c ...xpv1.Condition) {
	mg.Status.SetConditions(c...)
}

// SetDeletionPolicy of this SecurityGroup.
func (mg *SecurityGroup) SetDeletionPolicy(r xpv1.DeletionPolicy) {
	mg.Spec.DeletionPolicy = r
}

// SetProviderConfigReference of this SecurityGroup.
func (mg *SecurityGroup) SetProviderConfigReference(r *xpv1.Reference) {
>>>>>>> 36ad04b7 (ec2: add late initializer exceptions and examples)
	mg.Spec.ProviderConfigReference = r
}

/*
<<<<<<< HEAD
SetProviderReference of this TransitGatewayRouteTable.
Deprecated: Use SetProviderConfigReference.
*/
func (mg *TransitGatewayRouteTable) SetProviderReference(r *xpv1.Reference) {
	mg.Spec.ProviderReference = r
}

// SetWriteConnectionSecretToReference of this TransitGatewayRouteTable.
func (mg *TransitGatewayRouteTable) SetWriteConnectionSecretToReference(r *xpv1.SecretReference) {
	mg.Spec.WriteConnectionSecretToReference = r
}

// GetCondition of this TransitGatewayRouteTableAssociation.
func (mg *TransitGatewayRouteTableAssociation) GetCondition(ct xpv1.ConditionType) xpv1.Condition {
	return mg.Status.GetCondition(ct)
}

// GetDeletionPolicy of this TransitGatewayRouteTableAssociation.
func (mg *TransitGatewayRouteTableAssociation) GetDeletionPolicy() xpv1.DeletionPolicy {
	return mg.Spec.DeletionPolicy
}

// GetProviderConfigReference of this TransitGatewayRouteTableAssociation.
func (mg *TransitGatewayRouteTableAssociation) GetProviderConfigReference() *xpv1.Reference {
=======
SetProviderReference of this SecurityGroup.
Deprecated: Use SetProviderConfigReference.
*/
func (mg *SecurityGroup) SetProviderReference(r *xpv1.Reference) {
	mg.Spec.ProviderReference = r
}

// SetWriteConnectionSecretToReference of this SecurityGroup.
func (mg *SecurityGroup) SetWriteConnectionSecretToReference(r *xpv1.SecretReference) {
	mg.Spec.WriteConnectionSecretToReference = r
}

// GetCondition of this SecurityGroupRule.
func (mg *SecurityGroupRule) GetCondition(ct xpv1.ConditionType) xpv1.Condition {
	return mg.Status.GetCondition(ct)
}

// GetDeletionPolicy of this SecurityGroupRule.
func (mg *SecurityGroupRule) GetDeletionPolicy() xpv1.DeletionPolicy {
	return mg.Spec.DeletionPolicy
}

// GetProviderConfigReference of this SecurityGroupRule.
func (mg *SecurityGroupRule) GetProviderConfigReference() *xpv1.Reference {
>>>>>>> 36ad04b7 (ec2: add late initializer exceptions and examples)
	return mg.Spec.ProviderConfigReference
}

/*
<<<<<<< HEAD
GetProviderReference of this TransitGatewayRouteTableAssociation.
Deprecated: Use GetProviderConfigReference.
*/
func (mg *TransitGatewayRouteTableAssociation) GetProviderReference() *xpv1.Reference {
	return mg.Spec.ProviderReference
}

// GetWriteConnectionSecretToReference of this TransitGatewayRouteTableAssociation.
func (mg *TransitGatewayRouteTableAssociation) GetWriteConnectionSecretToReference() *xpv1.SecretReference {
	return mg.Spec.WriteConnectionSecretToReference
}

// SetConditions of this TransitGatewayRouteTableAssociation.
func (mg *TransitGatewayRouteTableAssociation) SetConditions(c ...xpv1.Condition) {
	mg.Status.SetConditions(c...)
}

// SetDeletionPolicy of this TransitGatewayRouteTableAssociation.
func (mg *TransitGatewayRouteTableAssociation) SetDeletionPolicy(r xpv1.DeletionPolicy) {
	mg.Spec.DeletionPolicy = r
}

// SetProviderConfigReference of this TransitGatewayRouteTableAssociation.
func (mg *TransitGatewayRouteTableAssociation) SetProviderConfigReference(r *xpv1.Reference) {
=======
GetProviderReference of this SecurityGroupRule.
Deprecated: Use GetProviderConfigReference.
*/
func (mg *SecurityGroupRule) GetProviderReference() *xpv1.Reference {
	return mg.Spec.ProviderReference
}

// GetWriteConnectionSecretToReference of this SecurityGroupRule.
func (mg *SecurityGroupRule) GetWriteConnectionSecretToReference() *xpv1.SecretReference {
	return mg.Spec.WriteConnectionSecretToReference
}

// SetConditions of this SecurityGroupRule.
func (mg *SecurityGroupRule) SetConditions(c ...xpv1.Condition) {
	mg.Status.SetConditions(c...)
}

// SetDeletionPolicy of this SecurityGroupRule.
func (mg *SecurityGroupRule) SetDeletionPolicy(r xpv1.DeletionPolicy) {
	mg.Spec.DeletionPolicy = r
}

// SetProviderConfigReference of this SecurityGroupRule.
func (mg *SecurityGroupRule) SetProviderConfigReference(r *xpv1.Reference) {
>>>>>>> 36ad04b7 (ec2: add late initializer exceptions and examples)
	mg.Spec.ProviderConfigReference = r
}

/*
<<<<<<< HEAD
SetProviderReference of this TransitGatewayRouteTableAssociation.
Deprecated: Use SetProviderConfigReference.
*/
func (mg *TransitGatewayRouteTableAssociation) SetProviderReference(r *xpv1.Reference) {
	mg.Spec.ProviderReference = r
}

// SetWriteConnectionSecretToReference of this TransitGatewayRouteTableAssociation.
func (mg *TransitGatewayRouteTableAssociation) SetWriteConnectionSecretToReference(r *xpv1.SecretReference) {
	mg.Spec.WriteConnectionSecretToReference = r
}

// GetCondition of this TransitGatewayVpcAttachment.
func (mg *TransitGatewayVpcAttachment) GetCondition(ct xpv1.ConditionType) xpv1.Condition {
	return mg.Status.GetCondition(ct)
}

// GetDeletionPolicy of this TransitGatewayVpcAttachment.
func (mg *TransitGatewayVpcAttachment) GetDeletionPolicy() xpv1.DeletionPolicy {
	return mg.Spec.DeletionPolicy
}

// GetProviderConfigReference of this TransitGatewayVpcAttachment.
func (mg *TransitGatewayVpcAttachment) GetProviderConfigReference() *xpv1.Reference {
=======
SetProviderReference of this SecurityGroupRule.
Deprecated: Use SetProviderConfigReference.
*/
func (mg *SecurityGroupRule) SetProviderReference(r *xpv1.Reference) {
	mg.Spec.ProviderReference = r
}

// SetWriteConnectionSecretToReference of this SecurityGroupRule.
func (mg *SecurityGroupRule) SetWriteConnectionSecretToReference(r *xpv1.SecretReference) {
	mg.Spec.WriteConnectionSecretToReference = r
}

// GetCondition of this Subnet.
func (mg *Subnet) GetCondition(ct xpv1.ConditionType) xpv1.Condition {
	return mg.Status.GetCondition(ct)
}

// GetDeletionPolicy of this Subnet.
func (mg *Subnet) GetDeletionPolicy() xpv1.DeletionPolicy {
	return mg.Spec.DeletionPolicy
}

// GetProviderConfigReference of this Subnet.
func (mg *Subnet) GetProviderConfigReference() *xpv1.Reference {
>>>>>>> 36ad04b7 (ec2: add late initializer exceptions and examples)
	return mg.Spec.ProviderConfigReference
}

/*
<<<<<<< HEAD
GetProviderReference of this TransitGatewayVpcAttachment.
Deprecated: Use GetProviderConfigReference.
*/
func (mg *TransitGatewayVpcAttachment) GetProviderReference() *xpv1.Reference {
	return mg.Spec.ProviderReference
}

// GetWriteConnectionSecretToReference of this TransitGatewayVpcAttachment.
func (mg *TransitGatewayVpcAttachment) GetWriteConnectionSecretToReference() *xpv1.SecretReference {
	return mg.Spec.WriteConnectionSecretToReference
}

// SetConditions of this TransitGatewayVpcAttachment.
func (mg *TransitGatewayVpcAttachment) SetConditions(c ...xpv1.Condition) {
	mg.Status.SetConditions(c...)
}

// SetDeletionPolicy of this TransitGatewayVpcAttachment.
func (mg *TransitGatewayVpcAttachment) SetDeletionPolicy(r xpv1.DeletionPolicy) {
	mg.Spec.DeletionPolicy = r
}

// SetProviderConfigReference of this TransitGatewayVpcAttachment.
func (mg *TransitGatewayVpcAttachment) SetProviderConfigReference(r *xpv1.Reference) {
=======
GetProviderReference of this Subnet.
Deprecated: Use GetProviderConfigReference.
*/
func (mg *Subnet) GetProviderReference() *xpv1.Reference {
	return mg.Spec.ProviderReference
}

// GetWriteConnectionSecretToReference of this Subnet.
func (mg *Subnet) GetWriteConnectionSecretToReference() *xpv1.SecretReference {
	return mg.Spec.WriteConnectionSecretToReference
}

// SetConditions of this Subnet.
func (mg *Subnet) SetConditions(c ...xpv1.Condition) {
	mg.Status.SetConditions(c...)
}

// SetDeletionPolicy of this Subnet.
func (mg *Subnet) SetDeletionPolicy(r xpv1.DeletionPolicy) {
	mg.Spec.DeletionPolicy = r
}

// SetProviderConfigReference of this Subnet.
func (mg *Subnet) SetProviderConfigReference(r *xpv1.Reference) {
>>>>>>> 36ad04b7 (ec2: add late initializer exceptions and examples)
	mg.Spec.ProviderConfigReference = r
}

/*
<<<<<<< HEAD
SetProviderReference of this TransitGatewayVpcAttachment.
Deprecated: Use SetProviderConfigReference.
*/
func (mg *TransitGatewayVpcAttachment) SetProviderReference(r *xpv1.Reference) {
	mg.Spec.ProviderReference = r
}

// SetWriteConnectionSecretToReference of this TransitGatewayVpcAttachment.
func (mg *TransitGatewayVpcAttachment) SetWriteConnectionSecretToReference(r *xpv1.SecretReference) {
	mg.Spec.WriteConnectionSecretToReference = r
}

// GetCondition of this TransitGatewayVpcAttachmentAccepter.
func (mg *TransitGatewayVpcAttachmentAccepter) GetCondition(ct xpv1.ConditionType) xpv1.Condition {
	return mg.Status.GetCondition(ct)
}

// GetDeletionPolicy of this TransitGatewayVpcAttachmentAccepter.
func (mg *TransitGatewayVpcAttachmentAccepter) GetDeletionPolicy() xpv1.DeletionPolicy {
	return mg.Spec.DeletionPolicy
}

// GetProviderConfigReference of this TransitGatewayVpcAttachmentAccepter.
func (mg *TransitGatewayVpcAttachmentAccepter) GetProviderConfigReference() *xpv1.Reference {
=======
SetProviderReference of this Subnet.
Deprecated: Use SetProviderConfigReference.
*/
func (mg *Subnet) SetProviderReference(r *xpv1.Reference) {
	mg.Spec.ProviderReference = r
}

// SetWriteConnectionSecretToReference of this Subnet.
func (mg *Subnet) SetWriteConnectionSecretToReference(r *xpv1.SecretReference) {
	mg.Spec.WriteConnectionSecretToReference = r
}

// GetCondition of this VPC.
func (mg *VPC) GetCondition(ct xpv1.ConditionType) xpv1.Condition {
	return mg.Status.GetCondition(ct)
}

// GetDeletionPolicy of this VPC.
func (mg *VPC) GetDeletionPolicy() xpv1.DeletionPolicy {
	return mg.Spec.DeletionPolicy
}

// GetProviderConfigReference of this VPC.
func (mg *VPC) GetProviderConfigReference() *xpv1.Reference {
>>>>>>> 36ad04b7 (ec2: add late initializer exceptions and examples)
	return mg.Spec.ProviderConfigReference
}

/*
<<<<<<< HEAD
GetProviderReference of this TransitGatewayVpcAttachmentAccepter.
Deprecated: Use GetProviderConfigReference.
*/
func (mg *TransitGatewayVpcAttachmentAccepter) GetProviderReference() *xpv1.Reference {
	return mg.Spec.ProviderReference
}

// GetWriteConnectionSecretToReference of this TransitGatewayVpcAttachmentAccepter.
func (mg *TransitGatewayVpcAttachmentAccepter) GetWriteConnectionSecretToReference() *xpv1.SecretReference {
	return mg.Spec.WriteConnectionSecretToReference
}

// SetConditions of this TransitGatewayVpcAttachmentAccepter.
func (mg *TransitGatewayVpcAttachmentAccepter) SetConditions(c ...xpv1.Condition) {
	mg.Status.SetConditions(c...)
}

// SetDeletionPolicy of this TransitGatewayVpcAttachmentAccepter.
func (mg *TransitGatewayVpcAttachmentAccepter) SetDeletionPolicy(r xpv1.DeletionPolicy) {
	mg.Spec.DeletionPolicy = r
}

// SetProviderConfigReference of this TransitGatewayVpcAttachmentAccepter.
func (mg *TransitGatewayVpcAttachmentAccepter) SetProviderConfigReference(r *xpv1.Reference) {
=======
GetProviderReference of this VPC.
Deprecated: Use GetProviderConfigReference.
*/
func (mg *VPC) GetProviderReference() *xpv1.Reference {
	return mg.Spec.ProviderReference
}

// GetWriteConnectionSecretToReference of this VPC.
func (mg *VPC) GetWriteConnectionSecretToReference() *xpv1.SecretReference {
	return mg.Spec.WriteConnectionSecretToReference
}

// SetConditions of this VPC.
func (mg *VPC) SetConditions(c ...xpv1.Condition) {
	mg.Status.SetConditions(c...)
}

// SetDeletionPolicy of this VPC.
func (mg *VPC) SetDeletionPolicy(r xpv1.DeletionPolicy) {
	mg.Spec.DeletionPolicy = r
}

// SetProviderConfigReference of this VPC.
func (mg *VPC) SetProviderConfigReference(r *xpv1.Reference) {
>>>>>>> 36ad04b7 (ec2: add late initializer exceptions and examples)
	mg.Spec.ProviderConfigReference = r
}

/*
<<<<<<< HEAD
SetProviderReference of this TransitGatewayVpcAttachmentAccepter.
Deprecated: Use SetProviderConfigReference.
*/
func (mg *TransitGatewayVpcAttachmentAccepter) SetProviderReference(r *xpv1.Reference) {
	mg.Spec.ProviderReference = r
}

// SetWriteConnectionSecretToReference of this TransitGatewayVpcAttachmentAccepter.
func (mg *TransitGatewayVpcAttachmentAccepter) SetWriteConnectionSecretToReference(r *xpv1.SecretReference) {
=======
SetProviderReference of this VPC.
Deprecated: Use SetProviderConfigReference.
*/
func (mg *VPC) SetProviderReference(r *xpv1.Reference) {
	mg.Spec.ProviderReference = r
}

// SetWriteConnectionSecretToReference of this VPC.
func (mg *VPC) SetWriteConnectionSecretToReference(r *xpv1.SecretReference) {
	mg.Spec.WriteConnectionSecretToReference = r
}

// GetCondition of this VpcEndpoint.
func (mg *VpcEndpoint) GetCondition(ct xpv1.ConditionType) xpv1.Condition {
	return mg.Status.GetCondition(ct)
}

// GetDeletionPolicy of this VpcEndpoint.
func (mg *VpcEndpoint) GetDeletionPolicy() xpv1.DeletionPolicy {
	return mg.Spec.DeletionPolicy
}

// GetProviderConfigReference of this VpcEndpoint.
func (mg *VpcEndpoint) GetProviderConfigReference() *xpv1.Reference {
	return mg.Spec.ProviderConfigReference
}

/*
GetProviderReference of this VpcEndpoint.
Deprecated: Use GetProviderConfigReference.
*/
func (mg *VpcEndpoint) GetProviderReference() *xpv1.Reference {
	return mg.Spec.ProviderReference
}

// GetWriteConnectionSecretToReference of this VpcEndpoint.
func (mg *VpcEndpoint) GetWriteConnectionSecretToReference() *xpv1.SecretReference {
	return mg.Spec.WriteConnectionSecretToReference
}

// SetConditions of this VpcEndpoint.
func (mg *VpcEndpoint) SetConditions(c ...xpv1.Condition) {
	mg.Status.SetConditions(c...)
}

// SetDeletionPolicy of this VpcEndpoint.
func (mg *VpcEndpoint) SetDeletionPolicy(r xpv1.DeletionPolicy) {
	mg.Spec.DeletionPolicy = r
}

// SetProviderConfigReference of this VpcEndpoint.
func (mg *VpcEndpoint) SetProviderConfigReference(r *xpv1.Reference) {
	mg.Spec.ProviderConfigReference = r
}

/*
SetProviderReference of this VpcEndpoint.
Deprecated: Use SetProviderConfigReference.
*/
func (mg *VpcEndpoint) SetProviderReference(r *xpv1.Reference) {
	mg.Spec.ProviderReference = r
}

// SetWriteConnectionSecretToReference of this VpcEndpoint.
func (mg *VpcEndpoint) SetWriteConnectionSecretToReference(r *xpv1.SecretReference) {
	mg.Spec.WriteConnectionSecretToReference = r
}

// GetCondition of this VpcPeeringConnection.
func (mg *VpcPeeringConnection) GetCondition(ct xpv1.ConditionType) xpv1.Condition {
	return mg.Status.GetCondition(ct)
}

// GetDeletionPolicy of this VpcPeeringConnection.
func (mg *VpcPeeringConnection) GetDeletionPolicy() xpv1.DeletionPolicy {
	return mg.Spec.DeletionPolicy
}

// GetProviderConfigReference of this VpcPeeringConnection.
func (mg *VpcPeeringConnection) GetProviderConfigReference() *xpv1.Reference {
	return mg.Spec.ProviderConfigReference
}

/*
GetProviderReference of this VpcPeeringConnection.
Deprecated: Use GetProviderConfigReference.
*/
func (mg *VpcPeeringConnection) GetProviderReference() *xpv1.Reference {
	return mg.Spec.ProviderReference
}

// GetWriteConnectionSecretToReference of this VpcPeeringConnection.
func (mg *VpcPeeringConnection) GetWriteConnectionSecretToReference() *xpv1.SecretReference {
	return mg.Spec.WriteConnectionSecretToReference
}

// SetConditions of this VpcPeeringConnection.
func (mg *VpcPeeringConnection) SetConditions(c ...xpv1.Condition) {
	mg.Status.SetConditions(c...)
}

// SetDeletionPolicy of this VpcPeeringConnection.
func (mg *VpcPeeringConnection) SetDeletionPolicy(r xpv1.DeletionPolicy) {
	mg.Spec.DeletionPolicy = r
}

// SetProviderConfigReference of this VpcPeeringConnection.
func (mg *VpcPeeringConnection) SetProviderConfigReference(r *xpv1.Reference) {
	mg.Spec.ProviderConfigReference = r
}

/*
SetProviderReference of this VpcPeeringConnection.
Deprecated: Use SetProviderConfigReference.
*/
func (mg *VpcPeeringConnection) SetProviderReference(r *xpv1.Reference) {
	mg.Spec.ProviderReference = r
}

// SetWriteConnectionSecretToReference of this VpcPeeringConnection.
func (mg *VpcPeeringConnection) SetWriteConnectionSecretToReference(r *xpv1.SecretReference) {
>>>>>>> 36ad04b7 (ec2: add late initializer exceptions and examples)
	mg.Spec.WriteConnectionSecretToReference = r
}
