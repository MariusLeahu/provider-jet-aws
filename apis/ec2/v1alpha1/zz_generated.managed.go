/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/
// Code generated by angryjet. DO NOT EDIT.

package v1alpha1

import xpv1 "github.com/crossplane/crossplane-runtime/apis/common/v1"

// GetCondition of this Ec2AvailabilityZoneGroup.
func (mg *Ec2AvailabilityZoneGroup) GetCondition(ct xpv1.ConditionType) xpv1.Condition {
	return mg.Status.GetCondition(ct)
}

// GetDeletionPolicy of this Ec2AvailabilityZoneGroup.
func (mg *Ec2AvailabilityZoneGroup) GetDeletionPolicy() xpv1.DeletionPolicy {
	return mg.Spec.DeletionPolicy
}

// GetProviderConfigReference of this Ec2AvailabilityZoneGroup.
func (mg *Ec2AvailabilityZoneGroup) GetProviderConfigReference() *xpv1.Reference {
	return mg.Spec.ProviderConfigReference
}

/*
GetProviderReference of this Ec2AvailabilityZoneGroup.
Deprecated: Use GetProviderConfigReference.
*/
func (mg *Ec2AvailabilityZoneGroup) GetProviderReference() *xpv1.Reference {
	return mg.Spec.ProviderReference
}

// GetWriteConnectionSecretToReference of this Ec2AvailabilityZoneGroup.
func (mg *Ec2AvailabilityZoneGroup) GetWriteConnectionSecretToReference() *xpv1.SecretReference {
	return mg.Spec.WriteConnectionSecretToReference
}

// SetConditions of this Ec2AvailabilityZoneGroup.
func (mg *Ec2AvailabilityZoneGroup) SetConditions(c ...xpv1.Condition) {
	mg.Status.SetConditions(c...)
}

// SetDeletionPolicy of this Ec2AvailabilityZoneGroup.
func (mg *Ec2AvailabilityZoneGroup) SetDeletionPolicy(r xpv1.DeletionPolicy) {
	mg.Spec.DeletionPolicy = r
}

// SetProviderConfigReference of this Ec2AvailabilityZoneGroup.
func (mg *Ec2AvailabilityZoneGroup) SetProviderConfigReference(r *xpv1.Reference) {
	mg.Spec.ProviderConfigReference = r
}

/*
SetProviderReference of this Ec2AvailabilityZoneGroup.
Deprecated: Use SetProviderConfigReference.
*/
func (mg *Ec2AvailabilityZoneGroup) SetProviderReference(r *xpv1.Reference) {
	mg.Spec.ProviderReference = r
}

// SetWriteConnectionSecretToReference of this Ec2AvailabilityZoneGroup.
func (mg *Ec2AvailabilityZoneGroup) SetWriteConnectionSecretToReference(r *xpv1.SecretReference) {
	mg.Spec.WriteConnectionSecretToReference = r
}

// GetCondition of this Ec2CapacityReservation.
func (mg *Ec2CapacityReservation) GetCondition(ct xpv1.ConditionType) xpv1.Condition {
	return mg.Status.GetCondition(ct)
}

// GetDeletionPolicy of this Ec2CapacityReservation.
func (mg *Ec2CapacityReservation) GetDeletionPolicy() xpv1.DeletionPolicy {
	return mg.Spec.DeletionPolicy
}

// GetProviderConfigReference of this Ec2CapacityReservation.
func (mg *Ec2CapacityReservation) GetProviderConfigReference() *xpv1.Reference {
	return mg.Spec.ProviderConfigReference
}

/*
GetProviderReference of this Ec2CapacityReservation.
Deprecated: Use GetProviderConfigReference.
*/
func (mg *Ec2CapacityReservation) GetProviderReference() *xpv1.Reference {
	return mg.Spec.ProviderReference
}

// GetWriteConnectionSecretToReference of this Ec2CapacityReservation.
func (mg *Ec2CapacityReservation) GetWriteConnectionSecretToReference() *xpv1.SecretReference {
	return mg.Spec.WriteConnectionSecretToReference
}

// SetConditions of this Ec2CapacityReservation.
func (mg *Ec2CapacityReservation) SetConditions(c ...xpv1.Condition) {
	mg.Status.SetConditions(c...)
}

// SetDeletionPolicy of this Ec2CapacityReservation.
func (mg *Ec2CapacityReservation) SetDeletionPolicy(r xpv1.DeletionPolicy) {
	mg.Spec.DeletionPolicy = r
}

// SetProviderConfigReference of this Ec2CapacityReservation.
func (mg *Ec2CapacityReservation) SetProviderConfigReference(r *xpv1.Reference) {
	mg.Spec.ProviderConfigReference = r
}

/*
SetProviderReference of this Ec2CapacityReservation.
Deprecated: Use SetProviderConfigReference.
*/
func (mg *Ec2CapacityReservation) SetProviderReference(r *xpv1.Reference) {
	mg.Spec.ProviderReference = r
}

// SetWriteConnectionSecretToReference of this Ec2CapacityReservation.
func (mg *Ec2CapacityReservation) SetWriteConnectionSecretToReference(r *xpv1.SecretReference) {
	mg.Spec.WriteConnectionSecretToReference = r
}

// GetCondition of this Ec2CarrierGateway.
func (mg *Ec2CarrierGateway) GetCondition(ct xpv1.ConditionType) xpv1.Condition {
	return mg.Status.GetCondition(ct)
}

// GetDeletionPolicy of this Ec2CarrierGateway.
func (mg *Ec2CarrierGateway) GetDeletionPolicy() xpv1.DeletionPolicy {
	return mg.Spec.DeletionPolicy
}

// GetProviderConfigReference of this Ec2CarrierGateway.
func (mg *Ec2CarrierGateway) GetProviderConfigReference() *xpv1.Reference {
	return mg.Spec.ProviderConfigReference
}

/*
GetProviderReference of this Ec2CarrierGateway.
Deprecated: Use GetProviderConfigReference.
*/
func (mg *Ec2CarrierGateway) GetProviderReference() *xpv1.Reference {
	return mg.Spec.ProviderReference
}

// GetWriteConnectionSecretToReference of this Ec2CarrierGateway.
func (mg *Ec2CarrierGateway) GetWriteConnectionSecretToReference() *xpv1.SecretReference {
	return mg.Spec.WriteConnectionSecretToReference
}

// SetConditions of this Ec2CarrierGateway.
func (mg *Ec2CarrierGateway) SetConditions(c ...xpv1.Condition) {
	mg.Status.SetConditions(c...)
}

// SetDeletionPolicy of this Ec2CarrierGateway.
func (mg *Ec2CarrierGateway) SetDeletionPolicy(r xpv1.DeletionPolicy) {
	mg.Spec.DeletionPolicy = r
}

// SetProviderConfigReference of this Ec2CarrierGateway.
func (mg *Ec2CarrierGateway) SetProviderConfigReference(r *xpv1.Reference) {
	mg.Spec.ProviderConfigReference = r
}

/*
SetProviderReference of this Ec2CarrierGateway.
Deprecated: Use SetProviderConfigReference.
*/
func (mg *Ec2CarrierGateway) SetProviderReference(r *xpv1.Reference) {
	mg.Spec.ProviderReference = r
}

// SetWriteConnectionSecretToReference of this Ec2CarrierGateway.
func (mg *Ec2CarrierGateway) SetWriteConnectionSecretToReference(r *xpv1.SecretReference) {
	mg.Spec.WriteConnectionSecretToReference = r
}

// GetCondition of this Ec2ClientVpnAuthorizationRule.
func (mg *Ec2ClientVpnAuthorizationRule) GetCondition(ct xpv1.ConditionType) xpv1.Condition {
	return mg.Status.GetCondition(ct)
}

// GetDeletionPolicy of this Ec2ClientVpnAuthorizationRule.
func (mg *Ec2ClientVpnAuthorizationRule) GetDeletionPolicy() xpv1.DeletionPolicy {
	return mg.Spec.DeletionPolicy
}

// GetProviderConfigReference of this Ec2ClientVpnAuthorizationRule.
func (mg *Ec2ClientVpnAuthorizationRule) GetProviderConfigReference() *xpv1.Reference {
	return mg.Spec.ProviderConfigReference
}

/*
GetProviderReference of this Ec2ClientVpnAuthorizationRule.
Deprecated: Use GetProviderConfigReference.
*/
func (mg *Ec2ClientVpnAuthorizationRule) GetProviderReference() *xpv1.Reference {
	return mg.Spec.ProviderReference
}

// GetWriteConnectionSecretToReference of this Ec2ClientVpnAuthorizationRule.
func (mg *Ec2ClientVpnAuthorizationRule) GetWriteConnectionSecretToReference() *xpv1.SecretReference {
	return mg.Spec.WriteConnectionSecretToReference
}

// SetConditions of this Ec2ClientVpnAuthorizationRule.
func (mg *Ec2ClientVpnAuthorizationRule) SetConditions(c ...xpv1.Condition) {
	mg.Status.SetConditions(c...)
}

// SetDeletionPolicy of this Ec2ClientVpnAuthorizationRule.
func (mg *Ec2ClientVpnAuthorizationRule) SetDeletionPolicy(r xpv1.DeletionPolicy) {
	mg.Spec.DeletionPolicy = r
}

// SetProviderConfigReference of this Ec2ClientVpnAuthorizationRule.
func (mg *Ec2ClientVpnAuthorizationRule) SetProviderConfigReference(r *xpv1.Reference) {
	mg.Spec.ProviderConfigReference = r
}

/*
SetProviderReference of this Ec2ClientVpnAuthorizationRule.
Deprecated: Use SetProviderConfigReference.
*/
func (mg *Ec2ClientVpnAuthorizationRule) SetProviderReference(r *xpv1.Reference) {
	mg.Spec.ProviderReference = r
}

// SetWriteConnectionSecretToReference of this Ec2ClientVpnAuthorizationRule.
func (mg *Ec2ClientVpnAuthorizationRule) SetWriteConnectionSecretToReference(r *xpv1.SecretReference) {
	mg.Spec.WriteConnectionSecretToReference = r
}

// GetCondition of this Ec2ClientVpnEndpoint.
func (mg *Ec2ClientVpnEndpoint) GetCondition(ct xpv1.ConditionType) xpv1.Condition {
	return mg.Status.GetCondition(ct)
}

// GetDeletionPolicy of this Ec2ClientVpnEndpoint.
func (mg *Ec2ClientVpnEndpoint) GetDeletionPolicy() xpv1.DeletionPolicy {
	return mg.Spec.DeletionPolicy
}

// GetProviderConfigReference of this Ec2ClientVpnEndpoint.
func (mg *Ec2ClientVpnEndpoint) GetProviderConfigReference() *xpv1.Reference {
	return mg.Spec.ProviderConfigReference
}

/*
GetProviderReference of this Ec2ClientVpnEndpoint.
Deprecated: Use GetProviderConfigReference.
*/
func (mg *Ec2ClientVpnEndpoint) GetProviderReference() *xpv1.Reference {
	return mg.Spec.ProviderReference
}

// GetWriteConnectionSecretToReference of this Ec2ClientVpnEndpoint.
func (mg *Ec2ClientVpnEndpoint) GetWriteConnectionSecretToReference() *xpv1.SecretReference {
	return mg.Spec.WriteConnectionSecretToReference
}

// SetConditions of this Ec2ClientVpnEndpoint.
func (mg *Ec2ClientVpnEndpoint) SetConditions(c ...xpv1.Condition) {
	mg.Status.SetConditions(c...)
}

// SetDeletionPolicy of this Ec2ClientVpnEndpoint.
func (mg *Ec2ClientVpnEndpoint) SetDeletionPolicy(r xpv1.DeletionPolicy) {
	mg.Spec.DeletionPolicy = r
}

// SetProviderConfigReference of this Ec2ClientVpnEndpoint.
func (mg *Ec2ClientVpnEndpoint) SetProviderConfigReference(r *xpv1.Reference) {
	mg.Spec.ProviderConfigReference = r
}

/*
SetProviderReference of this Ec2ClientVpnEndpoint.
Deprecated: Use SetProviderConfigReference.
*/
func (mg *Ec2ClientVpnEndpoint) SetProviderReference(r *xpv1.Reference) {
	mg.Spec.ProviderReference = r
}

// SetWriteConnectionSecretToReference of this Ec2ClientVpnEndpoint.
func (mg *Ec2ClientVpnEndpoint) SetWriteConnectionSecretToReference(r *xpv1.SecretReference) {
	mg.Spec.WriteConnectionSecretToReference = r
}

// GetCondition of this Ec2ClientVpnNetworkAssociation.
func (mg *Ec2ClientVpnNetworkAssociation) GetCondition(ct xpv1.ConditionType) xpv1.Condition {
	return mg.Status.GetCondition(ct)
}

// GetDeletionPolicy of this Ec2ClientVpnNetworkAssociation.
func (mg *Ec2ClientVpnNetworkAssociation) GetDeletionPolicy() xpv1.DeletionPolicy {
	return mg.Spec.DeletionPolicy
}

// GetProviderConfigReference of this Ec2ClientVpnNetworkAssociation.
func (mg *Ec2ClientVpnNetworkAssociation) GetProviderConfigReference() *xpv1.Reference {
	return mg.Spec.ProviderConfigReference
}

/*
GetProviderReference of this Ec2ClientVpnNetworkAssociation.
Deprecated: Use GetProviderConfigReference.
*/
func (mg *Ec2ClientVpnNetworkAssociation) GetProviderReference() *xpv1.Reference {
	return mg.Spec.ProviderReference
}

// GetWriteConnectionSecretToReference of this Ec2ClientVpnNetworkAssociation.
func (mg *Ec2ClientVpnNetworkAssociation) GetWriteConnectionSecretToReference() *xpv1.SecretReference {
	return mg.Spec.WriteConnectionSecretToReference
}

// SetConditions of this Ec2ClientVpnNetworkAssociation.
func (mg *Ec2ClientVpnNetworkAssociation) SetConditions(c ...xpv1.Condition) {
	mg.Status.SetConditions(c...)
}

// SetDeletionPolicy of this Ec2ClientVpnNetworkAssociation.
func (mg *Ec2ClientVpnNetworkAssociation) SetDeletionPolicy(r xpv1.DeletionPolicy) {
	mg.Spec.DeletionPolicy = r
}

// SetProviderConfigReference of this Ec2ClientVpnNetworkAssociation.
func (mg *Ec2ClientVpnNetworkAssociation) SetProviderConfigReference(r *xpv1.Reference) {
	mg.Spec.ProviderConfigReference = r
}

/*
SetProviderReference of this Ec2ClientVpnNetworkAssociation.
Deprecated: Use SetProviderConfigReference.
*/
func (mg *Ec2ClientVpnNetworkAssociation) SetProviderReference(r *xpv1.Reference) {
	mg.Spec.ProviderReference = r
}

// SetWriteConnectionSecretToReference of this Ec2ClientVpnNetworkAssociation.
func (mg *Ec2ClientVpnNetworkAssociation) SetWriteConnectionSecretToReference(r *xpv1.SecretReference) {
	mg.Spec.WriteConnectionSecretToReference = r
}

// GetCondition of this Ec2ClientVpnRoute.
func (mg *Ec2ClientVpnRoute) GetCondition(ct xpv1.ConditionType) xpv1.Condition {
	return mg.Status.GetCondition(ct)
}

// GetDeletionPolicy of this Ec2ClientVpnRoute.
func (mg *Ec2ClientVpnRoute) GetDeletionPolicy() xpv1.DeletionPolicy {
	return mg.Spec.DeletionPolicy
}

// GetProviderConfigReference of this Ec2ClientVpnRoute.
func (mg *Ec2ClientVpnRoute) GetProviderConfigReference() *xpv1.Reference {
	return mg.Spec.ProviderConfigReference
}

/*
GetProviderReference of this Ec2ClientVpnRoute.
Deprecated: Use GetProviderConfigReference.
*/
func (mg *Ec2ClientVpnRoute) GetProviderReference() *xpv1.Reference {
	return mg.Spec.ProviderReference
}

// GetWriteConnectionSecretToReference of this Ec2ClientVpnRoute.
func (mg *Ec2ClientVpnRoute) GetWriteConnectionSecretToReference() *xpv1.SecretReference {
	return mg.Spec.WriteConnectionSecretToReference
}

// SetConditions of this Ec2ClientVpnRoute.
func (mg *Ec2ClientVpnRoute) SetConditions(c ...xpv1.Condition) {
	mg.Status.SetConditions(c...)
}

// SetDeletionPolicy of this Ec2ClientVpnRoute.
func (mg *Ec2ClientVpnRoute) SetDeletionPolicy(r xpv1.DeletionPolicy) {
	mg.Spec.DeletionPolicy = r
}

// SetProviderConfigReference of this Ec2ClientVpnRoute.
func (mg *Ec2ClientVpnRoute) SetProviderConfigReference(r *xpv1.Reference) {
	mg.Spec.ProviderConfigReference = r
}

/*
SetProviderReference of this Ec2ClientVpnRoute.
Deprecated: Use SetProviderConfigReference.
*/
func (mg *Ec2ClientVpnRoute) SetProviderReference(r *xpv1.Reference) {
	mg.Spec.ProviderReference = r
}

// SetWriteConnectionSecretToReference of this Ec2ClientVpnRoute.
func (mg *Ec2ClientVpnRoute) SetWriteConnectionSecretToReference(r *xpv1.SecretReference) {
	mg.Spec.WriteConnectionSecretToReference = r
}

// GetCondition of this Ec2Fleet.
func (mg *Ec2Fleet) GetCondition(ct xpv1.ConditionType) xpv1.Condition {
	return mg.Status.GetCondition(ct)
}

// GetDeletionPolicy of this Ec2Fleet.
func (mg *Ec2Fleet) GetDeletionPolicy() xpv1.DeletionPolicy {
	return mg.Spec.DeletionPolicy
}

// GetProviderConfigReference of this Ec2Fleet.
func (mg *Ec2Fleet) GetProviderConfigReference() *xpv1.Reference {
	return mg.Spec.ProviderConfigReference
}

/*
GetProviderReference of this Ec2Fleet.
Deprecated: Use GetProviderConfigReference.
*/
func (mg *Ec2Fleet) GetProviderReference() *xpv1.Reference {
	return mg.Spec.ProviderReference
}

// GetWriteConnectionSecretToReference of this Ec2Fleet.
func (mg *Ec2Fleet) GetWriteConnectionSecretToReference() *xpv1.SecretReference {
	return mg.Spec.WriteConnectionSecretToReference
}

// SetConditions of this Ec2Fleet.
func (mg *Ec2Fleet) SetConditions(c ...xpv1.Condition) {
	mg.Status.SetConditions(c...)
}

// SetDeletionPolicy of this Ec2Fleet.
func (mg *Ec2Fleet) SetDeletionPolicy(r xpv1.DeletionPolicy) {
	mg.Spec.DeletionPolicy = r
}

// SetProviderConfigReference of this Ec2Fleet.
func (mg *Ec2Fleet) SetProviderConfigReference(r *xpv1.Reference) {
	mg.Spec.ProviderConfigReference = r
}

/*
SetProviderReference of this Ec2Fleet.
Deprecated: Use SetProviderConfigReference.
*/
func (mg *Ec2Fleet) SetProviderReference(r *xpv1.Reference) {
	mg.Spec.ProviderReference = r
}

// SetWriteConnectionSecretToReference of this Ec2Fleet.
func (mg *Ec2Fleet) SetWriteConnectionSecretToReference(r *xpv1.SecretReference) {
	mg.Spec.WriteConnectionSecretToReference = r
}

// GetCondition of this Ec2LocalGatewayRoute.
func (mg *Ec2LocalGatewayRoute) GetCondition(ct xpv1.ConditionType) xpv1.Condition {
	return mg.Status.GetCondition(ct)
}

// GetDeletionPolicy of this Ec2LocalGatewayRoute.
func (mg *Ec2LocalGatewayRoute) GetDeletionPolicy() xpv1.DeletionPolicy {
	return mg.Spec.DeletionPolicy
}

// GetProviderConfigReference of this Ec2LocalGatewayRoute.
func (mg *Ec2LocalGatewayRoute) GetProviderConfigReference() *xpv1.Reference {
	return mg.Spec.ProviderConfigReference
}

/*
GetProviderReference of this Ec2LocalGatewayRoute.
Deprecated: Use GetProviderConfigReference.
*/
func (mg *Ec2LocalGatewayRoute) GetProviderReference() *xpv1.Reference {
	return mg.Spec.ProviderReference
}

// GetWriteConnectionSecretToReference of this Ec2LocalGatewayRoute.
func (mg *Ec2LocalGatewayRoute) GetWriteConnectionSecretToReference() *xpv1.SecretReference {
	return mg.Spec.WriteConnectionSecretToReference
}

// SetConditions of this Ec2LocalGatewayRoute.
func (mg *Ec2LocalGatewayRoute) SetConditions(c ...xpv1.Condition) {
	mg.Status.SetConditions(c...)
}

// SetDeletionPolicy of this Ec2LocalGatewayRoute.
func (mg *Ec2LocalGatewayRoute) SetDeletionPolicy(r xpv1.DeletionPolicy) {
	mg.Spec.DeletionPolicy = r
}

// SetProviderConfigReference of this Ec2LocalGatewayRoute.
func (mg *Ec2LocalGatewayRoute) SetProviderConfigReference(r *xpv1.Reference) {
	mg.Spec.ProviderConfigReference = r
}

/*
SetProviderReference of this Ec2LocalGatewayRoute.
Deprecated: Use SetProviderConfigReference.
*/
func (mg *Ec2LocalGatewayRoute) SetProviderReference(r *xpv1.Reference) {
	mg.Spec.ProviderReference = r
}

// SetWriteConnectionSecretToReference of this Ec2LocalGatewayRoute.
func (mg *Ec2LocalGatewayRoute) SetWriteConnectionSecretToReference(r *xpv1.SecretReference) {
	mg.Spec.WriteConnectionSecretToReference = r
}

// GetCondition of this Ec2LocalGatewayRouteTableVpcAssociation.
func (mg *Ec2LocalGatewayRouteTableVpcAssociation) GetCondition(ct xpv1.ConditionType) xpv1.Condition {
	return mg.Status.GetCondition(ct)
}

// GetDeletionPolicy of this Ec2LocalGatewayRouteTableVpcAssociation.
func (mg *Ec2LocalGatewayRouteTableVpcAssociation) GetDeletionPolicy() xpv1.DeletionPolicy {
	return mg.Spec.DeletionPolicy
}

// GetProviderConfigReference of this Ec2LocalGatewayRouteTableVpcAssociation.
func (mg *Ec2LocalGatewayRouteTableVpcAssociation) GetProviderConfigReference() *xpv1.Reference {
	return mg.Spec.ProviderConfigReference
}

/*
GetProviderReference of this Ec2LocalGatewayRouteTableVpcAssociation.
Deprecated: Use GetProviderConfigReference.
*/
func (mg *Ec2LocalGatewayRouteTableVpcAssociation) GetProviderReference() *xpv1.Reference {
	return mg.Spec.ProviderReference
}

// GetWriteConnectionSecretToReference of this Ec2LocalGatewayRouteTableVpcAssociation.
func (mg *Ec2LocalGatewayRouteTableVpcAssociation) GetWriteConnectionSecretToReference() *xpv1.SecretReference {
	return mg.Spec.WriteConnectionSecretToReference
}

// SetConditions of this Ec2LocalGatewayRouteTableVpcAssociation.
func (mg *Ec2LocalGatewayRouteTableVpcAssociation) SetConditions(c ...xpv1.Condition) {
	mg.Status.SetConditions(c...)
}

// SetDeletionPolicy of this Ec2LocalGatewayRouteTableVpcAssociation.
func (mg *Ec2LocalGatewayRouteTableVpcAssociation) SetDeletionPolicy(r xpv1.DeletionPolicy) {
	mg.Spec.DeletionPolicy = r
}

// SetProviderConfigReference of this Ec2LocalGatewayRouteTableVpcAssociation.
func (mg *Ec2LocalGatewayRouteTableVpcAssociation) SetProviderConfigReference(r *xpv1.Reference) {
	mg.Spec.ProviderConfigReference = r
}

/*
SetProviderReference of this Ec2LocalGatewayRouteTableVpcAssociation.
Deprecated: Use SetProviderConfigReference.
*/
func (mg *Ec2LocalGatewayRouteTableVpcAssociation) SetProviderReference(r *xpv1.Reference) {
	mg.Spec.ProviderReference = r
}

// SetWriteConnectionSecretToReference of this Ec2LocalGatewayRouteTableVpcAssociation.
func (mg *Ec2LocalGatewayRouteTableVpcAssociation) SetWriteConnectionSecretToReference(r *xpv1.SecretReference) {
	mg.Spec.WriteConnectionSecretToReference = r
}

// GetCondition of this Ec2ManagedPrefixList.
func (mg *Ec2ManagedPrefixList) GetCondition(ct xpv1.ConditionType) xpv1.Condition {
	return mg.Status.GetCondition(ct)
}

// GetDeletionPolicy of this Ec2ManagedPrefixList.
func (mg *Ec2ManagedPrefixList) GetDeletionPolicy() xpv1.DeletionPolicy {
	return mg.Spec.DeletionPolicy
}

// GetProviderConfigReference of this Ec2ManagedPrefixList.
func (mg *Ec2ManagedPrefixList) GetProviderConfigReference() *xpv1.Reference {
	return mg.Spec.ProviderConfigReference
}

/*
GetProviderReference of this Ec2ManagedPrefixList.
Deprecated: Use GetProviderConfigReference.
*/
func (mg *Ec2ManagedPrefixList) GetProviderReference() *xpv1.Reference {
	return mg.Spec.ProviderReference
}

// GetWriteConnectionSecretToReference of this Ec2ManagedPrefixList.
func (mg *Ec2ManagedPrefixList) GetWriteConnectionSecretToReference() *xpv1.SecretReference {
	return mg.Spec.WriteConnectionSecretToReference
}

// SetConditions of this Ec2ManagedPrefixList.
func (mg *Ec2ManagedPrefixList) SetConditions(c ...xpv1.Condition) {
	mg.Status.SetConditions(c...)
}

// SetDeletionPolicy of this Ec2ManagedPrefixList.
func (mg *Ec2ManagedPrefixList) SetDeletionPolicy(r xpv1.DeletionPolicy) {
	mg.Spec.DeletionPolicy = r
}

// SetProviderConfigReference of this Ec2ManagedPrefixList.
func (mg *Ec2ManagedPrefixList) SetProviderConfigReference(r *xpv1.Reference) {
	mg.Spec.ProviderConfigReference = r
}

/*
SetProviderReference of this Ec2ManagedPrefixList.
Deprecated: Use SetProviderConfigReference.
*/
func (mg *Ec2ManagedPrefixList) SetProviderReference(r *xpv1.Reference) {
	mg.Spec.ProviderReference = r
}

// SetWriteConnectionSecretToReference of this Ec2ManagedPrefixList.
func (mg *Ec2ManagedPrefixList) SetWriteConnectionSecretToReference(r *xpv1.SecretReference) {
	mg.Spec.WriteConnectionSecretToReference = r
}

// GetCondition of this Ec2Tag.
func (mg *Ec2Tag) GetCondition(ct xpv1.ConditionType) xpv1.Condition {
	return mg.Status.GetCondition(ct)
}

// GetDeletionPolicy of this Ec2Tag.
func (mg *Ec2Tag) GetDeletionPolicy() xpv1.DeletionPolicy {
	return mg.Spec.DeletionPolicy
}

// GetProviderConfigReference of this Ec2Tag.
func (mg *Ec2Tag) GetProviderConfigReference() *xpv1.Reference {
	return mg.Spec.ProviderConfigReference
}

/*
GetProviderReference of this Ec2Tag.
Deprecated: Use GetProviderConfigReference.
*/
func (mg *Ec2Tag) GetProviderReference() *xpv1.Reference {
	return mg.Spec.ProviderReference
}

// GetWriteConnectionSecretToReference of this Ec2Tag.
func (mg *Ec2Tag) GetWriteConnectionSecretToReference() *xpv1.SecretReference {
	return mg.Spec.WriteConnectionSecretToReference
}

// SetConditions of this Ec2Tag.
func (mg *Ec2Tag) SetConditions(c ...xpv1.Condition) {
	mg.Status.SetConditions(c...)
}

// SetDeletionPolicy of this Ec2Tag.
func (mg *Ec2Tag) SetDeletionPolicy(r xpv1.DeletionPolicy) {
	mg.Spec.DeletionPolicy = r
}

// SetProviderConfigReference of this Ec2Tag.
func (mg *Ec2Tag) SetProviderConfigReference(r *xpv1.Reference) {
	mg.Spec.ProviderConfigReference = r
}

/*
SetProviderReference of this Ec2Tag.
Deprecated: Use SetProviderConfigReference.
*/
func (mg *Ec2Tag) SetProviderReference(r *xpv1.Reference) {
	mg.Spec.ProviderReference = r
}

// SetWriteConnectionSecretToReference of this Ec2Tag.
func (mg *Ec2Tag) SetWriteConnectionSecretToReference(r *xpv1.SecretReference) {
	mg.Spec.WriteConnectionSecretToReference = r
}

// GetCondition of this Ec2TrafficMirrorFilter.
func (mg *Ec2TrafficMirrorFilter) GetCondition(ct xpv1.ConditionType) xpv1.Condition {
	return mg.Status.GetCondition(ct)
}

// GetDeletionPolicy of this Ec2TrafficMirrorFilter.
func (mg *Ec2TrafficMirrorFilter) GetDeletionPolicy() xpv1.DeletionPolicy {
	return mg.Spec.DeletionPolicy
}

// GetProviderConfigReference of this Ec2TrafficMirrorFilter.
func (mg *Ec2TrafficMirrorFilter) GetProviderConfigReference() *xpv1.Reference {
	return mg.Spec.ProviderConfigReference
}

/*
GetProviderReference of this Ec2TrafficMirrorFilter.
Deprecated: Use GetProviderConfigReference.
*/
func (mg *Ec2TrafficMirrorFilter) GetProviderReference() *xpv1.Reference {
	return mg.Spec.ProviderReference
}

// GetWriteConnectionSecretToReference of this Ec2TrafficMirrorFilter.
func (mg *Ec2TrafficMirrorFilter) GetWriteConnectionSecretToReference() *xpv1.SecretReference {
	return mg.Spec.WriteConnectionSecretToReference
}

// SetConditions of this Ec2TrafficMirrorFilter.
func (mg *Ec2TrafficMirrorFilter) SetConditions(c ...xpv1.Condition) {
	mg.Status.SetConditions(c...)
}

// SetDeletionPolicy of this Ec2TrafficMirrorFilter.
func (mg *Ec2TrafficMirrorFilter) SetDeletionPolicy(r xpv1.DeletionPolicy) {
	mg.Spec.DeletionPolicy = r
}

// SetProviderConfigReference of this Ec2TrafficMirrorFilter.
func (mg *Ec2TrafficMirrorFilter) SetProviderConfigReference(r *xpv1.Reference) {
	mg.Spec.ProviderConfigReference = r
}

/*
SetProviderReference of this Ec2TrafficMirrorFilter.
Deprecated: Use SetProviderConfigReference.
*/
func (mg *Ec2TrafficMirrorFilter) SetProviderReference(r *xpv1.Reference) {
	mg.Spec.ProviderReference = r
}

// SetWriteConnectionSecretToReference of this Ec2TrafficMirrorFilter.
func (mg *Ec2TrafficMirrorFilter) SetWriteConnectionSecretToReference(r *xpv1.SecretReference) {
	mg.Spec.WriteConnectionSecretToReference = r
}

// GetCondition of this Ec2TrafficMirrorFilterRule.
func (mg *Ec2TrafficMirrorFilterRule) GetCondition(ct xpv1.ConditionType) xpv1.Condition {
	return mg.Status.GetCondition(ct)
}

// GetDeletionPolicy of this Ec2TrafficMirrorFilterRule.
func (mg *Ec2TrafficMirrorFilterRule) GetDeletionPolicy() xpv1.DeletionPolicy {
	return mg.Spec.DeletionPolicy
}

// GetProviderConfigReference of this Ec2TrafficMirrorFilterRule.
func (mg *Ec2TrafficMirrorFilterRule) GetProviderConfigReference() *xpv1.Reference {
	return mg.Spec.ProviderConfigReference
}

/*
GetProviderReference of this Ec2TrafficMirrorFilterRule.
Deprecated: Use GetProviderConfigReference.
*/
func (mg *Ec2TrafficMirrorFilterRule) GetProviderReference() *xpv1.Reference {
	return mg.Spec.ProviderReference
}

// GetWriteConnectionSecretToReference of this Ec2TrafficMirrorFilterRule.
func (mg *Ec2TrafficMirrorFilterRule) GetWriteConnectionSecretToReference() *xpv1.SecretReference {
	return mg.Spec.WriteConnectionSecretToReference
}

// SetConditions of this Ec2TrafficMirrorFilterRule.
func (mg *Ec2TrafficMirrorFilterRule) SetConditions(c ...xpv1.Condition) {
	mg.Status.SetConditions(c...)
}

// SetDeletionPolicy of this Ec2TrafficMirrorFilterRule.
func (mg *Ec2TrafficMirrorFilterRule) SetDeletionPolicy(r xpv1.DeletionPolicy) {
	mg.Spec.DeletionPolicy = r
}

// SetProviderConfigReference of this Ec2TrafficMirrorFilterRule.
func (mg *Ec2TrafficMirrorFilterRule) SetProviderConfigReference(r *xpv1.Reference) {
	mg.Spec.ProviderConfigReference = r
}

/*
SetProviderReference of this Ec2TrafficMirrorFilterRule.
Deprecated: Use SetProviderConfigReference.
*/
func (mg *Ec2TrafficMirrorFilterRule) SetProviderReference(r *xpv1.Reference) {
	mg.Spec.ProviderReference = r
}

// SetWriteConnectionSecretToReference of this Ec2TrafficMirrorFilterRule.
func (mg *Ec2TrafficMirrorFilterRule) SetWriteConnectionSecretToReference(r *xpv1.SecretReference) {
	mg.Spec.WriteConnectionSecretToReference = r
}

// GetCondition of this Ec2TrafficMirrorSession.
func (mg *Ec2TrafficMirrorSession) GetCondition(ct xpv1.ConditionType) xpv1.Condition {
	return mg.Status.GetCondition(ct)
}

// GetDeletionPolicy of this Ec2TrafficMirrorSession.
func (mg *Ec2TrafficMirrorSession) GetDeletionPolicy() xpv1.DeletionPolicy {
	return mg.Spec.DeletionPolicy
}

// GetProviderConfigReference of this Ec2TrafficMirrorSession.
func (mg *Ec2TrafficMirrorSession) GetProviderConfigReference() *xpv1.Reference {
	return mg.Spec.ProviderConfigReference
}

/*
GetProviderReference of this Ec2TrafficMirrorSession.
Deprecated: Use GetProviderConfigReference.
*/
func (mg *Ec2TrafficMirrorSession) GetProviderReference() *xpv1.Reference {
	return mg.Spec.ProviderReference
}

// GetWriteConnectionSecretToReference of this Ec2TrafficMirrorSession.
func (mg *Ec2TrafficMirrorSession) GetWriteConnectionSecretToReference() *xpv1.SecretReference {
	return mg.Spec.WriteConnectionSecretToReference
}

// SetConditions of this Ec2TrafficMirrorSession.
func (mg *Ec2TrafficMirrorSession) SetConditions(c ...xpv1.Condition) {
	mg.Status.SetConditions(c...)
}

// SetDeletionPolicy of this Ec2TrafficMirrorSession.
func (mg *Ec2TrafficMirrorSession) SetDeletionPolicy(r xpv1.DeletionPolicy) {
	mg.Spec.DeletionPolicy = r
}

// SetProviderConfigReference of this Ec2TrafficMirrorSession.
func (mg *Ec2TrafficMirrorSession) SetProviderConfigReference(r *xpv1.Reference) {
	mg.Spec.ProviderConfigReference = r
}

/*
SetProviderReference of this Ec2TrafficMirrorSession.
Deprecated: Use SetProviderConfigReference.
*/
func (mg *Ec2TrafficMirrorSession) SetProviderReference(r *xpv1.Reference) {
	mg.Spec.ProviderReference = r
}

// SetWriteConnectionSecretToReference of this Ec2TrafficMirrorSession.
func (mg *Ec2TrafficMirrorSession) SetWriteConnectionSecretToReference(r *xpv1.SecretReference) {
	mg.Spec.WriteConnectionSecretToReference = r
}

// GetCondition of this Ec2TrafficMirrorTarget.
func (mg *Ec2TrafficMirrorTarget) GetCondition(ct xpv1.ConditionType) xpv1.Condition {
	return mg.Status.GetCondition(ct)
}

// GetDeletionPolicy of this Ec2TrafficMirrorTarget.
func (mg *Ec2TrafficMirrorTarget) GetDeletionPolicy() xpv1.DeletionPolicy {
	return mg.Spec.DeletionPolicy
}

// GetProviderConfigReference of this Ec2TrafficMirrorTarget.
func (mg *Ec2TrafficMirrorTarget) GetProviderConfigReference() *xpv1.Reference {
	return mg.Spec.ProviderConfigReference
}

/*
GetProviderReference of this Ec2TrafficMirrorTarget.
Deprecated: Use GetProviderConfigReference.
*/
func (mg *Ec2TrafficMirrorTarget) GetProviderReference() *xpv1.Reference {
	return mg.Spec.ProviderReference
}

// GetWriteConnectionSecretToReference of this Ec2TrafficMirrorTarget.
func (mg *Ec2TrafficMirrorTarget) GetWriteConnectionSecretToReference() *xpv1.SecretReference {
	return mg.Spec.WriteConnectionSecretToReference
}

// SetConditions of this Ec2TrafficMirrorTarget.
func (mg *Ec2TrafficMirrorTarget) SetConditions(c ...xpv1.Condition) {
	mg.Status.SetConditions(c...)
}

// SetDeletionPolicy of this Ec2TrafficMirrorTarget.
func (mg *Ec2TrafficMirrorTarget) SetDeletionPolicy(r xpv1.DeletionPolicy) {
	mg.Spec.DeletionPolicy = r
}

// SetProviderConfigReference of this Ec2TrafficMirrorTarget.
func (mg *Ec2TrafficMirrorTarget) SetProviderConfigReference(r *xpv1.Reference) {
	mg.Spec.ProviderConfigReference = r
}

/*
SetProviderReference of this Ec2TrafficMirrorTarget.
Deprecated: Use SetProviderConfigReference.
*/
func (mg *Ec2TrafficMirrorTarget) SetProviderReference(r *xpv1.Reference) {
	mg.Spec.ProviderReference = r
}

// SetWriteConnectionSecretToReference of this Ec2TrafficMirrorTarget.
func (mg *Ec2TrafficMirrorTarget) SetWriteConnectionSecretToReference(r *xpv1.SecretReference) {
	mg.Spec.WriteConnectionSecretToReference = r
}

// GetCondition of this Ec2TransitGateway.
func (mg *Ec2TransitGateway) GetCondition(ct xpv1.ConditionType) xpv1.Condition {
	return mg.Status.GetCondition(ct)
}

// GetDeletionPolicy of this Ec2TransitGateway.
func (mg *Ec2TransitGateway) GetDeletionPolicy() xpv1.DeletionPolicy {
	return mg.Spec.DeletionPolicy
}

// GetProviderConfigReference of this Ec2TransitGateway.
func (mg *Ec2TransitGateway) GetProviderConfigReference() *xpv1.Reference {
	return mg.Spec.ProviderConfigReference
}

/*
GetProviderReference of this Ec2TransitGateway.
Deprecated: Use GetProviderConfigReference.
*/
func (mg *Ec2TransitGateway) GetProviderReference() *xpv1.Reference {
	return mg.Spec.ProviderReference
}

// GetWriteConnectionSecretToReference of this Ec2TransitGateway.
func (mg *Ec2TransitGateway) GetWriteConnectionSecretToReference() *xpv1.SecretReference {
	return mg.Spec.WriteConnectionSecretToReference
}

// SetConditions of this Ec2TransitGateway.
func (mg *Ec2TransitGateway) SetConditions(c ...xpv1.Condition) {
	mg.Status.SetConditions(c...)
}

// SetDeletionPolicy of this Ec2TransitGateway.
func (mg *Ec2TransitGateway) SetDeletionPolicy(r xpv1.DeletionPolicy) {
	mg.Spec.DeletionPolicy = r
}

// SetProviderConfigReference of this Ec2TransitGateway.
func (mg *Ec2TransitGateway) SetProviderConfigReference(r *xpv1.Reference) {
	mg.Spec.ProviderConfigReference = r
}

/*
SetProviderReference of this Ec2TransitGateway.
Deprecated: Use SetProviderConfigReference.
*/
func (mg *Ec2TransitGateway) SetProviderReference(r *xpv1.Reference) {
	mg.Spec.ProviderReference = r
}

// SetWriteConnectionSecretToReference of this Ec2TransitGateway.
func (mg *Ec2TransitGateway) SetWriteConnectionSecretToReference(r *xpv1.SecretReference) {
	mg.Spec.WriteConnectionSecretToReference = r
}

// GetCondition of this Ec2TransitGatewayPeeringAttachment.
func (mg *Ec2TransitGatewayPeeringAttachment) GetCondition(ct xpv1.ConditionType) xpv1.Condition {
	return mg.Status.GetCondition(ct)
}

// GetDeletionPolicy of this Ec2TransitGatewayPeeringAttachment.
func (mg *Ec2TransitGatewayPeeringAttachment) GetDeletionPolicy() xpv1.DeletionPolicy {
	return mg.Spec.DeletionPolicy
}

// GetProviderConfigReference of this Ec2TransitGatewayPeeringAttachment.
func (mg *Ec2TransitGatewayPeeringAttachment) GetProviderConfigReference() *xpv1.Reference {
	return mg.Spec.ProviderConfigReference
}

/*
GetProviderReference of this Ec2TransitGatewayPeeringAttachment.
Deprecated: Use GetProviderConfigReference.
*/
func (mg *Ec2TransitGatewayPeeringAttachment) GetProviderReference() *xpv1.Reference {
	return mg.Spec.ProviderReference
}

// GetWriteConnectionSecretToReference of this Ec2TransitGatewayPeeringAttachment.
func (mg *Ec2TransitGatewayPeeringAttachment) GetWriteConnectionSecretToReference() *xpv1.SecretReference {
	return mg.Spec.WriteConnectionSecretToReference
}

// SetConditions of this Ec2TransitGatewayPeeringAttachment.
func (mg *Ec2TransitGatewayPeeringAttachment) SetConditions(c ...xpv1.Condition) {
	mg.Status.SetConditions(c...)
}

// SetDeletionPolicy of this Ec2TransitGatewayPeeringAttachment.
func (mg *Ec2TransitGatewayPeeringAttachment) SetDeletionPolicy(r xpv1.DeletionPolicy) {
	mg.Spec.DeletionPolicy = r
}

// SetProviderConfigReference of this Ec2TransitGatewayPeeringAttachment.
func (mg *Ec2TransitGatewayPeeringAttachment) SetProviderConfigReference(r *xpv1.Reference) {
	mg.Spec.ProviderConfigReference = r
}

/*
SetProviderReference of this Ec2TransitGatewayPeeringAttachment.
Deprecated: Use SetProviderConfigReference.
*/
func (mg *Ec2TransitGatewayPeeringAttachment) SetProviderReference(r *xpv1.Reference) {
	mg.Spec.ProviderReference = r
}

// SetWriteConnectionSecretToReference of this Ec2TransitGatewayPeeringAttachment.
func (mg *Ec2TransitGatewayPeeringAttachment) SetWriteConnectionSecretToReference(r *xpv1.SecretReference) {
	mg.Spec.WriteConnectionSecretToReference = r
}

// GetCondition of this Ec2TransitGatewayPeeringAttachmentAccepter.
func (mg *Ec2TransitGatewayPeeringAttachmentAccepter) GetCondition(ct xpv1.ConditionType) xpv1.Condition {
	return mg.Status.GetCondition(ct)
}

// GetDeletionPolicy of this Ec2TransitGatewayPeeringAttachmentAccepter.
func (mg *Ec2TransitGatewayPeeringAttachmentAccepter) GetDeletionPolicy() xpv1.DeletionPolicy {
	return mg.Spec.DeletionPolicy
}

// GetProviderConfigReference of this Ec2TransitGatewayPeeringAttachmentAccepter.
func (mg *Ec2TransitGatewayPeeringAttachmentAccepter) GetProviderConfigReference() *xpv1.Reference {
	return mg.Spec.ProviderConfigReference
}

/*
GetProviderReference of this Ec2TransitGatewayPeeringAttachmentAccepter.
Deprecated: Use GetProviderConfigReference.
*/
func (mg *Ec2TransitGatewayPeeringAttachmentAccepter) GetProviderReference() *xpv1.Reference {
	return mg.Spec.ProviderReference
}

// GetWriteConnectionSecretToReference of this Ec2TransitGatewayPeeringAttachmentAccepter.
func (mg *Ec2TransitGatewayPeeringAttachmentAccepter) GetWriteConnectionSecretToReference() *xpv1.SecretReference {
	return mg.Spec.WriteConnectionSecretToReference
}

// SetConditions of this Ec2TransitGatewayPeeringAttachmentAccepter.
func (mg *Ec2TransitGatewayPeeringAttachmentAccepter) SetConditions(c ...xpv1.Condition) {
	mg.Status.SetConditions(c...)
}

// SetDeletionPolicy of this Ec2TransitGatewayPeeringAttachmentAccepter.
func (mg *Ec2TransitGatewayPeeringAttachmentAccepter) SetDeletionPolicy(r xpv1.DeletionPolicy) {
	mg.Spec.DeletionPolicy = r
}

// SetProviderConfigReference of this Ec2TransitGatewayPeeringAttachmentAccepter.
func (mg *Ec2TransitGatewayPeeringAttachmentAccepter) SetProviderConfigReference(r *xpv1.Reference) {
	mg.Spec.ProviderConfigReference = r
}

/*
SetProviderReference of this Ec2TransitGatewayPeeringAttachmentAccepter.
Deprecated: Use SetProviderConfigReference.
*/
func (mg *Ec2TransitGatewayPeeringAttachmentAccepter) SetProviderReference(r *xpv1.Reference) {
	mg.Spec.ProviderReference = r
}

// SetWriteConnectionSecretToReference of this Ec2TransitGatewayPeeringAttachmentAccepter.
func (mg *Ec2TransitGatewayPeeringAttachmentAccepter) SetWriteConnectionSecretToReference(r *xpv1.SecretReference) {
	mg.Spec.WriteConnectionSecretToReference = r
}

// GetCondition of this Ec2TransitGatewayPrefixListReference.
func (mg *Ec2TransitGatewayPrefixListReference) GetCondition(ct xpv1.ConditionType) xpv1.Condition {
	return mg.Status.GetCondition(ct)
}

// GetDeletionPolicy of this Ec2TransitGatewayPrefixListReference.
func (mg *Ec2TransitGatewayPrefixListReference) GetDeletionPolicy() xpv1.DeletionPolicy {
	return mg.Spec.DeletionPolicy
}

// GetProviderConfigReference of this Ec2TransitGatewayPrefixListReference.
func (mg *Ec2TransitGatewayPrefixListReference) GetProviderConfigReference() *xpv1.Reference {
	return mg.Spec.ProviderConfigReference
}

/*
GetProviderReference of this Ec2TransitGatewayPrefixListReference.
Deprecated: Use GetProviderConfigReference.
*/
func (mg *Ec2TransitGatewayPrefixListReference) GetProviderReference() *xpv1.Reference {
	return mg.Spec.ProviderReference
}

// GetWriteConnectionSecretToReference of this Ec2TransitGatewayPrefixListReference.
func (mg *Ec2TransitGatewayPrefixListReference) GetWriteConnectionSecretToReference() *xpv1.SecretReference {
	return mg.Spec.WriteConnectionSecretToReference
}

// SetConditions of this Ec2TransitGatewayPrefixListReference.
func (mg *Ec2TransitGatewayPrefixListReference) SetConditions(c ...xpv1.Condition) {
	mg.Status.SetConditions(c...)
}

// SetDeletionPolicy of this Ec2TransitGatewayPrefixListReference.
func (mg *Ec2TransitGatewayPrefixListReference) SetDeletionPolicy(r xpv1.DeletionPolicy) {
	mg.Spec.DeletionPolicy = r
}

// SetProviderConfigReference of this Ec2TransitGatewayPrefixListReference.
func (mg *Ec2TransitGatewayPrefixListReference) SetProviderConfigReference(r *xpv1.Reference) {
	mg.Spec.ProviderConfigReference = r
}

/*
SetProviderReference of this Ec2TransitGatewayPrefixListReference.
Deprecated: Use SetProviderConfigReference.
*/
func (mg *Ec2TransitGatewayPrefixListReference) SetProviderReference(r *xpv1.Reference) {
	mg.Spec.ProviderReference = r
}

// SetWriteConnectionSecretToReference of this Ec2TransitGatewayPrefixListReference.
func (mg *Ec2TransitGatewayPrefixListReference) SetWriteConnectionSecretToReference(r *xpv1.SecretReference) {
	mg.Spec.WriteConnectionSecretToReference = r
}

// GetCondition of this Ec2TransitGatewayRoute.
func (mg *Ec2TransitGatewayRoute) GetCondition(ct xpv1.ConditionType) xpv1.Condition {
	return mg.Status.GetCondition(ct)
}

// GetDeletionPolicy of this Ec2TransitGatewayRoute.
func (mg *Ec2TransitGatewayRoute) GetDeletionPolicy() xpv1.DeletionPolicy {
	return mg.Spec.DeletionPolicy
}

// GetProviderConfigReference of this Ec2TransitGatewayRoute.
func (mg *Ec2TransitGatewayRoute) GetProviderConfigReference() *xpv1.Reference {
	return mg.Spec.ProviderConfigReference
}

/*
GetProviderReference of this Ec2TransitGatewayRoute.
Deprecated: Use GetProviderConfigReference.
*/
func (mg *Ec2TransitGatewayRoute) GetProviderReference() *xpv1.Reference {
	return mg.Spec.ProviderReference
}

// GetWriteConnectionSecretToReference of this Ec2TransitGatewayRoute.
func (mg *Ec2TransitGatewayRoute) GetWriteConnectionSecretToReference() *xpv1.SecretReference {
	return mg.Spec.WriteConnectionSecretToReference
}

// SetConditions of this Ec2TransitGatewayRoute.
func (mg *Ec2TransitGatewayRoute) SetConditions(c ...xpv1.Condition) {
	mg.Status.SetConditions(c...)
}

// SetDeletionPolicy of this Ec2TransitGatewayRoute.
func (mg *Ec2TransitGatewayRoute) SetDeletionPolicy(r xpv1.DeletionPolicy) {
	mg.Spec.DeletionPolicy = r
}

// SetProviderConfigReference of this Ec2TransitGatewayRoute.
func (mg *Ec2TransitGatewayRoute) SetProviderConfigReference(r *xpv1.Reference) {
	mg.Spec.ProviderConfigReference = r
}

/*
SetProviderReference of this Ec2TransitGatewayRoute.
Deprecated: Use SetProviderConfigReference.
*/
func (mg *Ec2TransitGatewayRoute) SetProviderReference(r *xpv1.Reference) {
	mg.Spec.ProviderReference = r
}

// SetWriteConnectionSecretToReference of this Ec2TransitGatewayRoute.
func (mg *Ec2TransitGatewayRoute) SetWriteConnectionSecretToReference(r *xpv1.SecretReference) {
	mg.Spec.WriteConnectionSecretToReference = r
}

// GetCondition of this Ec2TransitGatewayRouteTable.
func (mg *Ec2TransitGatewayRouteTable) GetCondition(ct xpv1.ConditionType) xpv1.Condition {
	return mg.Status.GetCondition(ct)
}

// GetDeletionPolicy of this Ec2TransitGatewayRouteTable.
func (mg *Ec2TransitGatewayRouteTable) GetDeletionPolicy() xpv1.DeletionPolicy {
	return mg.Spec.DeletionPolicy
}

// GetProviderConfigReference of this Ec2TransitGatewayRouteTable.
func (mg *Ec2TransitGatewayRouteTable) GetProviderConfigReference() *xpv1.Reference {
	return mg.Spec.ProviderConfigReference
}

/*
GetProviderReference of this Ec2TransitGatewayRouteTable.
Deprecated: Use GetProviderConfigReference.
*/
func (mg *Ec2TransitGatewayRouteTable) GetProviderReference() *xpv1.Reference {
	return mg.Spec.ProviderReference
}

// GetWriteConnectionSecretToReference of this Ec2TransitGatewayRouteTable.
func (mg *Ec2TransitGatewayRouteTable) GetWriteConnectionSecretToReference() *xpv1.SecretReference {
	return mg.Spec.WriteConnectionSecretToReference
}

// SetConditions of this Ec2TransitGatewayRouteTable.
func (mg *Ec2TransitGatewayRouteTable) SetConditions(c ...xpv1.Condition) {
	mg.Status.SetConditions(c...)
}

// SetDeletionPolicy of this Ec2TransitGatewayRouteTable.
func (mg *Ec2TransitGatewayRouteTable) SetDeletionPolicy(r xpv1.DeletionPolicy) {
	mg.Spec.DeletionPolicy = r
}

// SetProviderConfigReference of this Ec2TransitGatewayRouteTable.
func (mg *Ec2TransitGatewayRouteTable) SetProviderConfigReference(r *xpv1.Reference) {
	mg.Spec.ProviderConfigReference = r
}

/*
SetProviderReference of this Ec2TransitGatewayRouteTable.
Deprecated: Use SetProviderConfigReference.
*/
func (mg *Ec2TransitGatewayRouteTable) SetProviderReference(r *xpv1.Reference) {
	mg.Spec.ProviderReference = r
}

// SetWriteConnectionSecretToReference of this Ec2TransitGatewayRouteTable.
func (mg *Ec2TransitGatewayRouteTable) SetWriteConnectionSecretToReference(r *xpv1.SecretReference) {
	mg.Spec.WriteConnectionSecretToReference = r
}

// GetCondition of this Ec2TransitGatewayRouteTableAssociation.
func (mg *Ec2TransitGatewayRouteTableAssociation) GetCondition(ct xpv1.ConditionType) xpv1.Condition {
	return mg.Status.GetCondition(ct)
}

// GetDeletionPolicy of this Ec2TransitGatewayRouteTableAssociation.
func (mg *Ec2TransitGatewayRouteTableAssociation) GetDeletionPolicy() xpv1.DeletionPolicy {
	return mg.Spec.DeletionPolicy
}

// GetProviderConfigReference of this Ec2TransitGatewayRouteTableAssociation.
func (mg *Ec2TransitGatewayRouteTableAssociation) GetProviderConfigReference() *xpv1.Reference {
	return mg.Spec.ProviderConfigReference
}

/*
GetProviderReference of this Ec2TransitGatewayRouteTableAssociation.
Deprecated: Use GetProviderConfigReference.
*/
func (mg *Ec2TransitGatewayRouteTableAssociation) GetProviderReference() *xpv1.Reference {
	return mg.Spec.ProviderReference
}

// GetWriteConnectionSecretToReference of this Ec2TransitGatewayRouteTableAssociation.
func (mg *Ec2TransitGatewayRouteTableAssociation) GetWriteConnectionSecretToReference() *xpv1.SecretReference {
	return mg.Spec.WriteConnectionSecretToReference
}

// SetConditions of this Ec2TransitGatewayRouteTableAssociation.
func (mg *Ec2TransitGatewayRouteTableAssociation) SetConditions(c ...xpv1.Condition) {
	mg.Status.SetConditions(c...)
}

// SetDeletionPolicy of this Ec2TransitGatewayRouteTableAssociation.
func (mg *Ec2TransitGatewayRouteTableAssociation) SetDeletionPolicy(r xpv1.DeletionPolicy) {
	mg.Spec.DeletionPolicy = r
}

// SetProviderConfigReference of this Ec2TransitGatewayRouteTableAssociation.
func (mg *Ec2TransitGatewayRouteTableAssociation) SetProviderConfigReference(r *xpv1.Reference) {
	mg.Spec.ProviderConfigReference = r
}

/*
SetProviderReference of this Ec2TransitGatewayRouteTableAssociation.
Deprecated: Use SetProviderConfigReference.
*/
func (mg *Ec2TransitGatewayRouteTableAssociation) SetProviderReference(r *xpv1.Reference) {
	mg.Spec.ProviderReference = r
}

// SetWriteConnectionSecretToReference of this Ec2TransitGatewayRouteTableAssociation.
func (mg *Ec2TransitGatewayRouteTableAssociation) SetWriteConnectionSecretToReference(r *xpv1.SecretReference) {
	mg.Spec.WriteConnectionSecretToReference = r
}

// GetCondition of this Ec2TransitGatewayRouteTablePropagation.
func (mg *Ec2TransitGatewayRouteTablePropagation) GetCondition(ct xpv1.ConditionType) xpv1.Condition {
	return mg.Status.GetCondition(ct)
}

// GetDeletionPolicy of this Ec2TransitGatewayRouteTablePropagation.
func (mg *Ec2TransitGatewayRouteTablePropagation) GetDeletionPolicy() xpv1.DeletionPolicy {
	return mg.Spec.DeletionPolicy
}

// GetProviderConfigReference of this Ec2TransitGatewayRouteTablePropagation.
func (mg *Ec2TransitGatewayRouteTablePropagation) GetProviderConfigReference() *xpv1.Reference {
	return mg.Spec.ProviderConfigReference
}

/*
GetProviderReference of this Ec2TransitGatewayRouteTablePropagation.
Deprecated: Use GetProviderConfigReference.
*/
func (mg *Ec2TransitGatewayRouteTablePropagation) GetProviderReference() *xpv1.Reference {
	return mg.Spec.ProviderReference
}

// GetWriteConnectionSecretToReference of this Ec2TransitGatewayRouteTablePropagation.
func (mg *Ec2TransitGatewayRouteTablePropagation) GetWriteConnectionSecretToReference() *xpv1.SecretReference {
	return mg.Spec.WriteConnectionSecretToReference
}

// SetConditions of this Ec2TransitGatewayRouteTablePropagation.
func (mg *Ec2TransitGatewayRouteTablePropagation) SetConditions(c ...xpv1.Condition) {
	mg.Status.SetConditions(c...)
}

// SetDeletionPolicy of this Ec2TransitGatewayRouteTablePropagation.
func (mg *Ec2TransitGatewayRouteTablePropagation) SetDeletionPolicy(r xpv1.DeletionPolicy) {
	mg.Spec.DeletionPolicy = r
}

// SetProviderConfigReference of this Ec2TransitGatewayRouteTablePropagation.
func (mg *Ec2TransitGatewayRouteTablePropagation) SetProviderConfigReference(r *xpv1.Reference) {
	mg.Spec.ProviderConfigReference = r
}

/*
SetProviderReference of this Ec2TransitGatewayRouteTablePropagation.
Deprecated: Use SetProviderConfigReference.
*/
func (mg *Ec2TransitGatewayRouteTablePropagation) SetProviderReference(r *xpv1.Reference) {
	mg.Spec.ProviderReference = r
}

// SetWriteConnectionSecretToReference of this Ec2TransitGatewayRouteTablePropagation.
func (mg *Ec2TransitGatewayRouteTablePropagation) SetWriteConnectionSecretToReference(r *xpv1.SecretReference) {
	mg.Spec.WriteConnectionSecretToReference = r
}

// GetCondition of this Ec2TransitGatewayVpcAttachment.
func (mg *Ec2TransitGatewayVpcAttachment) GetCondition(ct xpv1.ConditionType) xpv1.Condition {
	return mg.Status.GetCondition(ct)
}

// GetDeletionPolicy of this Ec2TransitGatewayVpcAttachment.
func (mg *Ec2TransitGatewayVpcAttachment) GetDeletionPolicy() xpv1.DeletionPolicy {
	return mg.Spec.DeletionPolicy
}

// GetProviderConfigReference of this Ec2TransitGatewayVpcAttachment.
func (mg *Ec2TransitGatewayVpcAttachment) GetProviderConfigReference() *xpv1.Reference {
	return mg.Spec.ProviderConfigReference
}

/*
GetProviderReference of this Ec2TransitGatewayVpcAttachment.
Deprecated: Use GetProviderConfigReference.
*/
func (mg *Ec2TransitGatewayVpcAttachment) GetProviderReference() *xpv1.Reference {
	return mg.Spec.ProviderReference
}

// GetWriteConnectionSecretToReference of this Ec2TransitGatewayVpcAttachment.
func (mg *Ec2TransitGatewayVpcAttachment) GetWriteConnectionSecretToReference() *xpv1.SecretReference {
	return mg.Spec.WriteConnectionSecretToReference
}

// SetConditions of this Ec2TransitGatewayVpcAttachment.
func (mg *Ec2TransitGatewayVpcAttachment) SetConditions(c ...xpv1.Condition) {
	mg.Status.SetConditions(c...)
}

// SetDeletionPolicy of this Ec2TransitGatewayVpcAttachment.
func (mg *Ec2TransitGatewayVpcAttachment) SetDeletionPolicy(r xpv1.DeletionPolicy) {
	mg.Spec.DeletionPolicy = r
}

// SetProviderConfigReference of this Ec2TransitGatewayVpcAttachment.
func (mg *Ec2TransitGatewayVpcAttachment) SetProviderConfigReference(r *xpv1.Reference) {
	mg.Spec.ProviderConfigReference = r
}

/*
SetProviderReference of this Ec2TransitGatewayVpcAttachment.
Deprecated: Use SetProviderConfigReference.
*/
func (mg *Ec2TransitGatewayVpcAttachment) SetProviderReference(r *xpv1.Reference) {
	mg.Spec.ProviderReference = r
}

// SetWriteConnectionSecretToReference of this Ec2TransitGatewayVpcAttachment.
func (mg *Ec2TransitGatewayVpcAttachment) SetWriteConnectionSecretToReference(r *xpv1.SecretReference) {
	mg.Spec.WriteConnectionSecretToReference = r
}

// GetCondition of this Ec2TransitGatewayVpcAttachmentAccepter.
func (mg *Ec2TransitGatewayVpcAttachmentAccepter) GetCondition(ct xpv1.ConditionType) xpv1.Condition {
	return mg.Status.GetCondition(ct)
}

// GetDeletionPolicy of this Ec2TransitGatewayVpcAttachmentAccepter.
func (mg *Ec2TransitGatewayVpcAttachmentAccepter) GetDeletionPolicy() xpv1.DeletionPolicy {
	return mg.Spec.DeletionPolicy
}

// GetProviderConfigReference of this Ec2TransitGatewayVpcAttachmentAccepter.
func (mg *Ec2TransitGatewayVpcAttachmentAccepter) GetProviderConfigReference() *xpv1.Reference {
	return mg.Spec.ProviderConfigReference
}

/*
GetProviderReference of this Ec2TransitGatewayVpcAttachmentAccepter.
Deprecated: Use GetProviderConfigReference.
*/
func (mg *Ec2TransitGatewayVpcAttachmentAccepter) GetProviderReference() *xpv1.Reference {
	return mg.Spec.ProviderReference
}

// GetWriteConnectionSecretToReference of this Ec2TransitGatewayVpcAttachmentAccepter.
func (mg *Ec2TransitGatewayVpcAttachmentAccepter) GetWriteConnectionSecretToReference() *xpv1.SecretReference {
	return mg.Spec.WriteConnectionSecretToReference
}

// SetConditions of this Ec2TransitGatewayVpcAttachmentAccepter.
func (mg *Ec2TransitGatewayVpcAttachmentAccepter) SetConditions(c ...xpv1.Condition) {
	mg.Status.SetConditions(c...)
}

// SetDeletionPolicy of this Ec2TransitGatewayVpcAttachmentAccepter.
func (mg *Ec2TransitGatewayVpcAttachmentAccepter) SetDeletionPolicy(r xpv1.DeletionPolicy) {
	mg.Spec.DeletionPolicy = r
}

// SetProviderConfigReference of this Ec2TransitGatewayVpcAttachmentAccepter.
func (mg *Ec2TransitGatewayVpcAttachmentAccepter) SetProviderConfigReference(r *xpv1.Reference) {
	mg.Spec.ProviderConfigReference = r
}

/*
SetProviderReference of this Ec2TransitGatewayVpcAttachmentAccepter.
Deprecated: Use SetProviderConfigReference.
*/
func (mg *Ec2TransitGatewayVpcAttachmentAccepter) SetProviderReference(r *xpv1.Reference) {
	mg.Spec.ProviderReference = r
}

// SetWriteConnectionSecretToReference of this Ec2TransitGatewayVpcAttachmentAccepter.
func (mg *Ec2TransitGatewayVpcAttachmentAccepter) SetWriteConnectionSecretToReference(r *xpv1.SecretReference) {
	mg.Spec.WriteConnectionSecretToReference = r
}
