/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type TransitGatewayVpcAttachmentObservation struct {
	TagsAll map[string]*string `json:"tagsAll,omitempty" tf:"tags_all,omitempty"`

	VpcOwnerID *string `json:"vpcOwnerId,omitempty" tf:"vpc_owner_id,omitempty"`
}

type TransitGatewayVpcAttachmentParameters struct {

	// +kubebuilder:validation:Optional
	ApplianceModeSupport *string `json:"applianceModeSupport,omitempty" tf:"appliance_mode_support,omitempty"`

	// +kubebuilder:validation:Optional
	DNSSupport *string `json:"dnsSupport,omitempty" tf:"dns_support,omitempty"`

	// +kubebuilder:validation:Optional
	IPv6Support *string `json:"ipv6Support,omitempty" tf:"ipv6_support,omitempty"`

	// Region is the region you'd like your resource to be created in.
	// +terrajet:crd:field:TFTag=-
	// +kubebuilder:validation:Required
	Region *string `json:"region" tf:"-"`

	// +crossplane:generate:reference:type=Subnet
	// +kubebuilder:validation:Optional
	SubnetIds []*string `json:"subnetIds,omitempty" tf:"subnet_ids,omitempty"`

	// +kubebuilder:validation:Optional
	SubnetIdsRefs []v1.Reference `json:"subnetIdsRefs,omitempty" tf:"-"`

	// +kubebuilder:validation:Optional
	SubnetIdsSelector *v1.Selector `json:"subnetIdsSelector,omitempty" tf:"-"`

	// +kubebuilder:validation:Optional
	Tags map[string]*string `json:"tags,omitempty" tf:"tags,omitempty"`

	// +kubebuilder:validation:Optional
	TransitGatewayDefaultRouteTableAssociation *bool `json:"transitGatewayDefaultRouteTableAssociation,omitempty" tf:"transit_gateway_default_route_table_association,omitempty"`

	// +kubebuilder:validation:Optional
	TransitGatewayDefaultRouteTablePropagation *bool `json:"transitGatewayDefaultRouteTablePropagation,omitempty" tf:"transit_gateway_default_route_table_propagation,omitempty"`

	// +crossplane:generate:reference:type=TransitGateway
	// +kubebuilder:validation:Optional
	TransitGatewayID *string `json:"transitGatewayId,omitempty" tf:"transit_gateway_id,omitempty"`

	// +kubebuilder:validation:Optional
	TransitGatewayIDRef *v1.Reference `json:"transitGatewayIdRef,omitempty" tf:"-"`

	// +kubebuilder:validation:Optional
	TransitGatewayIDSelector *v1.Selector `json:"transitGatewayIdSelector,omitempty" tf:"-"`

	// +crossplane:generate:reference:type=VPC
	// +kubebuilder:validation:Optional
	VpcID *string `json:"vpcId,omitempty" tf:"vpc_id,omitempty"`

	// +kubebuilder:validation:Optional
	VpcIDRef *v1.Reference `json:"vpcIdRef,omitempty" tf:"-"`

	// +kubebuilder:validation:Optional
	VpcIDSelector *v1.Selector `json:"vpcIdSelector,omitempty" tf:"-"`
}

// TransitGatewayVpcAttachmentSpec defines the desired state of TransitGatewayVpcAttachment
type TransitGatewayVpcAttachmentSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     TransitGatewayVpcAttachmentParameters `json:"forProvider"`
}

// TransitGatewayVpcAttachmentStatus defines the observed state of TransitGatewayVpcAttachment.
type TransitGatewayVpcAttachmentStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        TransitGatewayVpcAttachmentObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// TransitGatewayVpcAttachment is the Schema for the TransitGatewayVpcAttachments API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,tfaws}
type TransitGatewayVpcAttachment struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              TransitGatewayVpcAttachmentSpec   `json:"spec"`
	Status            TransitGatewayVpcAttachmentStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// TransitGatewayVpcAttachmentList contains a list of TransitGatewayVpcAttachments
type TransitGatewayVpcAttachmentList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []TransitGatewayVpcAttachment `json:"items"`
}

// Repository type metadata.
var (
	TransitGatewayVpcAttachmentKind             = "TransitGatewayVpcAttachment"
	TransitGatewayVpcAttachmentGroupKind        = schema.GroupKind{Group: Group, Kind: TransitGatewayVpcAttachmentKind}.String()
	TransitGatewayVpcAttachmentKindAPIVersion   = TransitGatewayVpcAttachmentKind + "." + GroupVersion.String()
	TransitGatewayVpcAttachmentGroupVersionKind = GroupVersion.WithKind(TransitGatewayVpcAttachmentKind)
)

func init() {
	SchemeBuilder.Register(&TransitGatewayVpcAttachment{}, &TransitGatewayVpcAttachmentList{})
}
