/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type InterfaceSgAttachmentObservation struct {
}

type InterfaceSgAttachmentParameters struct {

	// +kubebuilder:validation:Required
	NetworkInterfaceID *string `json:"networkInterfaceId" tf:"network_interface_id,omitempty"`

	// Region is the region you'd like your resource to be created in.
	// +terrajet:crd:field:TFTag=-
	// +kubebuilder:validation:Required
	Region *string `json:"region" tf:"-"`

	// +kubebuilder:validation:Required
	SecurityGroupID *string `json:"securityGroupId" tf:"security_group_id,omitempty"`
}

// InterfaceSgAttachmentSpec defines the desired state of InterfaceSgAttachment
type InterfaceSgAttachmentSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     InterfaceSgAttachmentParameters `json:"forProvider"`
}

// InterfaceSgAttachmentStatus defines the observed state of InterfaceSgAttachment.
type InterfaceSgAttachmentStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        InterfaceSgAttachmentObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// InterfaceSgAttachment is the Schema for the InterfaceSgAttachments API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,awsjet}
type InterfaceSgAttachment struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              InterfaceSgAttachmentSpec   `json:"spec"`
	Status            InterfaceSgAttachmentStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// InterfaceSgAttachmentList contains a list of InterfaceSgAttachments
type InterfaceSgAttachmentList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []InterfaceSgAttachment `json:"items"`
}

// Repository type metadata.
var (
	InterfaceSgAttachment_Kind             = "InterfaceSgAttachment"
	InterfaceSgAttachment_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: InterfaceSgAttachment_Kind}.String()
	InterfaceSgAttachment_KindAPIVersion   = InterfaceSgAttachment_Kind + "." + CRDGroupVersion.String()
	InterfaceSgAttachment_GroupVersionKind = CRDGroupVersion.WithKind(InterfaceSgAttachment_Kind)
)

func init() {
	SchemeBuilder.Register(&InterfaceSgAttachment{}, &InterfaceSgAttachmentList{})
}
