/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type AttachmentObservation struct {
	AttachmentID *string `json:"attachmentId,omitempty" tf:"attachment_id,omitempty"`
}

type AttachmentParameters struct {

	// +kubebuilder:validation:Required
	DeviceIndex *int64 `json:"deviceIndex" tf:"device_index,omitempty"`

	// +crossplane:generate:reference:type=Instance
	// +kubebuilder:validation:Optional
	Instance *string `json:"instance,omitempty" tf:"instance,omitempty"`

	// +kubebuilder:validation:Optional
	InstanceRef *v1.Reference `json:"instanceRef,omitempty" tf:"-"`

	// +kubebuilder:validation:Optional
	InstanceSelector *v1.Selector `json:"instanceSelector,omitempty" tf:"-"`
}

type EC2NetworkInterfaceObservation struct {
	MacAddress *string `json:"macAddress,omitempty" tf:"mac_address,omitempty"`

	OutpostArn *string `json:"outpostArn,omitempty" tf:"outpost_arn,omitempty"`

	PrivateDNSName *string `json:"privateDnsName,omitempty" tf:"private_dns_name,omitempty"`

	TagsAll map[string]*string `json:"tagsAll,omitempty" tf:"tags_all,omitempty"`
}

type EC2NetworkInterfaceParameters struct {

	// +kubebuilder:validation:Optional
	Attachment []AttachmentParameters `json:"attachment,omitempty" tf:"attachment,omitempty"`

	// +kubebuilder:validation:Optional
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// +kubebuilder:validation:Optional
	IPv6AddressCount *int64 `json:"ipv6AddressCount,omitempty" tf:"ipv6_address_count,omitempty"`

	// +kubebuilder:validation:Optional
	IPv6Addresses []*string `json:"ipv6Addresses,omitempty" tf:"ipv6_addresses,omitempty"`

	// +kubebuilder:validation:Optional
	InterfaceType *string `json:"interfaceType,omitempty" tf:"interface_type,omitempty"`

	// +kubebuilder:validation:Optional
	PrivateIP *string `json:"privateIp,omitempty" tf:"private_ip,omitempty"`

	// +kubebuilder:validation:Optional
	PrivateIps []*string `json:"privateIps,omitempty" tf:"private_ips,omitempty"`

	// +kubebuilder:validation:Optional
	PrivateIpsCount *int64 `json:"privateIpsCount,omitempty" tf:"private_ips_count,omitempty"`

	// Region is the region you'd like your resource to be created in.
	// +terrajet:crd:field:TFTag=-
	// +kubebuilder:validation:Required
	Region *string `json:"region" tf:"-"`

	// +crossplane:generate:reference:type=SecurityGroup
	// +kubebuilder:validation:Optional
	SecurityGroups []*string `json:"securityGroups,omitempty" tf:"security_groups,omitempty"`

	// +kubebuilder:validation:Optional
	SecurityGroupsRefs []v1.Reference `json:"securityGroupsRefs,omitempty" tf:"-"`

	// +kubebuilder:validation:Optional
	SecurityGroupsSelector *v1.Selector `json:"securityGroupsSelector,omitempty" tf:"-"`

	// +kubebuilder:validation:Optional
	SourceDestCheck *bool `json:"sourceDestCheck,omitempty" tf:"source_dest_check,omitempty"`

	// +crossplane:generate:reference:type=Subnet
	// +kubebuilder:validation:Optional
	SubnetID *string `json:"subnetId,omitempty" tf:"subnet_id,omitempty"`

	// +kubebuilder:validation:Optional
	SubnetIDRef *v1.Reference `json:"subnetIdRef,omitempty" tf:"-"`

	// +kubebuilder:validation:Optional
	SubnetIDSelector *v1.Selector `json:"subnetIdSelector,omitempty" tf:"-"`

	// +kubebuilder:validation:Optional
	Tags map[string]*string `json:"tags,omitempty" tf:"tags,omitempty"`
}

// EC2NetworkInterfaceSpec defines the desired state of EC2NetworkInterface
type EC2NetworkInterfaceSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     EC2NetworkInterfaceParameters `json:"forProvider"`
}

// EC2NetworkInterfaceStatus defines the observed state of EC2NetworkInterface.
type EC2NetworkInterfaceStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        EC2NetworkInterfaceObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// EC2NetworkInterface is the Schema for the EC2NetworkInterfaces API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,tfaws}
type EC2NetworkInterface struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              EC2NetworkInterfaceSpec   `json:"spec"`
	Status            EC2NetworkInterfaceStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// EC2NetworkInterfaceList contains a list of EC2NetworkInterfaces
type EC2NetworkInterfaceList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []EC2NetworkInterface `json:"items"`
}

// Repository type metadata.
var (
	EC2NetworkInterfaceKind             = "EC2NetworkInterface"
	EC2NetworkInterfaceGroupKind        = schema.GroupKind{Group: Group, Kind: EC2NetworkInterfaceKind}.String()
	EC2NetworkInterfaceKindAPIVersion   = EC2NetworkInterfaceKind + "." + GroupVersion.String()
	EC2NetworkInterfaceGroupVersionKind = GroupVersion.WithKind(EC2NetworkInterfaceKind)
)

func init() {
	SchemeBuilder.Register(&EC2NetworkInterface{}, &EC2NetworkInterfaceList{})
}
