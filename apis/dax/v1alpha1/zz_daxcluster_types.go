/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	xpv1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"
)

type DaxClusterObservation struct {
	Arn string `json:"arn" tf:"arn"`

	ClusterAddress string `json:"clusterAddress" tf:"cluster_address"`

	ConfigurationEndpoint string `json:"configurationEndpoint" tf:"configuration_endpoint"`

	Nodes []NodesObservation `json:"nodes" tf:"nodes"`

	Port int64 `json:"port" tf:"port"`
}

type DaxClusterParameters struct {

	// +kubebuilder:validation:Optional
	AvailabilityZones []string `json:"availabilityZones,omitempty" tf:"availability_zones"`

	// +kubebuilder:validation:Required
	ClusterName string `json:"clusterName" tf:"cluster_name"`

	// +kubebuilder:validation:Optional
	Description *string `json:"description,omitempty" tf:"description"`

	// +kubebuilder:validation:Required
	IamRoleArn string `json:"iamRoleArn" tf:"iam_role_arn"`

	// +kubebuilder:validation:Optional
	MaintenanceWindow *string `json:"maintenanceWindow,omitempty" tf:"maintenance_window"`

	// +kubebuilder:validation:Required
	NodeType string `json:"nodeType" tf:"node_type"`

	// +kubebuilder:validation:Optional
	NotificationTopicArn *string `json:"notificationTopicArn,omitempty" tf:"notification_topic_arn"`

	// +kubebuilder:validation:Optional
	ParameterGroupName *string `json:"parameterGroupName,omitempty" tf:"parameter_group_name"`

	// Region is the region you'd like your resource to be created in.
	// +terrajet:crd:field:TFTag=-
	// +kubebuilder:validation:Required
	Region string `json:"region" tf:"-"`

	// +kubebuilder:validation:Required
	ReplicationFactor int64 `json:"replicationFactor" tf:"replication_factor"`

	// +kubebuilder:validation:Optional
	SecurityGroupIds []string `json:"securityGroupIds,omitempty" tf:"security_group_ids"`

	// +kubebuilder:validation:Optional
	ServerSideEncryption []ServerSideEncryptionParameters `json:"serverSideEncryption,omitempty" tf:"server_side_encryption"`

	// +kubebuilder:validation:Optional
	SubnetGroupName *string `json:"subnetGroupName,omitempty" tf:"subnet_group_name"`

	// +kubebuilder:validation:Optional
	Tags map[string]string `json:"tags,omitempty" tf:"tags"`

	// +kubebuilder:validation:Optional
	TagsAll map[string]string `json:"tagsAll,omitempty" tf:"tags_all"`
}

type NodesObservation struct {
	Address string `json:"address" tf:"address"`

	AvailabilityZone string `json:"availabilityZone" tf:"availability_zone"`

	ID string `json:"id" tf:"id"`

	Port int64 `json:"port" tf:"port"`
}

type NodesParameters struct {
}

type ServerSideEncryptionObservation struct {
}

type ServerSideEncryptionParameters struct {

	// +kubebuilder:validation:Optional
	Enabled *bool `json:"enabled,omitempty" tf:"enabled"`
}

// DaxClusterSpec defines the desired state of DaxCluster
type DaxClusterSpec struct {
	xpv1.ResourceSpec `json:",inline"`
	ForProvider       DaxClusterParameters `json:"forProvider"`
}

// DaxClusterStatus defines the observed state of DaxCluster.
type DaxClusterStatus struct {
	xpv1.ResourceStatus `json:",inline"`
	AtProvider          DaxClusterObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// DaxCluster is the Schema for the DaxClusters API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,tfaws}
type DaxCluster struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              DaxClusterSpec   `json:"spec"`
	Status            DaxClusterStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// DaxClusterList contains a list of DaxClusters
type DaxClusterList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []DaxCluster `json:"items"`
}

// Repository type metadata.
var (
	DaxClusterKind             = "DaxCluster"
	DaxClusterGroupKind        = schema.GroupKind{Group: Group, Kind: DaxClusterKind}.String()
	DaxClusterKindAPIVersion   = DaxClusterKind + "." + GroupVersion.String()
	DaxClusterGroupVersionKind = GroupVersion.WithKind(DaxClusterKind)
)

func init() {
	SchemeBuilder.Register(&DaxCluster{}, &DaxClusterList{})
}
