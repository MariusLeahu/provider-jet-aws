/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	xpv1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"
)

type SagemakerNotebookInstanceObservation struct {
	Arn string `json:"arn" tf:"arn"`

	NetworkInterfaceID string `json:"networkInterfaceId" tf:"network_interface_id"`

	URL string `json:"url" tf:"url"`
}

type SagemakerNotebookInstanceParameters struct {

	// +kubebuilder:validation:Optional
	AdditionalCodeRepositories []string `json:"additionalCodeRepositories,omitempty" tf:"additional_code_repositories"`

	// +kubebuilder:validation:Optional
	DefaultCodeRepository *string `json:"defaultCodeRepository,omitempty" tf:"default_code_repository"`

	// +kubebuilder:validation:Optional
	DirectInternetAccess *string `json:"directInternetAccess,omitempty" tf:"direct_internet_access"`

	// +kubebuilder:validation:Required
	InstanceType string `json:"instanceType" tf:"instance_type"`

	// +kubebuilder:validation:Optional
	KmsKeyID *string `json:"kmsKeyId,omitempty" tf:"kms_key_id"`

	// +kubebuilder:validation:Optional
	LifecycleConfigName *string `json:"lifecycleConfigName,omitempty" tf:"lifecycle_config_name"`

	// +kubebuilder:validation:Required
	Name string `json:"name" tf:"name"`

	// Region is the region you'd like your resource to be created in.
	// +terrajet:crd:field:TFTag=-
	// +kubebuilder:validation:Required
	Region string `json:"region" tf:"-"`

	// +kubebuilder:validation:Required
	RoleArn string `json:"roleArn" tf:"role_arn"`

	// +kubebuilder:validation:Optional
	RootAccess *string `json:"rootAccess,omitempty" tf:"root_access"`

	// +kubebuilder:validation:Optional
	SecurityGroups []string `json:"securityGroups,omitempty" tf:"security_groups"`

	// +kubebuilder:validation:Optional
	SubnetID *string `json:"subnetId,omitempty" tf:"subnet_id"`

	// +kubebuilder:validation:Optional
	Tags map[string]string `json:"tags,omitempty" tf:"tags"`

	// +kubebuilder:validation:Optional
	TagsAll map[string]string `json:"tagsAll,omitempty" tf:"tags_all"`

	// +kubebuilder:validation:Optional
	VolumeSize *int64 `json:"volumeSize,omitempty" tf:"volume_size"`
}

// SagemakerNotebookInstanceSpec defines the desired state of SagemakerNotebookInstance
type SagemakerNotebookInstanceSpec struct {
	xpv1.ResourceSpec `json:",inline"`
	ForProvider       SagemakerNotebookInstanceParameters `json:"forProvider"`
}

// SagemakerNotebookInstanceStatus defines the observed state of SagemakerNotebookInstance.
type SagemakerNotebookInstanceStatus struct {
	xpv1.ResourceStatus `json:",inline"`
	AtProvider          SagemakerNotebookInstanceObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// SagemakerNotebookInstance is the Schema for the SagemakerNotebookInstances API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,tfaws}
type SagemakerNotebookInstance struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              SagemakerNotebookInstanceSpec   `json:"spec"`
	Status            SagemakerNotebookInstanceStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// SagemakerNotebookInstanceList contains a list of SagemakerNotebookInstances
type SagemakerNotebookInstanceList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []SagemakerNotebookInstance `json:"items"`
}

// Repository type metadata.
var (
	SagemakerNotebookInstanceKind             = "SagemakerNotebookInstance"
	SagemakerNotebookInstanceGroupKind        = schema.GroupKind{Group: Group, Kind: SagemakerNotebookInstanceKind}.String()
	SagemakerNotebookInstanceKindAPIVersion   = SagemakerNotebookInstanceKind + "." + GroupVersion.String()
	SagemakerNotebookInstanceGroupVersionKind = GroupVersion.WithKind(SagemakerNotebookInstanceKind)
)

func init() {
	SchemeBuilder.Register(&SagemakerNotebookInstance{}, &SagemakerNotebookInstanceList{})
}
