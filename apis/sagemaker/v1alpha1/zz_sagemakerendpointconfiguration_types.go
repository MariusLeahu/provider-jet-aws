/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	xpv1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"
)

type CaptureContentTypeHeaderObservation struct {
}

type CaptureContentTypeHeaderParameters struct {

	// +kubebuilder:validation:Optional
	CsvContentTypes []string `json:"csvContentTypes,omitempty" tf:"csv_content_types"`

	// +kubebuilder:validation:Optional
	JSONContentTypes []string `json:"jsonContentTypes,omitempty" tf:"json_content_types"`
}

type CaptureOptionsObservation struct {
}

type CaptureOptionsParameters struct {

	// +kubebuilder:validation:Required
	CaptureMode string `json:"captureMode" tf:"capture_mode"`
}

type DataCaptureConfigObservation struct {
}

type DataCaptureConfigParameters struct {

	// +kubebuilder:validation:Optional
	CaptureContentTypeHeader []CaptureContentTypeHeaderParameters `json:"captureContentTypeHeader,omitempty" tf:"capture_content_type_header"`

	// +kubebuilder:validation:Required
	CaptureOptions []CaptureOptionsParameters `json:"captureOptions" tf:"capture_options"`

	// +kubebuilder:validation:Required
	DestinationS3URI string `json:"destinationS3Uri" tf:"destination_s3_uri"`

	// +kubebuilder:validation:Optional
	EnableCapture *bool `json:"enableCapture,omitempty" tf:"enable_capture"`

	// +kubebuilder:validation:Required
	InitialSamplingPercentage int64 `json:"initialSamplingPercentage" tf:"initial_sampling_percentage"`

	// +kubebuilder:validation:Optional
	KmsKeyID *string `json:"kmsKeyId,omitempty" tf:"kms_key_id"`
}

type ProductionVariantsObservation struct {
}

type ProductionVariantsParameters struct {

	// +kubebuilder:validation:Optional
	AcceleratorType *string `json:"acceleratorType,omitempty" tf:"accelerator_type"`

	// +kubebuilder:validation:Required
	InitialInstanceCount int64 `json:"initialInstanceCount" tf:"initial_instance_count"`

	// +kubebuilder:validation:Optional
	InitialVariantWeight *float64 `json:"initialVariantWeight,omitempty" tf:"initial_variant_weight"`

	// +kubebuilder:validation:Required
	InstanceType string `json:"instanceType" tf:"instance_type"`

	// +kubebuilder:validation:Required
	ModelName string `json:"modelName" tf:"model_name"`

	// +kubebuilder:validation:Optional
	VariantName *string `json:"variantName,omitempty" tf:"variant_name"`
}

type SagemakerEndpointConfigurationObservation struct {
	Arn string `json:"arn" tf:"arn"`
}

type SagemakerEndpointConfigurationParameters struct {

	// +kubebuilder:validation:Optional
	DataCaptureConfig []DataCaptureConfigParameters `json:"dataCaptureConfig,omitempty" tf:"data_capture_config"`

	// +kubebuilder:validation:Optional
	KmsKeyArn *string `json:"kmsKeyArn,omitempty" tf:"kms_key_arn"`

	// +kubebuilder:validation:Optional
	Name *string `json:"name,omitempty" tf:"name"`

	// +kubebuilder:validation:Required
	ProductionVariants []ProductionVariantsParameters `json:"productionVariants" tf:"production_variants"`

	// Region is the region you'd like your resource to be created in.
	// +terrajet:crd:field:TFTag=-
	// +kubebuilder:validation:Required
	Region string `json:"region" tf:"-"`

	// +kubebuilder:validation:Optional
	Tags map[string]string `json:"tags,omitempty" tf:"tags"`

	// +kubebuilder:validation:Optional
	TagsAll map[string]string `json:"tagsAll,omitempty" tf:"tags_all"`
}

// SagemakerEndpointConfigurationSpec defines the desired state of SagemakerEndpointConfiguration
type SagemakerEndpointConfigurationSpec struct {
	xpv1.ResourceSpec `json:",inline"`
	ForProvider       SagemakerEndpointConfigurationParameters `json:"forProvider"`
}

// SagemakerEndpointConfigurationStatus defines the observed state of SagemakerEndpointConfiguration.
type SagemakerEndpointConfigurationStatus struct {
	xpv1.ResourceStatus `json:",inline"`
	AtProvider          SagemakerEndpointConfigurationObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// SagemakerEndpointConfiguration is the Schema for the SagemakerEndpointConfigurations API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,tfaws}
type SagemakerEndpointConfiguration struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              SagemakerEndpointConfigurationSpec   `json:"spec"`
	Status            SagemakerEndpointConfigurationStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// SagemakerEndpointConfigurationList contains a list of SagemakerEndpointConfigurations
type SagemakerEndpointConfigurationList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []SagemakerEndpointConfiguration `json:"items"`
}

// Repository type metadata.
var (
	SagemakerEndpointConfigurationKind             = "SagemakerEndpointConfiguration"
	SagemakerEndpointConfigurationGroupKind        = schema.GroupKind{Group: Group, Kind: SagemakerEndpointConfigurationKind}.String()
	SagemakerEndpointConfigurationKindAPIVersion   = SagemakerEndpointConfigurationKind + "." + GroupVersion.String()
	SagemakerEndpointConfigurationGroupVersionKind = GroupVersion.WithKind(SagemakerEndpointConfigurationKind)
)

func init() {
	SchemeBuilder.Register(&SagemakerEndpointConfiguration{}, &SagemakerEndpointConfigurationList{})
}
