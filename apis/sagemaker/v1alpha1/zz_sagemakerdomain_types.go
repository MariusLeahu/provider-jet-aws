/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	xpv1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"
)

type CustomImageObservation struct {
}

type CustomImageParameters struct {

	// +kubebuilder:validation:Required
	AppImageConfigName string `json:"appImageConfigName" tf:"app_image_config_name"`

	// +kubebuilder:validation:Required
	ImageName string `json:"imageName" tf:"image_name"`

	// +kubebuilder:validation:Optional
	ImageVersionNumber *int64 `json:"imageVersionNumber,omitempty" tf:"image_version_number"`
}

type DefaultResourceSpecObservation struct {
}

type DefaultResourceSpecParameters struct {

	// +kubebuilder:validation:Optional
	InstanceType *string `json:"instanceType,omitempty" tf:"instance_type"`

	// +kubebuilder:validation:Optional
	SagemakerImageArn *string `json:"sagemakerImageArn,omitempty" tf:"sagemaker_image_arn"`
}

type DefaultUserSettingsObservation struct {
}

type DefaultUserSettingsParameters struct {

	// +kubebuilder:validation:Required
	ExecutionRole string `json:"executionRole" tf:"execution_role"`

	// +kubebuilder:validation:Optional
	JupyterServerAppSettings []JupyterServerAppSettingsParameters `json:"jupyterServerAppSettings,omitempty" tf:"jupyter_server_app_settings"`

	// +kubebuilder:validation:Optional
	KernelGatewayAppSettings []KernelGatewayAppSettingsParameters `json:"kernelGatewayAppSettings,omitempty" tf:"kernel_gateway_app_settings"`

	// +kubebuilder:validation:Optional
	SecurityGroups []string `json:"securityGroups,omitempty" tf:"security_groups"`

	// +kubebuilder:validation:Optional
	SharingSettings []SharingSettingsParameters `json:"sharingSettings,omitempty" tf:"sharing_settings"`

	// +kubebuilder:validation:Optional
	TensorBoardAppSettings []TensorBoardAppSettingsParameters `json:"tensorBoardAppSettings,omitempty" tf:"tensor_board_app_settings"`
}

type JupyterServerAppSettingsObservation struct {
}

type JupyterServerAppSettingsParameters struct {

	// +kubebuilder:validation:Optional
	DefaultResourceSpec []DefaultResourceSpecParameters `json:"defaultResourceSpec,omitempty" tf:"default_resource_spec"`
}

type KernelGatewayAppSettingsDefaultResourceSpecObservation struct {
}

type KernelGatewayAppSettingsDefaultResourceSpecParameters struct {

	// +kubebuilder:validation:Optional
	InstanceType *string `json:"instanceType,omitempty" tf:"instance_type"`

	// +kubebuilder:validation:Optional
	SagemakerImageArn *string `json:"sagemakerImageArn,omitempty" tf:"sagemaker_image_arn"`
}

type KernelGatewayAppSettingsObservation struct {
}

type KernelGatewayAppSettingsParameters struct {

	// +kubebuilder:validation:Optional
	CustomImage []CustomImageParameters `json:"customImage,omitempty" tf:"custom_image"`

	// +kubebuilder:validation:Optional
	DefaultResourceSpec []KernelGatewayAppSettingsDefaultResourceSpecParameters `json:"defaultResourceSpec,omitempty" tf:"default_resource_spec"`
}

type RetentionPolicyObservation struct {
}

type RetentionPolicyParameters struct {

	// +kubebuilder:validation:Optional
	HomeEfsFileSystem *string `json:"homeEfsFileSystem,omitempty" tf:"home_efs_file_system"`
}

type SagemakerDomainObservation struct {
	Arn string `json:"arn" tf:"arn"`

	HomeEfsFileSystemID string `json:"homeEfsFileSystemId" tf:"home_efs_file_system_id"`

	SingleSignOnManagedApplicationInstanceID string `json:"singleSignOnManagedApplicationInstanceId" tf:"single_sign_on_managed_application_instance_id"`

	URL string `json:"url" tf:"url"`
}

type SagemakerDomainParameters struct {

	// +kubebuilder:validation:Optional
	AppNetworkAccessType *string `json:"appNetworkAccessType,omitempty" tf:"app_network_access_type"`

	// +kubebuilder:validation:Required
	AuthMode string `json:"authMode" tf:"auth_mode"`

	// +kubebuilder:validation:Required
	DefaultUserSettings []DefaultUserSettingsParameters `json:"defaultUserSettings" tf:"default_user_settings"`

	// +kubebuilder:validation:Required
	DomainName string `json:"domainName" tf:"domain_name"`

	// +kubebuilder:validation:Optional
	KmsKeyID *string `json:"kmsKeyId,omitempty" tf:"kms_key_id"`

	// Region is the region you'd like your resource to be created in.
	// +terrajet:crd:field:TFTag=-
	// +kubebuilder:validation:Required
	Region string `json:"region" tf:"-"`

	// +kubebuilder:validation:Optional
	RetentionPolicy []RetentionPolicyParameters `json:"retentionPolicy,omitempty" tf:"retention_policy"`

	// +kubebuilder:validation:Required
	SubnetIds []string `json:"subnetIds" tf:"subnet_ids"`

	// +kubebuilder:validation:Optional
	Tags map[string]string `json:"tags,omitempty" tf:"tags"`

	// +kubebuilder:validation:Optional
	TagsAll map[string]string `json:"tagsAll,omitempty" tf:"tags_all"`

	// +kubebuilder:validation:Required
	VpcID string `json:"vpcId" tf:"vpc_id"`
}

type SharingSettingsObservation struct {
}

type SharingSettingsParameters struct {

	// +kubebuilder:validation:Optional
	NotebookOutputOption *string `json:"notebookOutputOption,omitempty" tf:"notebook_output_option"`

	// +kubebuilder:validation:Optional
	S3KmsKeyID *string `json:"s3KmsKeyId,omitempty" tf:"s3_kms_key_id"`

	// +kubebuilder:validation:Optional
	S3OutputPath *string `json:"s3OutputPath,omitempty" tf:"s3_output_path"`
}

type TensorBoardAppSettingsDefaultResourceSpecObservation struct {
}

type TensorBoardAppSettingsDefaultResourceSpecParameters struct {

	// +kubebuilder:validation:Optional
	InstanceType *string `json:"instanceType,omitempty" tf:"instance_type"`

	// +kubebuilder:validation:Optional
	SagemakerImageArn *string `json:"sagemakerImageArn,omitempty" tf:"sagemaker_image_arn"`
}

type TensorBoardAppSettingsObservation struct {
}

type TensorBoardAppSettingsParameters struct {

	// +kubebuilder:validation:Optional
	DefaultResourceSpec []TensorBoardAppSettingsDefaultResourceSpecParameters `json:"defaultResourceSpec,omitempty" tf:"default_resource_spec"`
}

// SagemakerDomainSpec defines the desired state of SagemakerDomain
type SagemakerDomainSpec struct {
	xpv1.ResourceSpec `json:",inline"`
	ForProvider       SagemakerDomainParameters `json:"forProvider"`
}

// SagemakerDomainStatus defines the observed state of SagemakerDomain.
type SagemakerDomainStatus struct {
	xpv1.ResourceStatus `json:",inline"`
	AtProvider          SagemakerDomainObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// SagemakerDomain is the Schema for the SagemakerDomains API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,tfaws}
type SagemakerDomain struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              SagemakerDomainSpec   `json:"spec"`
	Status            SagemakerDomainStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// SagemakerDomainList contains a list of SagemakerDomains
type SagemakerDomainList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []SagemakerDomain `json:"items"`
}

// Repository type metadata.
var (
	SagemakerDomainKind             = "SagemakerDomain"
	SagemakerDomainGroupKind        = schema.GroupKind{Group: Group, Kind: SagemakerDomainKind}.String()
	SagemakerDomainKindAPIVersion   = SagemakerDomainKind + "." + GroupVersion.String()
	SagemakerDomainGroupVersionKind = GroupVersion.WithKind(SagemakerDomainKind)
)

func init() {
	SchemeBuilder.Register(&SagemakerDomain{}, &SagemakerDomainList{})
}
