/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	xpv1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"
)

type AllSettingsObservation struct {
}

type AllSettingsParameters struct {

	// +kubebuilder:validation:Required
	Name string `json:"name" tf:"name"`

	// +kubebuilder:validation:Required
	Namespace string `json:"namespace" tf:"namespace"`

	// +kubebuilder:validation:Optional
	Resource *string `json:"resource,omitempty" tf:"resource"`

	// +kubebuilder:validation:Required
	Value string `json:"value" tf:"value"`
}

type ElasticBeanstalkEnvironmentObservation struct {
	AllSettings []AllSettingsObservation `json:"allSettings" tf:"all_settings"`

	Arn string `json:"arn" tf:"arn"`

	AutoscalingGroups []string `json:"autoscalingGroups" tf:"autoscaling_groups"`

	Cname string `json:"cname" tf:"cname"`

	EndpointURL string `json:"endpointUrl" tf:"endpoint_url"`

	Instances []string `json:"instances" tf:"instances"`

	LaunchConfigurations []string `json:"launchConfigurations" tf:"launch_configurations"`

	LoadBalancers []string `json:"loadBalancers" tf:"load_balancers"`

	Queues []string `json:"queues" tf:"queues"`

	Triggers []string `json:"triggers" tf:"triggers"`
}

type ElasticBeanstalkEnvironmentParameters struct {

	// +kubebuilder:validation:Required
	Application string `json:"application" tf:"application"`

	// +kubebuilder:validation:Optional
	CnamePrefix *string `json:"cnamePrefix,omitempty" tf:"cname_prefix"`

	// +kubebuilder:validation:Optional
	Description *string `json:"description,omitempty" tf:"description"`

	// +kubebuilder:validation:Required
	Name string `json:"name" tf:"name"`

	// +kubebuilder:validation:Optional
	PlatformArn *string `json:"platformArn,omitempty" tf:"platform_arn"`

	// +kubebuilder:validation:Optional
	PollInterval *string `json:"pollInterval,omitempty" tf:"poll_interval"`

	// Region is the region you'd like your resource to be created in.
	// +terrajet:crd:field:TFTag=-
	// +kubebuilder:validation:Required
	Region string `json:"region" tf:"-"`

	// +kubebuilder:validation:Optional
	Setting []ElasticBeanstalkEnvironmentSettingParameters `json:"setting,omitempty" tf:"setting"`

	// +kubebuilder:validation:Optional
	SolutionStackName *string `json:"solutionStackName,omitempty" tf:"solution_stack_name"`

	// +kubebuilder:validation:Optional
	Tags map[string]string `json:"tags,omitempty" tf:"tags"`

	// +kubebuilder:validation:Optional
	TagsAll map[string]string `json:"tagsAll,omitempty" tf:"tags_all"`

	// +kubebuilder:validation:Optional
	TemplateName *string `json:"templateName,omitempty" tf:"template_name"`

	// +kubebuilder:validation:Optional
	Tier *string `json:"tier,omitempty" tf:"tier"`

	// +kubebuilder:validation:Optional
	VersionLabel *string `json:"versionLabel,omitempty" tf:"version_label"`

	// +kubebuilder:validation:Optional
	WaitForReadyTimeout *string `json:"waitForReadyTimeout,omitempty" tf:"wait_for_ready_timeout"`
}

type ElasticBeanstalkEnvironmentSettingObservation struct {
}

type ElasticBeanstalkEnvironmentSettingParameters struct {

	// +kubebuilder:validation:Required
	Name string `json:"name" tf:"name"`

	// +kubebuilder:validation:Required
	Namespace string `json:"namespace" tf:"namespace"`

	// +kubebuilder:validation:Optional
	Resource *string `json:"resource,omitempty" tf:"resource"`

	// +kubebuilder:validation:Required
	Value string `json:"value" tf:"value"`
}

// ElasticBeanstalkEnvironmentSpec defines the desired state of ElasticBeanstalkEnvironment
type ElasticBeanstalkEnvironmentSpec struct {
	xpv1.ResourceSpec `json:",inline"`
	ForProvider       ElasticBeanstalkEnvironmentParameters `json:"forProvider"`
}

// ElasticBeanstalkEnvironmentStatus defines the observed state of ElasticBeanstalkEnvironment.
type ElasticBeanstalkEnvironmentStatus struct {
	xpv1.ResourceStatus `json:",inline"`
	AtProvider          ElasticBeanstalkEnvironmentObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// ElasticBeanstalkEnvironment is the Schema for the ElasticBeanstalkEnvironments API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,tfaws}
type ElasticBeanstalkEnvironment struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              ElasticBeanstalkEnvironmentSpec   `json:"spec"`
	Status            ElasticBeanstalkEnvironmentStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// ElasticBeanstalkEnvironmentList contains a list of ElasticBeanstalkEnvironments
type ElasticBeanstalkEnvironmentList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []ElasticBeanstalkEnvironment `json:"items"`
}

// Repository type metadata.
var (
	ElasticBeanstalkEnvironmentKind             = "ElasticBeanstalkEnvironment"
	ElasticBeanstalkEnvironmentGroupKind        = schema.GroupKind{Group: Group, Kind: ElasticBeanstalkEnvironmentKind}.String()
	ElasticBeanstalkEnvironmentKindAPIVersion   = ElasticBeanstalkEnvironmentKind + "." + GroupVersion.String()
	ElasticBeanstalkEnvironmentGroupVersionKind = GroupVersion.WithKind(ElasticBeanstalkEnvironmentKind)
)

func init() {
	SchemeBuilder.Register(&ElasticBeanstalkEnvironment{}, &ElasticBeanstalkEnvironmentList{})
}
