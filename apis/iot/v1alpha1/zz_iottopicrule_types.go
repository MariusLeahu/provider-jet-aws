/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	xpv1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"
)

type CloudwatchAlarmObservation struct {
}

type CloudwatchAlarmParameters struct {

	// +kubebuilder:validation:Required
	AlarmName string `json:"alarmName" tf:"alarm_name"`

	// +kubebuilder:validation:Required
	RoleArn string `json:"roleArn" tf:"role_arn"`

	// +kubebuilder:validation:Required
	StateReason string `json:"stateReason" tf:"state_reason"`

	// +kubebuilder:validation:Required
	StateValue string `json:"stateValue" tf:"state_value"`
}

type CloudwatchMetricObservation struct {
}

type CloudwatchMetricParameters struct {

	// +kubebuilder:validation:Required
	MetricName string `json:"metricName" tf:"metric_name"`

	// +kubebuilder:validation:Required
	MetricNamespace string `json:"metricNamespace" tf:"metric_namespace"`

	// +kubebuilder:validation:Optional
	MetricTimestamp *string `json:"metricTimestamp,omitempty" tf:"metric_timestamp"`

	// +kubebuilder:validation:Required
	MetricUnit string `json:"metricUnit" tf:"metric_unit"`

	// +kubebuilder:validation:Required
	MetricValue string `json:"metricValue" tf:"metric_value"`

	// +kubebuilder:validation:Required
	RoleArn string `json:"roleArn" tf:"role_arn"`
}

type DynamodbObservation struct {
}

type DynamodbParameters struct {

	// +kubebuilder:validation:Required
	HashKeyField string `json:"hashKeyField" tf:"hash_key_field"`

	// +kubebuilder:validation:Optional
	HashKeyType *string `json:"hashKeyType,omitempty" tf:"hash_key_type"`

	// +kubebuilder:validation:Required
	HashKeyValue string `json:"hashKeyValue" tf:"hash_key_value"`

	// +kubebuilder:validation:Optional
	Operation *string `json:"operation,omitempty" tf:"operation"`

	// +kubebuilder:validation:Optional
	PayloadField *string `json:"payloadField,omitempty" tf:"payload_field"`

	// +kubebuilder:validation:Optional
	RangeKeyField *string `json:"rangeKeyField,omitempty" tf:"range_key_field"`

	// +kubebuilder:validation:Optional
	RangeKeyType *string `json:"rangeKeyType,omitempty" tf:"range_key_type"`

	// +kubebuilder:validation:Optional
	RangeKeyValue *string `json:"rangeKeyValue,omitempty" tf:"range_key_value"`

	// +kubebuilder:validation:Required
	RoleArn string `json:"roleArn" tf:"role_arn"`

	// +kubebuilder:validation:Required
	TableName string `json:"tableName" tf:"table_name"`
}

type Dynamodbv2Observation struct {
}

type Dynamodbv2Parameters struct {

	// +kubebuilder:validation:Optional
	PutItem []PutItemParameters `json:"putItem,omitempty" tf:"put_item"`

	// +kubebuilder:validation:Required
	RoleArn string `json:"roleArn" tf:"role_arn"`
}

type Dynamodbv2PutItemObservation struct {
}

type Dynamodbv2PutItemParameters struct {

	// +kubebuilder:validation:Required
	TableName string `json:"tableName" tf:"table_name"`
}

type ElasticsearchObservation struct {
}

type ElasticsearchParameters struct {

	// +kubebuilder:validation:Required
	Endpoint string `json:"endpoint" tf:"endpoint"`

	// +kubebuilder:validation:Required
	ID string `json:"id" tf:"id"`

	// +kubebuilder:validation:Required
	Index string `json:"index" tf:"index"`

	// +kubebuilder:validation:Required
	RoleArn string `json:"roleArn" tf:"role_arn"`

	// +kubebuilder:validation:Required
	Type string `json:"type" tf:"type"`
}

type ErrorActionCloudwatchAlarmObservation struct {
}

type ErrorActionCloudwatchAlarmParameters struct {

	// +kubebuilder:validation:Required
	AlarmName string `json:"alarmName" tf:"alarm_name"`

	// +kubebuilder:validation:Required
	RoleArn string `json:"roleArn" tf:"role_arn"`

	// +kubebuilder:validation:Required
	StateReason string `json:"stateReason" tf:"state_reason"`

	// +kubebuilder:validation:Required
	StateValue string `json:"stateValue" tf:"state_value"`
}

type ErrorActionCloudwatchMetricObservation struct {
}

type ErrorActionCloudwatchMetricParameters struct {

	// +kubebuilder:validation:Required
	MetricName string `json:"metricName" tf:"metric_name"`

	// +kubebuilder:validation:Required
	MetricNamespace string `json:"metricNamespace" tf:"metric_namespace"`

	// +kubebuilder:validation:Optional
	MetricTimestamp *string `json:"metricTimestamp,omitempty" tf:"metric_timestamp"`

	// +kubebuilder:validation:Required
	MetricUnit string `json:"metricUnit" tf:"metric_unit"`

	// +kubebuilder:validation:Required
	MetricValue string `json:"metricValue" tf:"metric_value"`

	// +kubebuilder:validation:Required
	RoleArn string `json:"roleArn" tf:"role_arn"`
}

type ErrorActionDynamodbObservation struct {
}

type ErrorActionDynamodbParameters struct {

	// +kubebuilder:validation:Required
	HashKeyField string `json:"hashKeyField" tf:"hash_key_field"`

	// +kubebuilder:validation:Optional
	HashKeyType *string `json:"hashKeyType,omitempty" tf:"hash_key_type"`

	// +kubebuilder:validation:Required
	HashKeyValue string `json:"hashKeyValue" tf:"hash_key_value"`

	// +kubebuilder:validation:Optional
	Operation *string `json:"operation,omitempty" tf:"operation"`

	// +kubebuilder:validation:Optional
	PayloadField *string `json:"payloadField,omitempty" tf:"payload_field"`

	// +kubebuilder:validation:Optional
	RangeKeyField *string `json:"rangeKeyField,omitempty" tf:"range_key_field"`

	// +kubebuilder:validation:Optional
	RangeKeyType *string `json:"rangeKeyType,omitempty" tf:"range_key_type"`

	// +kubebuilder:validation:Optional
	RangeKeyValue *string `json:"rangeKeyValue,omitempty" tf:"range_key_value"`

	// +kubebuilder:validation:Required
	RoleArn string `json:"roleArn" tf:"role_arn"`

	// +kubebuilder:validation:Required
	TableName string `json:"tableName" tf:"table_name"`
}

type ErrorActionDynamodbv2Observation struct {
}

type ErrorActionDynamodbv2Parameters struct {

	// +kubebuilder:validation:Optional
	PutItem []Dynamodbv2PutItemParameters `json:"putItem,omitempty" tf:"put_item"`

	// +kubebuilder:validation:Required
	RoleArn string `json:"roleArn" tf:"role_arn"`
}

type ErrorActionElasticsearchObservation struct {
}

type ErrorActionElasticsearchParameters struct {

	// +kubebuilder:validation:Required
	Endpoint string `json:"endpoint" tf:"endpoint"`

	// +kubebuilder:validation:Required
	ID string `json:"id" tf:"id"`

	// +kubebuilder:validation:Required
	Index string `json:"index" tf:"index"`

	// +kubebuilder:validation:Required
	RoleArn string `json:"roleArn" tf:"role_arn"`

	// +kubebuilder:validation:Required
	Type string `json:"type" tf:"type"`
}

type ErrorActionObservation struct {
}

type ErrorActionParameters struct {

	// +kubebuilder:validation:Optional
	CloudwatchAlarm []ErrorActionCloudwatchAlarmParameters `json:"cloudwatchAlarm,omitempty" tf:"cloudwatch_alarm"`

	// +kubebuilder:validation:Optional
	CloudwatchMetric []ErrorActionCloudwatchMetricParameters `json:"cloudwatchMetric,omitempty" tf:"cloudwatch_metric"`

	// +kubebuilder:validation:Optional
	Dynamodb []ErrorActionDynamodbParameters `json:"dynamodb,omitempty" tf:"dynamodb"`

	// +kubebuilder:validation:Optional
	Dynamodbv2 []ErrorActionDynamodbv2Parameters `json:"dynamodbv2,omitempty" tf:"dynamodbv2"`

	// +kubebuilder:validation:Optional
	Elasticsearch []ErrorActionElasticsearchParameters `json:"elasticsearch,omitempty" tf:"elasticsearch"`

	// +kubebuilder:validation:Optional
	Firehose []FirehoseParameters `json:"firehose,omitempty" tf:"firehose"`

	// +kubebuilder:validation:Optional
	IotAnalytics []IotAnalyticsParameters `json:"iotAnalytics,omitempty" tf:"iot_analytics"`

	// +kubebuilder:validation:Optional
	IotEvents []IotEventsParameters `json:"iotEvents,omitempty" tf:"iot_events"`

	// +kubebuilder:validation:Optional
	Kinesis []KinesisParameters `json:"kinesis,omitempty" tf:"kinesis"`

	// +kubebuilder:validation:Optional
	Lambda []LambdaParameters `json:"lambda,omitempty" tf:"lambda"`

	// +kubebuilder:validation:Optional
	Republish []RepublishParameters `json:"republish,omitempty" tf:"republish"`

	// +kubebuilder:validation:Optional
	S3 []S3Parameters `json:"s3,omitempty" tf:"s3"`

	// +kubebuilder:validation:Optional
	Sns []SnsParameters `json:"sns,omitempty" tf:"sns"`

	// +kubebuilder:validation:Optional
	Sqs []SqsParameters `json:"sqs,omitempty" tf:"sqs"`

	// +kubebuilder:validation:Optional
	StepFunctions []StepFunctionsParameters `json:"stepFunctions,omitempty" tf:"step_functions"`
}

type FirehoseObservation struct {
}

type FirehoseParameters struct {

	// +kubebuilder:validation:Required
	DeliveryStreamName string `json:"deliveryStreamName" tf:"delivery_stream_name"`

	// +kubebuilder:validation:Required
	RoleArn string `json:"roleArn" tf:"role_arn"`

	// +kubebuilder:validation:Optional
	Separator *string `json:"separator,omitempty" tf:"separator"`
}

type IotAnalyticsObservation struct {
}

type IotAnalyticsParameters struct {

	// +kubebuilder:validation:Required
	ChannelName string `json:"channelName" tf:"channel_name"`

	// +kubebuilder:validation:Required
	RoleArn string `json:"roleArn" tf:"role_arn"`
}

type IotEventsObservation struct {
}

type IotEventsParameters struct {

	// +kubebuilder:validation:Required
	InputName string `json:"inputName" tf:"input_name"`

	// +kubebuilder:validation:Optional
	MessageID *string `json:"messageId,omitempty" tf:"message_id"`

	// +kubebuilder:validation:Required
	RoleArn string `json:"roleArn" tf:"role_arn"`
}

type IotTopicRuleFirehoseObservation struct {
}

type IotTopicRuleFirehoseParameters struct {

	// +kubebuilder:validation:Required
	DeliveryStreamName string `json:"deliveryStreamName" tf:"delivery_stream_name"`

	// +kubebuilder:validation:Required
	RoleArn string `json:"roleArn" tf:"role_arn"`

	// +kubebuilder:validation:Optional
	Separator *string `json:"separator,omitempty" tf:"separator"`
}

type IotTopicRuleIotAnalyticsObservation struct {
}

type IotTopicRuleIotAnalyticsParameters struct {

	// +kubebuilder:validation:Required
	ChannelName string `json:"channelName" tf:"channel_name"`

	// +kubebuilder:validation:Required
	RoleArn string `json:"roleArn" tf:"role_arn"`
}

type IotTopicRuleIotEventsObservation struct {
}

type IotTopicRuleIotEventsParameters struct {

	// +kubebuilder:validation:Required
	InputName string `json:"inputName" tf:"input_name"`

	// +kubebuilder:validation:Optional
	MessageID *string `json:"messageId,omitempty" tf:"message_id"`

	// +kubebuilder:validation:Required
	RoleArn string `json:"roleArn" tf:"role_arn"`
}

type IotTopicRuleKinesisObservation struct {
}

type IotTopicRuleKinesisParameters struct {

	// +kubebuilder:validation:Optional
	PartitionKey *string `json:"partitionKey,omitempty" tf:"partition_key"`

	// +kubebuilder:validation:Required
	RoleArn string `json:"roleArn" tf:"role_arn"`

	// +kubebuilder:validation:Required
	StreamName string `json:"streamName" tf:"stream_name"`
}

type IotTopicRuleLambdaObservation struct {
}

type IotTopicRuleLambdaParameters struct {

	// +kubebuilder:validation:Required
	FunctionArn string `json:"functionArn" tf:"function_arn"`
}

type IotTopicRuleObservation struct {
	Arn string `json:"arn" tf:"arn"`
}

type IotTopicRuleParameters struct {

	// +kubebuilder:validation:Optional
	CloudwatchAlarm []CloudwatchAlarmParameters `json:"cloudwatchAlarm,omitempty" tf:"cloudwatch_alarm"`

	// +kubebuilder:validation:Optional
	CloudwatchMetric []CloudwatchMetricParameters `json:"cloudwatchMetric,omitempty" tf:"cloudwatch_metric"`

	// +kubebuilder:validation:Optional
	Description *string `json:"description,omitempty" tf:"description"`

	// +kubebuilder:validation:Optional
	Dynamodb []DynamodbParameters `json:"dynamodb,omitempty" tf:"dynamodb"`

	// +kubebuilder:validation:Optional
	Dynamodbv2 []Dynamodbv2Parameters `json:"dynamodbv2,omitempty" tf:"dynamodbv2"`

	// +kubebuilder:validation:Optional
	Elasticsearch []ElasticsearchParameters `json:"elasticsearch,omitempty" tf:"elasticsearch"`

	// +kubebuilder:validation:Required
	Enabled bool `json:"enabled" tf:"enabled"`

	// +kubebuilder:validation:Optional
	ErrorAction []ErrorActionParameters `json:"errorAction,omitempty" tf:"error_action"`

	// +kubebuilder:validation:Optional
	Firehose []IotTopicRuleFirehoseParameters `json:"firehose,omitempty" tf:"firehose"`

	// +kubebuilder:validation:Optional
	IotAnalytics []IotTopicRuleIotAnalyticsParameters `json:"iotAnalytics,omitempty" tf:"iot_analytics"`

	// +kubebuilder:validation:Optional
	IotEvents []IotTopicRuleIotEventsParameters `json:"iotEvents,omitempty" tf:"iot_events"`

	// +kubebuilder:validation:Optional
	Kinesis []IotTopicRuleKinesisParameters `json:"kinesis,omitempty" tf:"kinesis"`

	// +kubebuilder:validation:Optional
	Lambda []IotTopicRuleLambdaParameters `json:"lambda,omitempty" tf:"lambda"`

	// +kubebuilder:validation:Required
	Name string `json:"name" tf:"name"`

	// Region is the region you'd like your resource to be created in.
	// +terrajet:crd:field:TFTag=-
	// +kubebuilder:validation:Required
	Region string `json:"region" tf:"-"`

	// +kubebuilder:validation:Optional
	Republish []IotTopicRuleRepublishParameters `json:"republish,omitempty" tf:"republish"`

	// +kubebuilder:validation:Optional
	S3 []IotTopicRuleS3Parameters `json:"s3,omitempty" tf:"s3"`

	// +kubebuilder:validation:Required
	SQL string `json:"sql" tf:"sql"`

	// +kubebuilder:validation:Required
	SQLVersion string `json:"sqlVersion" tf:"sql_version"`

	// +kubebuilder:validation:Optional
	Sns []IotTopicRuleSnsParameters `json:"sns,omitempty" tf:"sns"`

	// +kubebuilder:validation:Optional
	Sqs []IotTopicRuleSqsParameters `json:"sqs,omitempty" tf:"sqs"`

	// +kubebuilder:validation:Optional
	StepFunctions []IotTopicRuleStepFunctionsParameters `json:"stepFunctions,omitempty" tf:"step_functions"`

	// +kubebuilder:validation:Optional
	Tags map[string]string `json:"tags,omitempty" tf:"tags"`

	// +kubebuilder:validation:Optional
	TagsAll map[string]string `json:"tagsAll,omitempty" tf:"tags_all"`
}

type IotTopicRuleRepublishObservation struct {
}

type IotTopicRuleRepublishParameters struct {

	// +kubebuilder:validation:Optional
	Qos *int64 `json:"qos,omitempty" tf:"qos"`

	// +kubebuilder:validation:Required
	RoleArn string `json:"roleArn" tf:"role_arn"`

	// +kubebuilder:validation:Required
	Topic string `json:"topic" tf:"topic"`
}

type IotTopicRuleS3Observation struct {
}

type IotTopicRuleS3Parameters struct {

	// +kubebuilder:validation:Required
	BucketName string `json:"bucketName" tf:"bucket_name"`

	// +kubebuilder:validation:Required
	Key string `json:"key" tf:"key"`

	// +kubebuilder:validation:Required
	RoleArn string `json:"roleArn" tf:"role_arn"`
}

type IotTopicRuleSnsObservation struct {
}

type IotTopicRuleSnsParameters struct {

	// +kubebuilder:validation:Optional
	MessageFormat *string `json:"messageFormat,omitempty" tf:"message_format"`

	// +kubebuilder:validation:Required
	RoleArn string `json:"roleArn" tf:"role_arn"`

	// +kubebuilder:validation:Required
	TargetArn string `json:"targetArn" tf:"target_arn"`
}

type IotTopicRuleSqsObservation struct {
}

type IotTopicRuleSqsParameters struct {

	// +kubebuilder:validation:Required
	QueueURL string `json:"queueUrl" tf:"queue_url"`

	// +kubebuilder:validation:Required
	RoleArn string `json:"roleArn" tf:"role_arn"`

	// +kubebuilder:validation:Required
	UseBase64 bool `json:"useBase64" tf:"use_base64"`
}

type IotTopicRuleStepFunctionsObservation struct {
}

type IotTopicRuleStepFunctionsParameters struct {

	// +kubebuilder:validation:Optional
	ExecutionNamePrefix *string `json:"executionNamePrefix,omitempty" tf:"execution_name_prefix"`

	// +kubebuilder:validation:Required
	RoleArn string `json:"roleArn" tf:"role_arn"`

	// +kubebuilder:validation:Required
	StateMachineName string `json:"stateMachineName" tf:"state_machine_name"`
}

type KinesisObservation struct {
}

type KinesisParameters struct {

	// +kubebuilder:validation:Optional
	PartitionKey *string `json:"partitionKey,omitempty" tf:"partition_key"`

	// +kubebuilder:validation:Required
	RoleArn string `json:"roleArn" tf:"role_arn"`

	// +kubebuilder:validation:Required
	StreamName string `json:"streamName" tf:"stream_name"`
}

type LambdaObservation struct {
}

type LambdaParameters struct {

	// +kubebuilder:validation:Required
	FunctionArn string `json:"functionArn" tf:"function_arn"`
}

type PutItemObservation struct {
}

type PutItemParameters struct {

	// +kubebuilder:validation:Required
	TableName string `json:"tableName" tf:"table_name"`
}

type RepublishObservation struct {
}

type RepublishParameters struct {

	// +kubebuilder:validation:Optional
	Qos *int64 `json:"qos,omitempty" tf:"qos"`

	// +kubebuilder:validation:Required
	RoleArn string `json:"roleArn" tf:"role_arn"`

	// +kubebuilder:validation:Required
	Topic string `json:"topic" tf:"topic"`
}

type S3Observation struct {
}

type S3Parameters struct {

	// +kubebuilder:validation:Required
	BucketName string `json:"bucketName" tf:"bucket_name"`

	// +kubebuilder:validation:Required
	Key string `json:"key" tf:"key"`

	// +kubebuilder:validation:Required
	RoleArn string `json:"roleArn" tf:"role_arn"`
}

type SnsObservation struct {
}

type SnsParameters struct {

	// +kubebuilder:validation:Optional
	MessageFormat *string `json:"messageFormat,omitempty" tf:"message_format"`

	// +kubebuilder:validation:Required
	RoleArn string `json:"roleArn" tf:"role_arn"`

	// +kubebuilder:validation:Required
	TargetArn string `json:"targetArn" tf:"target_arn"`
}

type SqsObservation struct {
}

type SqsParameters struct {

	// +kubebuilder:validation:Required
	QueueURL string `json:"queueUrl" tf:"queue_url"`

	// +kubebuilder:validation:Required
	RoleArn string `json:"roleArn" tf:"role_arn"`

	// +kubebuilder:validation:Required
	UseBase64 bool `json:"useBase64" tf:"use_base64"`
}

type StepFunctionsObservation struct {
}

type StepFunctionsParameters struct {

	// +kubebuilder:validation:Optional
	ExecutionNamePrefix *string `json:"executionNamePrefix,omitempty" tf:"execution_name_prefix"`

	// +kubebuilder:validation:Required
	RoleArn string `json:"roleArn" tf:"role_arn"`

	// +kubebuilder:validation:Required
	StateMachineName string `json:"stateMachineName" tf:"state_machine_name"`
}

// IotTopicRuleSpec defines the desired state of IotTopicRule
type IotTopicRuleSpec struct {
	xpv1.ResourceSpec `json:",inline"`
	ForProvider       IotTopicRuleParameters `json:"forProvider"`
}

// IotTopicRuleStatus defines the observed state of IotTopicRule.
type IotTopicRuleStatus struct {
	xpv1.ResourceStatus `json:",inline"`
	AtProvider          IotTopicRuleObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// IotTopicRule is the Schema for the IotTopicRules API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,tfaws}
type IotTopicRule struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              IotTopicRuleSpec   `json:"spec"`
	Status            IotTopicRuleStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// IotTopicRuleList contains a list of IotTopicRules
type IotTopicRuleList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []IotTopicRule `json:"items"`
}

// Repository type metadata.
var (
	IotTopicRuleKind             = "IotTopicRule"
	IotTopicRuleGroupKind        = schema.GroupKind{Group: Group, Kind: IotTopicRuleKind}.String()
	IotTopicRuleKindAPIVersion   = IotTopicRuleKind + "." + GroupVersion.String()
	IotTopicRuleGroupVersionKind = GroupVersion.WithKind(IotTopicRuleKind)
)

func init() {
	SchemeBuilder.Register(&IotTopicRule{}, &IotTopicRuleList{})
}
